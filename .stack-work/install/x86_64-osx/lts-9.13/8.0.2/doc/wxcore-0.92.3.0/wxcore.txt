-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | wxHaskell core
--   
--   wxHaskell is a portable and native GUI library for Haskell. It is
--   built on top of wxWidgets, a comprehensive C++ library that is
--   portable across all major GUI platforms, including GTK, Windows, X11,
--   and MacOS X. This version works with wxWidgets 2.9 and 3.0.
--   Distributed under the WXWINDOWS LIBRARY LICENSE. Please see LICENSE
--   file, but note that this is essentially LGPL with an exception
--   allowing binary distribution of proprietary software. This is the same
--   license as wxWidgets itself uses.
@package wxcore
@version 0.92.3.0


-- | Basic object type.
module Graphics.UI.WXCore.WxcObject

-- | An <tt>Object a</tt> is a pointer to an object of type <tt>a</tt>. The
--   <tt>a</tt> parameter is used to encode the inheritance relation. When
--   the type parameter is unit <tt>()</tt>, it denotes an object of
--   exactly that class, when the parameter is a type variable <tt>a</tt>,
--   it specifies an object that is at least an instance of that class. For
--   example in wxWidgets, we have the following class hierarchy:
--   
--   <pre>
--   EvtHandler
--     |- Window
--          |- Frame
--          |- Control
--              |- Button
--              |- Radiobox
--   </pre>
--   
--   In wxHaskell, all the creation functions will return objects of
--   exactly that class and use the <tt>()</tt> type:
--   
--   <pre>
--   frameCreate :: Window a -&gt; ... -&gt; IO (Frame ())
--   buttonCreate :: Window a -&gt; ... -&gt; IO (Button ())
--   ...
--   </pre>
--   
--   In contrast, all the <i>this</i> (or <i>self</i>) pointers of methods
--   can take objects of any instance of that class and have a type
--   variable, for example:
--   
--   <pre>
--   windowSetClientSize :: Window a -&gt; Size -&gt; IO ()
--   controlSetLabel     :: Control a -&gt; String -&gt; IO ()
--   buttonSetDefault    :: Button a -&gt; IO ()
--   </pre>
--   
--   This means that we can use <tt>windowSetClientSize</tt> on any window,
--   including buttons and frames, but we can only use
--   <tt>controlSetLabel</tt> on controls, not including frames.
--   
--   In wxHaskell, this works since a <tt>Frame ()</tt> is actually a type
--   synonym for <tt>Window (CFrame ())</tt> (where <tt>CFrame</tt> is an
--   abstract data type). We can thus pass a value of type <tt>Frame
--   ()</tt> to anything that expects some <tt>Window a</tt>. For a button
--   this works too, as it is a synonym for <tt>Control (CButton ())</tt>
--   which is in turn a synonym for <tt>Window (CControl (CButton
--   ()))</tt>. Note that we can't pass a frame to something that expects a
--   value of type <tt>Control a</tt>. Of course, a <tt>Window a</tt> is
--   actually a type synonym for <tt>EvtHandler (CWindow a)</tt>. If you
--   study the documentation in <a>Graphics.UI.WX.Classes</a> closely, you
--   can discover where this chain ends :-).
--   
--   Objects are not automatically deleted. Normally you can use a delete
--   function like <tt>windowDelete</tt> to delete an object. However,
--   almost all objects in the wxWidgets library are automatically deleted
--   by the library. The only objects that should be used with care are
--   resources as bitmaps, fonts and brushes.
data Object a

-- | A null object. Use with care.
objectNull :: Object a

-- | Test for null object.
objectIsNull :: Object a -> Bool

-- | Cast an object to another type. Use with care.
objectCast :: Object a -> Object b

-- | Is this a managed object?
objectIsManaged :: Object a -> Bool

-- | Create an unmanaged object.
objectFromPtr :: Ptr a -> Object a

-- | Create a managed object with a given finalizer.
objectFromManagedPtr :: ManagedPtr a -> IO (Object a)

-- | Do something with the object pointer.
withObjectPtr :: Object a -> (Ptr a -> IO b) -> IO b

-- | Finalize a managed object manually. (No effect on unmanaged objects.)
objectFinalize :: Object a -> IO ()

-- | Remove the finalizer on a managed object. (No effect on unmanaged
--   objects.)
objectNoFinalize :: Object a -> IO ()

-- | Managed pointer (proxy) objects
type ManagedPtr a = Ptr (CManagedPtr a)
type TManagedPtr a = CManagedPtr a
data CManagedPtr a
CManagedPtr :: CManagedPtr a
instance GHC.Classes.Eq (Graphics.UI.WXCore.WxcObject.Object a)
instance GHC.Classes.Ord (Graphics.UI.WXCore.WxcObject.Object a)
instance GHC.Show.Show (Graphics.UI.WXCore.WxcObject.Object a)


-- | Haskell constant definitions for the wxWidgets C library
--   (<tt>wxc.dll</tt>).
--   
--   This file was originally generated automatically by wxDirect; it is
--   now manually maintained.
module Graphics.UI.WXCore.WxcDefs

-- | A flag can be combined with other flags to a bit mask.
type BitFlag = Int

-- | This is different from wxBORDER_NONE, as by default the controls do
--   have border
wxBORDER_DEFAULT :: Int

-- | A mask to extract border style from the combination of flags
wxBORDER_MASK :: Int

-- | Displays no border, overriding the default border style for the
--   window. wxNO_BORDER is the old name for this style.
wxBORDER_NONE :: Int

-- | Displays a raised border. wxRAISED_BORDER is the old name for this
--   style.
wxBORDER_RAISED :: Int

-- | Displays a thin border around the window. wxSIMPLE_BORDER is the old
--   name for this style.
wxBORDER_SIMPLE :: Int

-- | Displays a border suitable for a static control. wxSTATIC_BORDER is
--   the old name for this style. Windows only.
wxBORDER_STATIC :: Int

-- | Displays a sunken border. wxSUNKEN_BORDER is the old name for this
--   style.
wxBORDER_SUNKEN :: Int

-- | Displays a themed border where possible. Currently this has an effect
--   on Windows XP and above only. For more information on themed borders,
--   please see Themed borders on Windows
--   <a>http://docs.wxwidgets.org/2.8/wx_wxmswport.html#wxmswthemedborders</a>.
wxBORDER_THEME :: Int

-- | Deprecated

-- | <i>Deprecated: Use wxBORDER_THEME</i>
wxDOUBLE_BORDER :: Int

-- | Deprecated

-- | <i>Deprecated: Use wxBORDER_RAISED</i>
wxRAISED_BORDER :: Int

-- | Deprecated

-- | <i>Deprecated: Use wxBORDER_STATIC</i>
wxSTATIC_BORDER :: Int

-- | Deprecated

-- | <i>Deprecated: Use wxBORDER_SUNKEN</i>
wxSUNKEN_BORDER :: Int


-- | Haskell class definitions for the wxWidgets C library
--   (<tt>wxc.dll</tt>).
--   
--   Do not edit this file manually! This file was automatically generated
--   by wxDirect.
--   
--   From the files:
--   
--   <ul>
--   <li><pre>wxc.h</pre></li>
--   </ul>
--   
--   And contains 574 class definitions.
module Graphics.UI.WXCore.WxcClassTypes

-- | Pointer to an object of type <a>AcceleratorEntry</a>.
type AcceleratorEntry a = Object (CAcceleratorEntry a)

-- | Inheritance type of the AcceleratorEntry class.
type TAcceleratorEntry a = CAcceleratorEntry a

-- | Abstract type of the AcceleratorEntry class.
data CAcceleratorEntry a
CAcceleratorEntry :: CAcceleratorEntry a

-- | Pointer to an object of type <a>AcceleratorTable</a>.
type AcceleratorTable a = Object (CAcceleratorTable a)

-- | Inheritance type of the AcceleratorTable class.
type TAcceleratorTable a = CAcceleratorTable a

-- | Abstract type of the AcceleratorTable class.
data CAcceleratorTable a
CAcceleratorTable :: CAcceleratorTable a

-- | Pointer to an object of type <a>ActivateEvent</a>, derived from
--   <a>Event</a>.
type ActivateEvent a = Event (CActivateEvent a)

-- | Inheritance type of the ActivateEvent class.
type TActivateEvent a = TEvent (CActivateEvent a)

-- | Abstract type of the ActivateEvent class.
data CActivateEvent a
CActivateEvent :: CActivateEvent a

-- | Pointer to an object of type <a>App</a>, derived from
--   <a>EvtHandler</a>.
type App a = EvtHandler (CApp a)

-- | Inheritance type of the App class.
type TApp a = TEvtHandler (CApp a)

-- | Abstract type of the App class.
data CApp a
CApp :: CApp a

-- | Pointer to an object of type <a>ArrayString</a>, derived from
--   <a>WxArray</a>.
type ArrayString a = WxArray (CArrayString a)

-- | Inheritance type of the ArrayString class.
type TArrayString a = TWxArray (CArrayString a)

-- | Abstract type of the ArrayString class.
data CArrayString a
CArrayString :: CArrayString a

-- | Pointer to an object of type <a>ArtProvider</a>, derived from
--   <a>WxObject</a>.
type ArtProvider a = WxObject (CArtProvider a)

-- | Inheritance type of the ArtProvider class.
type TArtProvider a = TWxObject (CArtProvider a)

-- | Abstract type of the ArtProvider class.
data CArtProvider a
CArtProvider :: CArtProvider a

-- | Pointer to an object of type <a>AuiDefaultTabArt</a>, derived from
--   <a>AuiTabArt</a>.
type AuiDefaultTabArt a = AuiTabArt (CAuiDefaultTabArt a)

-- | Inheritance type of the AuiDefaultTabArt class.
type TAuiDefaultTabArt a = TAuiTabArt (CAuiDefaultTabArt a)

-- | Abstract type of the AuiDefaultTabArt class.
data CAuiDefaultTabArt a
CAuiDefaultTabArt :: CAuiDefaultTabArt a

-- | Pointer to an object of type <a>AuiDefaultToolBarArt</a>, derived from
--   <a>AuiToolBarArt</a>.
type AuiDefaultToolBarArt a = AuiToolBarArt (CAuiDefaultToolBarArt a)

-- | Inheritance type of the AuiDefaultToolBarArt class.
type TAuiDefaultToolBarArt a = TAuiToolBarArt (CAuiDefaultToolBarArt a)

-- | Abstract type of the AuiDefaultToolBarArt class.
data CAuiDefaultToolBarArt a
CAuiDefaultToolBarArt :: CAuiDefaultToolBarArt a

-- | Pointer to an object of type <a>AuiDockArt</a>.
type AuiDockArt a = Object (CAuiDockArt a)

-- | Inheritance type of the AuiDockArt class.
type TAuiDockArt a = CAuiDockArt a

-- | Abstract type of the AuiDockArt class.
data CAuiDockArt a
CAuiDockArt :: CAuiDockArt a

-- | Pointer to an object of type <a>AuiManager</a>, derived from
--   <a>EvtHandler</a>.
type AuiManager a = EvtHandler (CAuiManager a)

-- | Inheritance type of the AuiManager class.
type TAuiManager a = TEvtHandler (CAuiManager a)

-- | Abstract type of the AuiManager class.
data CAuiManager a
CAuiManager :: CAuiManager a

-- | Pointer to an object of type <a>AuiManagerEvent</a>, derived from
--   <a>EvtHandler</a>.
type AuiManagerEvent a = EvtHandler (CAuiManagerEvent a)

-- | Inheritance type of the AuiManagerEvent class.
type TAuiManagerEvent a = TEvtHandler (CAuiManagerEvent a)

-- | Abstract type of the AuiManagerEvent class.
data CAuiManagerEvent a
CAuiManagerEvent :: CAuiManagerEvent a

-- | Pointer to an object of type <a>AuiNotebook</a>, derived from
--   <a>BookCtrlBase</a>.
type AuiNotebook a = BookCtrlBase (CAuiNotebook a)

-- | Inheritance type of the AuiNotebook class.
type TAuiNotebook a = TBookCtrlBase (CAuiNotebook a)

-- | Abstract type of the AuiNotebook class.
data CAuiNotebook a
CAuiNotebook :: CAuiNotebook a

-- | Pointer to an object of type <a>AuiNotebookEvent</a>, derived from
--   <a>BookCtrlEvent</a>.
type AuiNotebookEvent a = BookCtrlEvent (CAuiNotebookEvent a)

-- | Inheritance type of the AuiNotebookEvent class.
type TAuiNotebookEvent a = TBookCtrlEvent (CAuiNotebookEvent a)

-- | Abstract type of the AuiNotebookEvent class.
data CAuiNotebookEvent a
CAuiNotebookEvent :: CAuiNotebookEvent a

-- | Pointer to an object of type <a>AuiNotebookPage</a>.
type AuiNotebookPage a = Object (CAuiNotebookPage a)

-- | Inheritance type of the AuiNotebookPage class.
type TAuiNotebookPage a = CAuiNotebookPage a

-- | Abstract type of the AuiNotebookPage class.
data CAuiNotebookPage a
CAuiNotebookPage :: CAuiNotebookPage a

-- | Pointer to an object of type <a>AuiNotebookPageArray</a>.
type AuiNotebookPageArray a = Object (CAuiNotebookPageArray a)

-- | Inheritance type of the AuiNotebookPageArray class.
type TAuiNotebookPageArray a = CAuiNotebookPageArray a

-- | Abstract type of the AuiNotebookPageArray class.
data CAuiNotebookPageArray a
CAuiNotebookPageArray :: CAuiNotebookPageArray a

-- | Pointer to an object of type <a>AuiPaneInfo</a>.
type AuiPaneInfo a = Object (CAuiPaneInfo a)

-- | Inheritance type of the AuiPaneInfo class.
type TAuiPaneInfo a = CAuiPaneInfo a

-- | Abstract type of the AuiPaneInfo class.
data CAuiPaneInfo a
CAuiPaneInfo :: CAuiPaneInfo a

-- | Pointer to an object of type <a>AuiPaneInfoArray</a>.
type AuiPaneInfoArray a = Object (CAuiPaneInfoArray a)

-- | Inheritance type of the AuiPaneInfoArray class.
type TAuiPaneInfoArray a = CAuiPaneInfoArray a

-- | Abstract type of the AuiPaneInfoArray class.
data CAuiPaneInfoArray a
CAuiPaneInfoArray :: CAuiPaneInfoArray a

-- | Pointer to an object of type <a>AuiSimpleTabArt</a>, derived from
--   <a>AuiTabArt</a>.
type AuiSimpleTabArt a = AuiTabArt (CAuiSimpleTabArt a)

-- | Inheritance type of the AuiSimpleTabArt class.
type TAuiSimpleTabArt a = TAuiTabArt (CAuiSimpleTabArt a)

-- | Abstract type of the AuiSimpleTabArt class.
data CAuiSimpleTabArt a
CAuiSimpleTabArt :: CAuiSimpleTabArt a

-- | Pointer to an object of type <a>AuiTabArt</a>.
type AuiTabArt a = Object (CAuiTabArt a)

-- | Inheritance type of the AuiTabArt class.
type TAuiTabArt a = CAuiTabArt a

-- | Abstract type of the AuiTabArt class.
data CAuiTabArt a
CAuiTabArt :: CAuiTabArt a

-- | Pointer to an object of type <a>AuiTabContainer</a>.
type AuiTabContainer a = Object (CAuiTabContainer a)

-- | Inheritance type of the AuiTabContainer class.
type TAuiTabContainer a = CAuiTabContainer a

-- | Abstract type of the AuiTabContainer class.
data CAuiTabContainer a
CAuiTabContainer :: CAuiTabContainer a

-- | Pointer to an object of type <a>AuiTabContainerButton</a>.
type AuiTabContainerButton a = Object (CAuiTabContainerButton a)

-- | Inheritance type of the AuiTabContainerButton class.
type TAuiTabContainerButton a = CAuiTabContainerButton a

-- | Abstract type of the AuiTabContainerButton class.
data CAuiTabContainerButton a
CAuiTabContainerButton :: CAuiTabContainerButton a

-- | Pointer to an object of type <a>AuiTabCtrl</a>, derived from
--   <a>Control</a>.
type AuiTabCtrl a = Control (CAuiTabCtrl a)

-- | Inheritance type of the AuiTabCtrl class.
type TAuiTabCtrl a = TControl (CAuiTabCtrl a)

-- | Abstract type of the AuiTabCtrl class.
data CAuiTabCtrl a
CAuiTabCtrl :: CAuiTabCtrl a

-- | Pointer to an object of type <a>AuiToolBar</a>, derived from
--   <a>Control</a>.
type AuiToolBar a = Control (CAuiToolBar a)

-- | Inheritance type of the AuiToolBar class.
type TAuiToolBar a = TControl (CAuiToolBar a)

-- | Abstract type of the AuiToolBar class.
data CAuiToolBar a
CAuiToolBar :: CAuiToolBar a

-- | Pointer to an object of type <a>AuiToolBarArt</a>.
type AuiToolBarArt a = Object (CAuiToolBarArt a)

-- | Inheritance type of the AuiToolBarArt class.
type TAuiToolBarArt a = CAuiToolBarArt a

-- | Abstract type of the AuiToolBarArt class.
data CAuiToolBarArt a
CAuiToolBarArt :: CAuiToolBarArt a

-- | Pointer to an object of type <a>AuiToolBarEvent</a>, derived from
--   <a>NotifyEvent</a>.
type AuiToolBarEvent a = NotifyEvent (CAuiToolBarEvent a)

-- | Inheritance type of the AuiToolBarEvent class.
type TAuiToolBarEvent a = TNotifyEvent (CAuiToolBarEvent a)

-- | Abstract type of the AuiToolBarEvent class.
data CAuiToolBarEvent a
CAuiToolBarEvent :: CAuiToolBarEvent a

-- | Pointer to an object of type <a>AuiToolBarItem</a>.
type AuiToolBarItem a = Object (CAuiToolBarItem a)

-- | Inheritance type of the AuiToolBarItem class.
type TAuiToolBarItem a = CAuiToolBarItem a

-- | Abstract type of the AuiToolBarItem class.
data CAuiToolBarItem a
CAuiToolBarItem :: CAuiToolBarItem a

-- | Pointer to an object of type <a>AuiToolBarItemArray</a>.
type AuiToolBarItemArray a = Object (CAuiToolBarItemArray a)

-- | Inheritance type of the AuiToolBarItemArray class.
type TAuiToolBarItemArray a = CAuiToolBarItemArray a

-- | Abstract type of the AuiToolBarItemArray class.
data CAuiToolBarItemArray a
CAuiToolBarItemArray :: CAuiToolBarItemArray a

-- | Pointer to an object of type <a>AutoBufferedPaintDC</a>, derived from
--   <a>DC</a>.
type AutoBufferedPaintDC a = DC (CAutoBufferedPaintDC a)

-- | Inheritance type of the AutoBufferedPaintDC class.
type TAutoBufferedPaintDC a = TDC (CAutoBufferedPaintDC a)

-- | Abstract type of the AutoBufferedPaintDC class.
data CAutoBufferedPaintDC a
CAutoBufferedPaintDC :: CAutoBufferedPaintDC a

-- | Pointer to an object of type <a>AutomationObject</a>, derived from
--   <a>WxObject</a>.
type AutomationObject a = WxObject (CAutomationObject a)

-- | Inheritance type of the AutomationObject class.
type TAutomationObject a = TWxObject (CAutomationObject a)

-- | Abstract type of the AutomationObject class.
data CAutomationObject a
CAutomationObject :: CAutomationObject a

-- | Pointer to an object of type <a>Bitmap</a>, derived from
--   <a>GDIObject</a>.
type Bitmap a = GDIObject (CBitmap a)

-- | Inheritance type of the Bitmap class.
type TBitmap a = TGDIObject (CBitmap a)

-- | Abstract type of the Bitmap class.
data CBitmap a
CBitmap :: CBitmap a

-- | Pointer to an object of type <a>BitmapButton</a>, derived from
--   <a>Button</a>.
type BitmapButton a = Button (CBitmapButton a)

-- | Inheritance type of the BitmapButton class.
type TBitmapButton a = TButton (CBitmapButton a)

-- | Abstract type of the BitmapButton class.
data CBitmapButton a
CBitmapButton :: CBitmapButton a

-- | Pointer to an object of type <a>BitmapDataObject</a>, derived from
--   <a>DataObjectSimple</a>.
type BitmapDataObject a = DataObjectSimple (CBitmapDataObject a)

-- | Inheritance type of the BitmapDataObject class.
type TBitmapDataObject a = TDataObjectSimple (CBitmapDataObject a)

-- | Abstract type of the BitmapDataObject class.
data CBitmapDataObject a
CBitmapDataObject :: CBitmapDataObject a

-- | Pointer to an object of type <a>BitmapHandler</a>, derived from
--   <a>WxObject</a>.
type BitmapHandler a = WxObject (CBitmapHandler a)

-- | Inheritance type of the BitmapHandler class.
type TBitmapHandler a = TWxObject (CBitmapHandler a)

-- | Abstract type of the BitmapHandler class.
data CBitmapHandler a
CBitmapHandler :: CBitmapHandler a

-- | Pointer to an object of type <a>BitmapToggleButton</a>, derived from
--   <a>ToggleButton</a>.
type BitmapToggleButton a = ToggleButton (CBitmapToggleButton a)

-- | Inheritance type of the BitmapToggleButton class.
type TBitmapToggleButton a = TToggleButton (CBitmapToggleButton a)

-- | Abstract type of the BitmapToggleButton class.
data CBitmapToggleButton a
CBitmapToggleButton :: CBitmapToggleButton a

-- | Pointer to an object of type <a>BookCtrlBase</a>, derived from
--   <a>Control</a>.
type BookCtrlBase a = Control (CBookCtrlBase a)

-- | Inheritance type of the BookCtrlBase class.
type TBookCtrlBase a = TControl (CBookCtrlBase a)

-- | Abstract type of the BookCtrlBase class.
data CBookCtrlBase a
CBookCtrlBase :: CBookCtrlBase a

-- | Pointer to an object of type <a>BookCtrlEvent</a>, derived from
--   <a>NotifyEvent</a>.
type BookCtrlEvent a = NotifyEvent (CBookCtrlEvent a)

-- | Inheritance type of the BookCtrlEvent class.
type TBookCtrlEvent a = TNotifyEvent (CBookCtrlEvent a)

-- | Abstract type of the BookCtrlEvent class.
data CBookCtrlEvent a
CBookCtrlEvent :: CBookCtrlEvent a

-- | Pointer to an object of type <a>BoolProperty</a>, derived from
--   <a>PGProperty</a>.
type BoolProperty a = PGProperty (CBoolProperty a)

-- | Inheritance type of the BoolProperty class.
type TBoolProperty a = TPGProperty (CBoolProperty a)

-- | Abstract type of the BoolProperty class.
data CBoolProperty a
CBoolProperty :: CBoolProperty a

-- | Pointer to an object of type <a>BoxSizer</a>, derived from
--   <a>Sizer</a>.
type BoxSizer a = Sizer (CBoxSizer a)

-- | Inheritance type of the BoxSizer class.
type TBoxSizer a = TSizer (CBoxSizer a)

-- | Abstract type of the BoxSizer class.
data CBoxSizer a
CBoxSizer :: CBoxSizer a

-- | Pointer to an object of type <a>Brush</a>, derived from
--   <a>GDIObject</a>.
type Brush a = GDIObject (CBrush a)

-- | Inheritance type of the Brush class.
type TBrush a = TGDIObject (CBrush a)

-- | Abstract type of the Brush class.
data CBrush a
CBrush :: CBrush a

-- | Pointer to an object of type <a>BrushList</a>, derived from
--   <a>List</a>.
type BrushList a = List (CBrushList a)

-- | Inheritance type of the BrushList class.
type TBrushList a = TList (CBrushList a)

-- | Abstract type of the BrushList class.
data CBrushList a
CBrushList :: CBrushList a

-- | Pointer to an object of type <a>BufferedDC</a>, derived from
--   <a>DC</a>.
type BufferedDC a = DC (CBufferedDC a)

-- | Inheritance type of the BufferedDC class.
type TBufferedDC a = TDC (CBufferedDC a)

-- | Abstract type of the BufferedDC class.
data CBufferedDC a
CBufferedDC :: CBufferedDC a

-- | Pointer to an object of type <a>BufferedInputStream</a>, derived from
--   <a>FilterInputStream</a>.
type BufferedInputStream a = FilterInputStream (CBufferedInputStream a)

-- | Inheritance type of the BufferedInputStream class.
type TBufferedInputStream a = TFilterInputStream (CBufferedInputStream a)

-- | Abstract type of the BufferedInputStream class.
data CBufferedInputStream a
CBufferedInputStream :: CBufferedInputStream a

-- | Pointer to an object of type <a>BufferedOutputStream</a>, derived from
--   <a>FilterOutputStream</a>.
type BufferedOutputStream a = FilterOutputStream (CBufferedOutputStream a)

-- | Inheritance type of the BufferedOutputStream class.
type TBufferedOutputStream a = TFilterOutputStream (CBufferedOutputStream a)

-- | Abstract type of the BufferedOutputStream class.
data CBufferedOutputStream a
CBufferedOutputStream :: CBufferedOutputStream a

-- | Pointer to an object of type <a>BufferedPaintDC</a>, derived from
--   <a>DC</a>.
type BufferedPaintDC a = DC (CBufferedPaintDC a)

-- | Inheritance type of the BufferedPaintDC class.
type TBufferedPaintDC a = TDC (CBufferedPaintDC a)

-- | Abstract type of the BufferedPaintDC class.
data CBufferedPaintDC a
CBufferedPaintDC :: CBufferedPaintDC a

-- | Pointer to an object of type <a>BusyCursor</a>.
type BusyCursor a = Object (CBusyCursor a)

-- | Inheritance type of the BusyCursor class.
type TBusyCursor a = CBusyCursor a

-- | Abstract type of the BusyCursor class.
data CBusyCursor a
CBusyCursor :: CBusyCursor a

-- | Pointer to an object of type <a>BusyInfo</a>.
type BusyInfo a = Object (CBusyInfo a)

-- | Inheritance type of the BusyInfo class.
type TBusyInfo a = CBusyInfo a

-- | Abstract type of the BusyInfo class.
data CBusyInfo a
CBusyInfo :: CBusyInfo a

-- | Pointer to an object of type <a>Button</a>, derived from
--   <a>Control</a>.
type Button a = Control (CButton a)

-- | Inheritance type of the Button class.
type TButton a = TControl (CButton a)

-- | Abstract type of the Button class.
data CButton a
CButton :: CButton a

-- | Pointer to an object of type <a>CSConv</a>, derived from
--   <a>MBConv</a>.
type CSConv a = MBConv (CCSConv a)

-- | Inheritance type of the CSConv class.
type TCSConv a = TMBConv (CCSConv a)

-- | Abstract type of the CSConv class.
data CCSConv a
CCSConv :: CCSConv a

-- | Pointer to an object of type <a>CalculateLayoutEvent</a>, derived from
--   <a>Event</a>.
type CalculateLayoutEvent a = Event (CCalculateLayoutEvent a)

-- | Inheritance type of the CalculateLayoutEvent class.
type TCalculateLayoutEvent a = TEvent (CCalculateLayoutEvent a)

-- | Abstract type of the CalculateLayoutEvent class.
data CCalculateLayoutEvent a
CCalculateLayoutEvent :: CCalculateLayoutEvent a

-- | Pointer to an object of type <a>CalendarCtrl</a>, derived from
--   <a>Control</a>.
type CalendarCtrl a = Control (CCalendarCtrl a)

-- | Inheritance type of the CalendarCtrl class.
type TCalendarCtrl a = TControl (CCalendarCtrl a)

-- | Abstract type of the CalendarCtrl class.
data CCalendarCtrl a
CCalendarCtrl :: CCalendarCtrl a

-- | Pointer to an object of type <a>CalendarDateAttr</a>.
type CalendarDateAttr a = Object (CCalendarDateAttr a)

-- | Inheritance type of the CalendarDateAttr class.
type TCalendarDateAttr a = CCalendarDateAttr a

-- | Abstract type of the CalendarDateAttr class.
data CCalendarDateAttr a
CCalendarDateAttr :: CCalendarDateAttr a

-- | Pointer to an object of type <a>CalendarEvent</a>, derived from
--   <a>CommandEvent</a>.
type CalendarEvent a = CommandEvent (CCalendarEvent a)

-- | Inheritance type of the CalendarEvent class.
type TCalendarEvent a = TCommandEvent (CCalendarEvent a)

-- | Abstract type of the CalendarEvent class.
data CCalendarEvent a
CCalendarEvent :: CCalendarEvent a

-- | Pointer to an object of type <a>Caret</a>.
type Caret a = Object (CCaret a)

-- | Inheritance type of the Caret class.
type TCaret a = CCaret a

-- | Abstract type of the Caret class.
data CCaret a
CCaret :: CCaret a

-- | Pointer to an object of type <a>CbAntiflickerPlugin</a>, derived from
--   <a>CbPluginBase</a>.
type CbAntiflickerPlugin a = CbPluginBase (CCbAntiflickerPlugin a)

-- | Inheritance type of the CbAntiflickerPlugin class.
type TCbAntiflickerPlugin a = TCbPluginBase (CCbAntiflickerPlugin a)

-- | Abstract type of the CbAntiflickerPlugin class.
data CCbAntiflickerPlugin a
CCbAntiflickerPlugin :: CCbAntiflickerPlugin a

-- | Pointer to an object of type <a>CbBarDragPlugin</a>, derived from
--   <a>CbPluginBase</a>.
type CbBarDragPlugin a = CbPluginBase (CCbBarDragPlugin a)

-- | Inheritance type of the CbBarDragPlugin class.
type TCbBarDragPlugin a = TCbPluginBase (CCbBarDragPlugin a)

-- | Abstract type of the CbBarDragPlugin class.
data CCbBarDragPlugin a
CCbBarDragPlugin :: CCbBarDragPlugin a

-- | Pointer to an object of type <a>CbBarHintsPlugin</a>, derived from
--   <a>CbPluginBase</a>.
type CbBarHintsPlugin a = CbPluginBase (CCbBarHintsPlugin a)

-- | Inheritance type of the CbBarHintsPlugin class.
type TCbBarHintsPlugin a = TCbPluginBase (CCbBarHintsPlugin a)

-- | Abstract type of the CbBarHintsPlugin class.
data CCbBarHintsPlugin a
CCbBarHintsPlugin :: CCbBarHintsPlugin a

-- | Pointer to an object of type <a>CbBarInfo</a>, derived from
--   <a>WxObject</a>.
type CbBarInfo a = WxObject (CCbBarInfo a)

-- | Inheritance type of the CbBarInfo class.
type TCbBarInfo a = TWxObject (CCbBarInfo a)

-- | Abstract type of the CbBarInfo class.
data CCbBarInfo a
CCbBarInfo :: CCbBarInfo a

-- | Pointer to an object of type <a>CbBarSpy</a>, derived from
--   <a>EvtHandler</a>.
type CbBarSpy a = EvtHandler (CCbBarSpy a)

-- | Inheritance type of the CbBarSpy class.
type TCbBarSpy a = TEvtHandler (CCbBarSpy a)

-- | Abstract type of the CbBarSpy class.
data CCbBarSpy a
CCbBarSpy :: CCbBarSpy a

-- | Pointer to an object of type <a>CbCloseBox</a>, derived from
--   <a>CbMiniButton</a>.
type CbCloseBox a = CbMiniButton (CCbCloseBox a)

-- | Inheritance type of the CbCloseBox class.
type TCbCloseBox a = TCbMiniButton (CCbCloseBox a)

-- | Abstract type of the CbCloseBox class.
data CCbCloseBox a
CCbCloseBox :: CCbCloseBox a

-- | Pointer to an object of type <a>CbCollapseBox</a>, derived from
--   <a>CbMiniButton</a>.
type CbCollapseBox a = CbMiniButton (CCbCollapseBox a)

-- | Inheritance type of the CbCollapseBox class.
type TCbCollapseBox a = TCbMiniButton (CCbCollapseBox a)

-- | Abstract type of the CbCollapseBox class.
data CCbCollapseBox a
CCbCollapseBox :: CCbCollapseBox a

-- | Pointer to an object of type <a>CbCommonPaneProperties</a>, derived
--   from <a>WxObject</a>.
type CbCommonPaneProperties a = WxObject (CCbCommonPaneProperties a)

-- | Inheritance type of the CbCommonPaneProperties class.
type TCbCommonPaneProperties a = TWxObject (CCbCommonPaneProperties a)

-- | Abstract type of the CbCommonPaneProperties class.
data CCbCommonPaneProperties a
CCbCommonPaneProperties :: CCbCommonPaneProperties a

-- | Pointer to an object of type <a>CbCustomizeBarEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbCustomizeBarEvent a = CbPluginEvent (CCbCustomizeBarEvent a)

-- | Inheritance type of the CbCustomizeBarEvent class.
type TCbCustomizeBarEvent a = TCbPluginEvent (CCbCustomizeBarEvent a)

-- | Abstract type of the CbCustomizeBarEvent class.
data CCbCustomizeBarEvent a
CCbCustomizeBarEvent :: CCbCustomizeBarEvent a

-- | Pointer to an object of type <a>CbCustomizeLayoutEvent</a>, derived
--   from <a>CbPluginEvent</a>.
type CbCustomizeLayoutEvent a = CbPluginEvent (CCbCustomizeLayoutEvent a)

-- | Inheritance type of the CbCustomizeLayoutEvent class.
type TCbCustomizeLayoutEvent a = TCbPluginEvent (CCbCustomizeLayoutEvent a)

-- | Abstract type of the CbCustomizeLayoutEvent class.
data CCbCustomizeLayoutEvent a
CCbCustomizeLayoutEvent :: CCbCustomizeLayoutEvent a

-- | Pointer to an object of type <a>CbDimHandlerBase</a>, derived from
--   <a>WxObject</a>.
type CbDimHandlerBase a = WxObject (CCbDimHandlerBase a)

-- | Inheritance type of the CbDimHandlerBase class.
type TCbDimHandlerBase a = TWxObject (CCbDimHandlerBase a)

-- | Abstract type of the CbDimHandlerBase class.
data CCbDimHandlerBase a
CCbDimHandlerBase :: CCbDimHandlerBase a

-- | Pointer to an object of type <a>CbDimInfo</a>, derived from
--   <a>WxObject</a>.
type CbDimInfo a = WxObject (CCbDimInfo a)

-- | Inheritance type of the CbDimInfo class.
type TCbDimInfo a = TWxObject (CCbDimInfo a)

-- | Abstract type of the CbDimInfo class.
data CCbDimInfo a
CCbDimInfo :: CCbDimInfo a

-- | Pointer to an object of type <a>CbDockBox</a>, derived from
--   <a>CbMiniButton</a>.
type CbDockBox a = CbMiniButton (CCbDockBox a)

-- | Inheritance type of the CbDockBox class.
type TCbDockBox a = TCbMiniButton (CCbDockBox a)

-- | Abstract type of the CbDockBox class.
data CCbDockBox a
CCbDockBox :: CCbDockBox a

-- | Pointer to an object of type <a>CbDockPane</a>, derived from
--   <a>WxObject</a>.
type CbDockPane a = WxObject (CCbDockPane a)

-- | Inheritance type of the CbDockPane class.
type TCbDockPane a = TWxObject (CCbDockPane a)

-- | Abstract type of the CbDockPane class.
data CCbDockPane a
CCbDockPane :: CCbDockPane a

-- | Pointer to an object of type <a>CbDrawBarDecorEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbDrawBarDecorEvent a = CbPluginEvent (CCbDrawBarDecorEvent a)

-- | Inheritance type of the CbDrawBarDecorEvent class.
type TCbDrawBarDecorEvent a = TCbPluginEvent (CCbDrawBarDecorEvent a)

-- | Abstract type of the CbDrawBarDecorEvent class.
data CCbDrawBarDecorEvent a
CCbDrawBarDecorEvent :: CCbDrawBarDecorEvent a

-- | Pointer to an object of type <a>CbDrawBarHandlesEvent</a>, derived
--   from <a>CbPluginEvent</a>.
type CbDrawBarHandlesEvent a = CbPluginEvent (CCbDrawBarHandlesEvent a)

-- | Inheritance type of the CbDrawBarHandlesEvent class.
type TCbDrawBarHandlesEvent a = TCbPluginEvent (CCbDrawBarHandlesEvent a)

-- | Abstract type of the CbDrawBarHandlesEvent class.
data CCbDrawBarHandlesEvent a
CCbDrawBarHandlesEvent :: CCbDrawBarHandlesEvent a

-- | Pointer to an object of type <a>CbDrawHintRectEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbDrawHintRectEvent a = CbPluginEvent (CCbDrawHintRectEvent a)

-- | Inheritance type of the CbDrawHintRectEvent class.
type TCbDrawHintRectEvent a = TCbPluginEvent (CCbDrawHintRectEvent a)

-- | Abstract type of the CbDrawHintRectEvent class.
data CCbDrawHintRectEvent a
CCbDrawHintRectEvent :: CCbDrawHintRectEvent a

-- | Pointer to an object of type <a>CbDrawPaneBkGroundEvent</a>, derived
--   from <a>CbPluginEvent</a>.
type CbDrawPaneBkGroundEvent a = CbPluginEvent (CCbDrawPaneBkGroundEvent a)

-- | Inheritance type of the CbDrawPaneBkGroundEvent class.
type TCbDrawPaneBkGroundEvent a = TCbPluginEvent (CCbDrawPaneBkGroundEvent a)

-- | Abstract type of the CbDrawPaneBkGroundEvent class.
data CCbDrawPaneBkGroundEvent a
CCbDrawPaneBkGroundEvent :: CCbDrawPaneBkGroundEvent a

-- | Pointer to an object of type <a>CbDrawPaneDecorEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbDrawPaneDecorEvent a = CbPluginEvent (CCbDrawPaneDecorEvent a)

-- | Inheritance type of the CbDrawPaneDecorEvent class.
type TCbDrawPaneDecorEvent a = TCbPluginEvent (CCbDrawPaneDecorEvent a)

-- | Abstract type of the CbDrawPaneDecorEvent class.
data CCbDrawPaneDecorEvent a
CCbDrawPaneDecorEvent :: CCbDrawPaneDecorEvent a

-- | Pointer to an object of type <a>CbDrawRowBkGroundEvent</a>, derived
--   from <a>CbPluginEvent</a>.
type CbDrawRowBkGroundEvent a = CbPluginEvent (CCbDrawRowBkGroundEvent a)

-- | Inheritance type of the CbDrawRowBkGroundEvent class.
type TCbDrawRowBkGroundEvent a = TCbPluginEvent (CCbDrawRowBkGroundEvent a)

-- | Abstract type of the CbDrawRowBkGroundEvent class.
data CCbDrawRowBkGroundEvent a
CCbDrawRowBkGroundEvent :: CCbDrawRowBkGroundEvent a

-- | Pointer to an object of type <a>CbDrawRowDecorEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbDrawRowDecorEvent a = CbPluginEvent (CCbDrawRowDecorEvent a)

-- | Inheritance type of the CbDrawRowDecorEvent class.
type TCbDrawRowDecorEvent a = TCbPluginEvent (CCbDrawRowDecorEvent a)

-- | Abstract type of the CbDrawRowDecorEvent class.
data CCbDrawRowDecorEvent a
CCbDrawRowDecorEvent :: CCbDrawRowDecorEvent a

-- | Pointer to an object of type <a>CbDrawRowHandlesEvent</a>, derived
--   from <a>CbPluginEvent</a>.
type CbDrawRowHandlesEvent a = CbPluginEvent (CCbDrawRowHandlesEvent a)

-- | Inheritance type of the CbDrawRowHandlesEvent class.
type TCbDrawRowHandlesEvent a = TCbPluginEvent (CCbDrawRowHandlesEvent a)

-- | Abstract type of the CbDrawRowHandlesEvent class.
data CCbDrawRowHandlesEvent a
CCbDrawRowHandlesEvent :: CCbDrawRowHandlesEvent a

-- | Pointer to an object of type <a>CbDynToolBarDimHandler</a>, derived
--   from <a>CbDimHandlerBase</a>.
type CbDynToolBarDimHandler a = CbDimHandlerBase (CCbDynToolBarDimHandler a)

-- | Inheritance type of the CbDynToolBarDimHandler class.
type TCbDynToolBarDimHandler a = TCbDimHandlerBase (CCbDynToolBarDimHandler a)

-- | Abstract type of the CbDynToolBarDimHandler class.
data CCbDynToolBarDimHandler a
CCbDynToolBarDimHandler :: CCbDynToolBarDimHandler a

-- | Pointer to an object of type <a>CbFinishDrawInAreaEvent</a>, derived
--   from <a>CbPluginEvent</a>.
type CbFinishDrawInAreaEvent a = CbPluginEvent (CCbFinishDrawInAreaEvent a)

-- | Inheritance type of the CbFinishDrawInAreaEvent class.
type TCbFinishDrawInAreaEvent a = TCbPluginEvent (CCbFinishDrawInAreaEvent a)

-- | Abstract type of the CbFinishDrawInAreaEvent class.
data CCbFinishDrawInAreaEvent a
CCbFinishDrawInAreaEvent :: CCbFinishDrawInAreaEvent a

-- | Pointer to an object of type <a>CbFloatedBarWindow</a>, derived from
--   <a>ToolWindow</a>.
type CbFloatedBarWindow a = ToolWindow (CCbFloatedBarWindow a)

-- | Inheritance type of the CbFloatedBarWindow class.
type TCbFloatedBarWindow a = TToolWindow (CCbFloatedBarWindow a)

-- | Abstract type of the CbFloatedBarWindow class.
data CCbFloatedBarWindow a
CCbFloatedBarWindow :: CCbFloatedBarWindow a

-- | Pointer to an object of type <a>CbGCUpdatesMgr</a>, derived from
--   <a>CbSimpleUpdatesMgr</a>.
type CbGCUpdatesMgr a = CbSimpleUpdatesMgr (CCbGCUpdatesMgr a)

-- | Inheritance type of the CbGCUpdatesMgr class.
type TCbGCUpdatesMgr a = TCbSimpleUpdatesMgr (CCbGCUpdatesMgr a)

-- | Abstract type of the CbGCUpdatesMgr class.
data CCbGCUpdatesMgr a
CCbGCUpdatesMgr :: CCbGCUpdatesMgr a

-- | Pointer to an object of type <a>CbHintAnimationPlugin</a>, derived
--   from <a>CbPluginBase</a>.
type CbHintAnimationPlugin a = CbPluginBase (CCbHintAnimationPlugin a)

-- | Inheritance type of the CbHintAnimationPlugin class.
type TCbHintAnimationPlugin a = TCbPluginBase (CCbHintAnimationPlugin a)

-- | Abstract type of the CbHintAnimationPlugin class.
data CCbHintAnimationPlugin a
CCbHintAnimationPlugin :: CCbHintAnimationPlugin a

-- | Pointer to an object of type <a>CbInsertBarEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbInsertBarEvent a = CbPluginEvent (CCbInsertBarEvent a)

-- | Inheritance type of the CbInsertBarEvent class.
type TCbInsertBarEvent a = TCbPluginEvent (CCbInsertBarEvent a)

-- | Abstract type of the CbInsertBarEvent class.
data CCbInsertBarEvent a
CCbInsertBarEvent :: CCbInsertBarEvent a

-- | Pointer to an object of type <a>CbLayoutRowEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbLayoutRowEvent a = CbPluginEvent (CCbLayoutRowEvent a)

-- | Inheritance type of the CbLayoutRowEvent class.
type TCbLayoutRowEvent a = TCbPluginEvent (CCbLayoutRowEvent a)

-- | Abstract type of the CbLayoutRowEvent class.
data CCbLayoutRowEvent a
CCbLayoutRowEvent :: CCbLayoutRowEvent a

-- | Pointer to an object of type <a>CbLeftDClickEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbLeftDClickEvent a = CbPluginEvent (CCbLeftDClickEvent a)

-- | Inheritance type of the CbLeftDClickEvent class.
type TCbLeftDClickEvent a = TCbPluginEvent (CCbLeftDClickEvent a)

-- | Abstract type of the CbLeftDClickEvent class.
data CCbLeftDClickEvent a
CCbLeftDClickEvent :: CCbLeftDClickEvent a

-- | Pointer to an object of type <a>CbLeftDownEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbLeftDownEvent a = CbPluginEvent (CCbLeftDownEvent a)

-- | Inheritance type of the CbLeftDownEvent class.
type TCbLeftDownEvent a = TCbPluginEvent (CCbLeftDownEvent a)

-- | Abstract type of the CbLeftDownEvent class.
data CCbLeftDownEvent a
CCbLeftDownEvent :: CCbLeftDownEvent a

-- | Pointer to an object of type <a>CbLeftUpEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbLeftUpEvent a = CbPluginEvent (CCbLeftUpEvent a)

-- | Inheritance type of the CbLeftUpEvent class.
type TCbLeftUpEvent a = TCbPluginEvent (CCbLeftUpEvent a)

-- | Abstract type of the CbLeftUpEvent class.
data CCbLeftUpEvent a
CCbLeftUpEvent :: CCbLeftUpEvent a

-- | Pointer to an object of type <a>CbMiniButton</a>, derived from
--   <a>WxObject</a>.
type CbMiniButton a = WxObject (CCbMiniButton a)

-- | Inheritance type of the CbMiniButton class.
type TCbMiniButton a = TWxObject (CCbMiniButton a)

-- | Abstract type of the CbMiniButton class.
data CCbMiniButton a
CCbMiniButton :: CCbMiniButton a

-- | Pointer to an object of type <a>CbMotionEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbMotionEvent a = CbPluginEvent (CCbMotionEvent a)

-- | Inheritance type of the CbMotionEvent class.
type TCbMotionEvent a = TCbPluginEvent (CCbMotionEvent a)

-- | Abstract type of the CbMotionEvent class.
data CCbMotionEvent a
CCbMotionEvent :: CCbMotionEvent a

-- | Pointer to an object of type <a>CbPaneDrawPlugin</a>, derived from
--   <a>CbPluginBase</a>.
type CbPaneDrawPlugin a = CbPluginBase (CCbPaneDrawPlugin a)

-- | Inheritance type of the CbPaneDrawPlugin class.
type TCbPaneDrawPlugin a = TCbPluginBase (CCbPaneDrawPlugin a)

-- | Abstract type of the CbPaneDrawPlugin class.
data CCbPaneDrawPlugin a
CCbPaneDrawPlugin :: CCbPaneDrawPlugin a

-- | Pointer to an object of type <a>CbPluginBase</a>, derived from
--   <a>EvtHandler</a>.
type CbPluginBase a = EvtHandler (CCbPluginBase a)

-- | Inheritance type of the CbPluginBase class.
type TCbPluginBase a = TEvtHandler (CCbPluginBase a)

-- | Abstract type of the CbPluginBase class.
data CCbPluginBase a
CCbPluginBase :: CCbPluginBase a

-- | Pointer to an object of type <a>CbPluginEvent</a>, derived from
--   <a>Event</a>.
type CbPluginEvent a = Event (CCbPluginEvent a)

-- | Inheritance type of the CbPluginEvent class.
type TCbPluginEvent a = TEvent (CCbPluginEvent a)

-- | Abstract type of the CbPluginEvent class.
data CCbPluginEvent a
CCbPluginEvent :: CCbPluginEvent a

-- | Pointer to an object of type <a>CbRemoveBarEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbRemoveBarEvent a = CbPluginEvent (CCbRemoveBarEvent a)

-- | Inheritance type of the CbRemoveBarEvent class.
type TCbRemoveBarEvent a = TCbPluginEvent (CCbRemoveBarEvent a)

-- | Abstract type of the CbRemoveBarEvent class.
data CCbRemoveBarEvent a
CCbRemoveBarEvent :: CCbRemoveBarEvent a

-- | Pointer to an object of type <a>CbResizeBarEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbResizeBarEvent a = CbPluginEvent (CCbResizeBarEvent a)

-- | Inheritance type of the CbResizeBarEvent class.
type TCbResizeBarEvent a = TCbPluginEvent (CCbResizeBarEvent a)

-- | Abstract type of the CbResizeBarEvent class.
data CCbResizeBarEvent a
CCbResizeBarEvent :: CCbResizeBarEvent a

-- | Pointer to an object of type <a>CbResizeRowEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbResizeRowEvent a = CbPluginEvent (CCbResizeRowEvent a)

-- | Inheritance type of the CbResizeRowEvent class.
type TCbResizeRowEvent a = TCbPluginEvent (CCbResizeRowEvent a)

-- | Abstract type of the CbResizeRowEvent class.
data CCbResizeRowEvent a
CCbResizeRowEvent :: CCbResizeRowEvent a

-- | Pointer to an object of type <a>CbRightDownEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbRightDownEvent a = CbPluginEvent (CCbRightDownEvent a)

-- | Inheritance type of the CbRightDownEvent class.
type TCbRightDownEvent a = TCbPluginEvent (CCbRightDownEvent a)

-- | Abstract type of the CbRightDownEvent class.
data CCbRightDownEvent a
CCbRightDownEvent :: CCbRightDownEvent a

-- | Pointer to an object of type <a>CbRightUpEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbRightUpEvent a = CbPluginEvent (CCbRightUpEvent a)

-- | Inheritance type of the CbRightUpEvent class.
type TCbRightUpEvent a = TCbPluginEvent (CCbRightUpEvent a)

-- | Abstract type of the CbRightUpEvent class.
data CCbRightUpEvent a
CCbRightUpEvent :: CCbRightUpEvent a

-- | Pointer to an object of type <a>CbRowDragPlugin</a>, derived from
--   <a>CbPluginBase</a>.
type CbRowDragPlugin a = CbPluginBase (CCbRowDragPlugin a)

-- | Inheritance type of the CbRowDragPlugin class.
type TCbRowDragPlugin a = TCbPluginBase (CCbRowDragPlugin a)

-- | Abstract type of the CbRowDragPlugin class.
data CCbRowDragPlugin a
CCbRowDragPlugin :: CCbRowDragPlugin a

-- | Pointer to an object of type <a>CbRowInfo</a>, derived from
--   <a>WxObject</a>.
type CbRowInfo a = WxObject (CCbRowInfo a)

-- | Inheritance type of the CbRowInfo class.
type TCbRowInfo a = TWxObject (CCbRowInfo a)

-- | Abstract type of the CbRowInfo class.
data CCbRowInfo a
CCbRowInfo :: CCbRowInfo a

-- | Pointer to an object of type <a>CbRowLayoutPlugin</a>, derived from
--   <a>CbPluginBase</a>.
type CbRowLayoutPlugin a = CbPluginBase (CCbRowLayoutPlugin a)

-- | Inheritance type of the CbRowLayoutPlugin class.
type TCbRowLayoutPlugin a = TCbPluginBase (CCbRowLayoutPlugin a)

-- | Abstract type of the CbRowLayoutPlugin class.
data CCbRowLayoutPlugin a
CCbRowLayoutPlugin :: CCbRowLayoutPlugin a

-- | Pointer to an object of type <a>CbSimpleCustomizationPlugin</a>,
--   derived from <a>CbPluginBase</a>.
type CbSimpleCustomizationPlugin a = CbPluginBase (CCbSimpleCustomizationPlugin a)

-- | Inheritance type of the CbSimpleCustomizationPlugin class.
type TCbSimpleCustomizationPlugin a = TCbPluginBase (CCbSimpleCustomizationPlugin a)

-- | Abstract type of the CbSimpleCustomizationPlugin class.
data CCbSimpleCustomizationPlugin a
CCbSimpleCustomizationPlugin :: CCbSimpleCustomizationPlugin a

-- | Pointer to an object of type <a>CbSimpleUpdatesMgr</a>, derived from
--   <a>CbUpdatesManagerBase</a>.
type CbSimpleUpdatesMgr a = CbUpdatesManagerBase (CCbSimpleUpdatesMgr a)

-- | Inheritance type of the CbSimpleUpdatesMgr class.
type TCbSimpleUpdatesMgr a = TCbUpdatesManagerBase (CCbSimpleUpdatesMgr a)

-- | Abstract type of the CbSimpleUpdatesMgr class.
data CCbSimpleUpdatesMgr a
CCbSimpleUpdatesMgr :: CCbSimpleUpdatesMgr a

-- | Pointer to an object of type <a>CbSizeBarWndEvent</a>, derived from
--   <a>CbPluginEvent</a>.
type CbSizeBarWndEvent a = CbPluginEvent (CCbSizeBarWndEvent a)

-- | Inheritance type of the CbSizeBarWndEvent class.
type TCbSizeBarWndEvent a = TCbPluginEvent (CCbSizeBarWndEvent a)

-- | Abstract type of the CbSizeBarWndEvent class.
data CCbSizeBarWndEvent a
CCbSizeBarWndEvent :: CCbSizeBarWndEvent a

-- | Pointer to an object of type <a>CbStartBarDraggingEvent</a>, derived
--   from <a>CbPluginEvent</a>.
type CbStartBarDraggingEvent a = CbPluginEvent (CCbStartBarDraggingEvent a)

-- | Inheritance type of the CbStartBarDraggingEvent class.
type TCbStartBarDraggingEvent a = TCbPluginEvent (CCbStartBarDraggingEvent a)

-- | Abstract type of the CbStartBarDraggingEvent class.
data CCbStartBarDraggingEvent a
CCbStartBarDraggingEvent :: CCbStartBarDraggingEvent a

-- | Pointer to an object of type <a>CbStartDrawInAreaEvent</a>, derived
--   from <a>CbPluginEvent</a>.
type CbStartDrawInAreaEvent a = CbPluginEvent (CCbStartDrawInAreaEvent a)

-- | Inheritance type of the CbStartDrawInAreaEvent class.
type TCbStartDrawInAreaEvent a = TCbPluginEvent (CCbStartDrawInAreaEvent a)

-- | Abstract type of the CbStartDrawInAreaEvent class.
data CCbStartDrawInAreaEvent a
CCbStartDrawInAreaEvent :: CCbStartDrawInAreaEvent a

-- | Pointer to an object of type <a>CbUpdatesManagerBase</a>, derived from
--   <a>WxObject</a>.
type CbUpdatesManagerBase a = WxObject (CCbUpdatesManagerBase a)

-- | Inheritance type of the CbUpdatesManagerBase class.
type TCbUpdatesManagerBase a = TWxObject (CCbUpdatesManagerBase a)

-- | Abstract type of the CbUpdatesManagerBase class.
data CCbUpdatesManagerBase a
CCbUpdatesManagerBase :: CCbUpdatesManagerBase a

-- | Pointer to an object of type <a>CheckBox</a>, derived from
--   <a>Control</a>.
type CheckBox a = Control (CCheckBox a)

-- | Inheritance type of the CheckBox class.
type TCheckBox a = TControl (CCheckBox a)

-- | Abstract type of the CheckBox class.
data CCheckBox a
CCheckBox :: CCheckBox a

-- | Pointer to an object of type <a>CheckListBox</a>, derived from
--   <a>ListBox</a>.
type CheckListBox a = ListBox (CCheckListBox a)

-- | Inheritance type of the CheckListBox class.
type TCheckListBox a = TListBox (CCheckListBox a)

-- | Abstract type of the CheckListBox class.
data CCheckListBox a
CCheckListBox :: CCheckListBox a

-- | Pointer to an object of type <a>Choice</a>, derived from
--   <a>Control</a>.
type Choice a = Control (CChoice a)

-- | Inheritance type of the Choice class.
type TChoice a = TControl (CChoice a)

-- | Abstract type of the Choice class.
data CChoice a
CChoice :: CChoice a

-- | Pointer to an object of type <a>ClassInfo</a>.
type ClassInfo a = Object (CClassInfo a)

-- | Inheritance type of the ClassInfo class.
type TClassInfo a = CClassInfo a

-- | Abstract type of the ClassInfo class.
data CClassInfo a
CClassInfo :: CClassInfo a

-- | Pointer to an object of type <a>Client</a>, derived from
--   <a>ClientBase</a>.
type Client a = ClientBase (CClient a)

-- | Inheritance type of the Client class.
type TClient a = TClientBase (CClient a)

-- | Abstract type of the Client class.
data CClient a
CClient :: CClient a

-- | Pointer to an object of type <a>ClientBase</a>, derived from
--   <a>WxObject</a>.
type ClientBase a = WxObject (CClientBase a)

-- | Inheritance type of the ClientBase class.
type TClientBase a = TWxObject (CClientBase a)

-- | Abstract type of the ClientBase class.
data CClientBase a
CClientBase :: CClientBase a

-- | Pointer to an object of type <a>ClientDC</a>, derived from
--   <a>WindowDC</a>.
type ClientDC a = WindowDC (CClientDC a)

-- | Inheritance type of the ClientDC class.
type TClientDC a = TWindowDC (CClientDC a)

-- | Abstract type of the ClientDC class.
data CClientDC a
CClientDC :: CClientDC a

-- | Pointer to an object of type <a>ClientData</a>.
type ClientData a = Object (CClientData a)

-- | Inheritance type of the ClientData class.
type TClientData a = CClientData a

-- | Abstract type of the ClientData class.
data CClientData a
CClientData :: CClientData a

-- | Pointer to an object of type <a>ClientDataContainer</a>.
type ClientDataContainer a = Object (CClientDataContainer a)

-- | Inheritance type of the ClientDataContainer class.
type TClientDataContainer a = CClientDataContainer a

-- | Abstract type of the ClientDataContainer class.
data CClientDataContainer a
CClientDataContainer :: CClientDataContainer a

-- | Pointer to an object of type <a>Clipboard</a>, derived from
--   <a>WxObject</a>.
type Clipboard a = WxObject (CClipboard a)

-- | Inheritance type of the Clipboard class.
type TClipboard a = TWxObject (CClipboard a)

-- | Abstract type of the Clipboard class.
data CClipboard a
CClipboard :: CClipboard a

-- | Pointer to an object of type <a>CloseEvent</a>, derived from
--   <a>Event</a>.
type CloseEvent a = Event (CCloseEvent a)

-- | Inheritance type of the CloseEvent class.
type TCloseEvent a = TEvent (CCloseEvent a)

-- | Abstract type of the CloseEvent class.
data CCloseEvent a
CCloseEvent :: CCloseEvent a

-- | Pointer to an object of type <a>Closure</a>, derived from
--   <a>WxObject</a>.
type Closure a = WxObject (CClosure a)

-- | Inheritance type of the Closure class.
type TClosure a = TWxObject (CClosure a)

-- | Abstract type of the Closure class.
data CClosure a
CClosure :: CClosure a

-- | Pointer to an object of type <a>Colour</a>, derived from
--   <a>WxObject</a>.
type Colour a = WxObject (CColour a)

-- | Inheritance type of the Colour class.
type TColour a = TWxObject (CColour a)

-- | Abstract type of the Colour class.
data CColour a
CColour :: CColour a

-- | Pointer to an object of type <a>ColourData</a>, derived from
--   <a>WxObject</a>.
type ColourData a = WxObject (CColourData a)

-- | Inheritance type of the ColourData class.
type TColourData a = TWxObject (CColourData a)

-- | Abstract type of the ColourData class.
data CColourData a
CColourData :: CColourData a

-- | Pointer to an object of type <a>ColourDatabase</a>, derived from
--   <a>List</a>.
type ColourDatabase a = List (CColourDatabase a)

-- | Inheritance type of the ColourDatabase class.
type TColourDatabase a = TList (CColourDatabase a)

-- | Abstract type of the ColourDatabase class.
data CColourDatabase a
CColourDatabase :: CColourDatabase a

-- | Pointer to an object of type <a>ColourDialog</a>, derived from
--   <a>Dialog</a>.
type ColourDialog a = Dialog (CColourDialog a)

-- | Inheritance type of the ColourDialog class.
type TColourDialog a = TDialog (CColourDialog a)

-- | Abstract type of the ColourDialog class.
data CColourDialog a
CColourDialog :: CColourDialog a

-- | Pointer to an object of type <a>ColourPickerCtrl</a>, derived from
--   <a>PickerBase</a>.
type ColourPickerCtrl a = PickerBase (CColourPickerCtrl a)

-- | Inheritance type of the ColourPickerCtrl class.
type TColourPickerCtrl a = TPickerBase (CColourPickerCtrl a)

-- | Abstract type of the ColourPickerCtrl class.
data CColourPickerCtrl a
CColourPickerCtrl :: CColourPickerCtrl a

-- | Pointer to an object of type <a>ComboBox</a>, derived from
--   <a>Choice</a>.
type ComboBox a = Choice (CComboBox a)

-- | Inheritance type of the ComboBox class.
type TComboBox a = TChoice (CComboBox a)

-- | Abstract type of the ComboBox class.
data CComboBox a
CComboBox :: CComboBox a

-- | Pointer to an object of type <a>Command</a>, derived from
--   <a>WxObject</a>.
type Command a = WxObject (CCommand a)

-- | Inheritance type of the Command class.
type TCommand a = TWxObject (CCommand a)

-- | Abstract type of the Command class.
data CCommand a
CCommand :: CCommand a

-- | Pointer to an object of type <a>CommandEvent</a>, derived from
--   <a>Event</a>.
type CommandEvent a = Event (CCommandEvent a)

-- | Inheritance type of the CommandEvent class.
type TCommandEvent a = TEvent (CCommandEvent a)

-- | Abstract type of the CommandEvent class.
data CCommandEvent a
CCommandEvent :: CCommandEvent a

-- | Pointer to an object of type <a>CommandLineParser</a>.
type CommandLineParser a = Object (CCommandLineParser a)

-- | Inheritance type of the CommandLineParser class.
type TCommandLineParser a = CCommandLineParser a

-- | Abstract type of the CommandLineParser class.
data CCommandLineParser a
CCommandLineParser :: CCommandLineParser a

-- | Pointer to an object of type <a>CommandProcessor</a>, derived from
--   <a>WxObject</a>.
type CommandProcessor a = WxObject (CCommandProcessor a)

-- | Inheritance type of the CommandProcessor class.
type TCommandProcessor a = TWxObject (CCommandProcessor a)

-- | Abstract type of the CommandProcessor class.
data CCommandProcessor a
CCommandProcessor :: CCommandProcessor a

-- | Pointer to an object of type <a>Condition</a>.
type Condition a = Object (CCondition a)

-- | Inheritance type of the Condition class.
type TCondition a = CCondition a

-- | Abstract type of the Condition class.
data CCondition a
CCondition :: CCondition a

-- | Pointer to an object of type <a>ConfigBase</a>.
type ConfigBase a = Object (CConfigBase a)

-- | Inheritance type of the ConfigBase class.
type TConfigBase a = CConfigBase a

-- | Abstract type of the ConfigBase class.
data CConfigBase a
CConfigBase :: CConfigBase a

-- | Pointer to an object of type <a>Connection</a>, derived from
--   <a>ConnectionBase</a>.
type Connection a = ConnectionBase (CConnection a)

-- | Inheritance type of the Connection class.
type TConnection a = TConnectionBase (CConnection a)

-- | Abstract type of the Connection class.
data CConnection a
CConnection :: CConnection a

-- | Pointer to an object of type <a>ConnectionBase</a>, derived from
--   <a>WxObject</a>.
type ConnectionBase a = WxObject (CConnectionBase a)

-- | Inheritance type of the ConnectionBase class.
type TConnectionBase a = TWxObject (CConnectionBase a)

-- | Abstract type of the ConnectionBase class.
data CConnectionBase a
CConnectionBase :: CConnectionBase a

-- | Pointer to an object of type <a>ContextHelp</a>, derived from
--   <a>WxObject</a>.
type ContextHelp a = WxObject (CContextHelp a)

-- | Inheritance type of the ContextHelp class.
type TContextHelp a = TWxObject (CContextHelp a)

-- | Abstract type of the ContextHelp class.
data CContextHelp a
CContextHelp :: CContextHelp a

-- | Pointer to an object of type <a>ContextHelpButton</a>, derived from
--   <a>BitmapButton</a>.
type ContextHelpButton a = BitmapButton (CContextHelpButton a)

-- | Inheritance type of the ContextHelpButton class.
type TContextHelpButton a = TBitmapButton (CContextHelpButton a)

-- | Abstract type of the ContextHelpButton class.
data CContextHelpButton a
CContextHelpButton :: CContextHelpButton a

-- | Pointer to an object of type <a>Control</a>, derived from
--   <a>Window</a>.
type Control a = Window (CControl a)

-- | Inheritance type of the Control class.
type TControl a = TWindow (CControl a)

-- | Abstract type of the Control class.
data CControl a
CControl :: CControl a

-- | Pointer to an object of type <a>CountingOutputStream</a>, derived from
--   <a>OutputStream</a>.
type CountingOutputStream a = OutputStream (CCountingOutputStream a)

-- | Inheritance type of the CountingOutputStream class.
type TCountingOutputStream a = TOutputStream (CCountingOutputStream a)

-- | Abstract type of the CountingOutputStream class.
data CCountingOutputStream a
CCountingOutputStream :: CCountingOutputStream a

-- | Pointer to an object of type <a>CriticalSection</a>.
type CriticalSection a = Object (CCriticalSection a)

-- | Inheritance type of the CriticalSection class.
type TCriticalSection a = CCriticalSection a

-- | Abstract type of the CriticalSection class.
data CCriticalSection a
CCriticalSection :: CCriticalSection a

-- | Pointer to an object of type <a>CriticalSectionLocker</a>.
type CriticalSectionLocker a = Object (CCriticalSectionLocker a)

-- | Inheritance type of the CriticalSectionLocker class.
type TCriticalSectionLocker a = CCriticalSectionLocker a

-- | Abstract type of the CriticalSectionLocker class.
data CCriticalSectionLocker a
CCriticalSectionLocker :: CCriticalSectionLocker a

-- | Pointer to an object of type <a>Cursor</a>, derived from
--   <a>Bitmap</a>.
type Cursor a = Bitmap (CCursor a)

-- | Inheritance type of the Cursor class.
type TCursor a = TBitmap (CCursor a)

-- | Abstract type of the Cursor class.
data CCursor a
CCursor :: CCursor a

-- | Pointer to an object of type <a>CustomDataObject</a>, derived from
--   <a>DataObjectSimple</a>.
type CustomDataObject a = DataObjectSimple (CCustomDataObject a)

-- | Inheritance type of the CustomDataObject class.
type TCustomDataObject a = TDataObjectSimple (CCustomDataObject a)

-- | Abstract type of the CustomDataObject class.
data CCustomDataObject a
CCustomDataObject :: CCustomDataObject a

-- | Pointer to an object of type <a>DC</a>, derived from <a>WxObject</a>.
type DC a = WxObject (CDC a)

-- | Inheritance type of the DC class.
type TDC a = TWxObject (CDC a)

-- | Abstract type of the DC class.
data CDC a
CDC :: CDC a

-- | Pointer to an object of type <a>DCClipper</a>.
type DCClipper a = Object (CDCClipper a)

-- | Inheritance type of the DCClipper class.
type TDCClipper a = CDCClipper a

-- | Abstract type of the DCClipper class.
data CDCClipper a
CDCClipper :: CDCClipper a

-- | Pointer to an object of type <a>DDEClient</a>, derived from
--   <a>ClientBase</a>.
type DDEClient a = ClientBase (CDDEClient a)

-- | Inheritance type of the DDEClient class.
type TDDEClient a = TClientBase (CDDEClient a)

-- | Abstract type of the DDEClient class.
data CDDEClient a
CDDEClient :: CDDEClient a

-- | Pointer to an object of type <a>DDEConnection</a>, derived from
--   <a>ConnectionBase</a>.
type DDEConnection a = ConnectionBase (CDDEConnection a)

-- | Inheritance type of the DDEConnection class.
type TDDEConnection a = TConnectionBase (CDDEConnection a)

-- | Abstract type of the DDEConnection class.
data CDDEConnection a
CDDEConnection :: CDDEConnection a

-- | Pointer to an object of type <a>DDEServer</a>, derived from
--   <a>ServerBase</a>.
type DDEServer a = ServerBase (CDDEServer a)

-- | Inheritance type of the DDEServer class.
type TDDEServer a = TServerBase (CDDEServer a)

-- | Abstract type of the DDEServer class.
data CDDEServer a
CDDEServer :: CDDEServer a

-- | Pointer to an object of type <a>DataFormat</a>.
type DataFormat a = Object (CDataFormat a)

-- | Inheritance type of the DataFormat class.
type TDataFormat a = CDataFormat a

-- | Abstract type of the DataFormat class.
data CDataFormat a
CDataFormat :: CDataFormat a

-- | Pointer to an object of type <a>DataInputStream</a>.
type DataInputStream a = Object (CDataInputStream a)

-- | Inheritance type of the DataInputStream class.
type TDataInputStream a = CDataInputStream a

-- | Abstract type of the DataInputStream class.
data CDataInputStream a
CDataInputStream :: CDataInputStream a

-- | Pointer to an object of type <a>DataObject</a>.
type DataObject a = Object (CDataObject a)

-- | Inheritance type of the DataObject class.
type TDataObject a = CDataObject a

-- | Abstract type of the DataObject class.
data CDataObject a
CDataObject :: CDataObject a

-- | Pointer to an object of type <a>DataObjectComposite</a>, derived from
--   <a>DataObject</a>.
type DataObjectComposite a = DataObject (CDataObjectComposite a)

-- | Inheritance type of the DataObjectComposite class.
type TDataObjectComposite a = TDataObject (CDataObjectComposite a)

-- | Abstract type of the DataObjectComposite class.
data CDataObjectComposite a
CDataObjectComposite :: CDataObjectComposite a

-- | Pointer to an object of type <a>DataObjectSimple</a>, derived from
--   <a>DataObject</a>.
type DataObjectSimple a = DataObject (CDataObjectSimple a)

-- | Inheritance type of the DataObjectSimple class.
type TDataObjectSimple a = TDataObject (CDataObjectSimple a)

-- | Abstract type of the DataObjectSimple class.
data CDataObjectSimple a
CDataObjectSimple :: CDataObjectSimple a

-- | Pointer to an object of type <a>DataOutputStream</a>.
type DataOutputStream a = Object (CDataOutputStream a)

-- | Inheritance type of the DataOutputStream class.
type TDataOutputStream a = CDataOutputStream a

-- | Abstract type of the DataOutputStream class.
data CDataOutputStream a
CDataOutputStream :: CDataOutputStream a

-- | Pointer to an object of type <a>Database</a>, derived from
--   <a>WxObject</a>.
type Database a = WxObject (CDatabase a)

-- | Inheritance type of the Database class.
type TDatabase a = TWxObject (CDatabase a)

-- | Abstract type of the Database class.
data CDatabase a
CDatabase :: CDatabase a

-- | Pointer to an object of type <a>DateProperty</a>, derived from
--   <a>PGProperty</a>.
type DateProperty a = PGProperty (CDateProperty a)

-- | Inheritance type of the DateProperty class.
type TDateProperty a = TPGProperty (CDateProperty a)

-- | Abstract type of the DateProperty class.
data CDateProperty a
CDateProperty :: CDateProperty a

-- | Pointer to an object of type <a>DateTime</a>.
type DateTime a = Object (CDateTime a)

-- | Inheritance type of the DateTime class.
type TDateTime a = CDateTime a

-- | Abstract type of the DateTime class.
data CDateTime a
CDateTime :: CDateTime a

-- | Pointer to an object of type <a>Db</a>.
type Db a = Object (CDb a)

-- | Inheritance type of the Db class.
type TDb a = CDb a

-- | Abstract type of the Db class.
data CDb a
CDb :: CDb a

-- | Pointer to an object of type <a>DbColDef</a>.
type DbColDef a = Object (CDbColDef a)

-- | Inheritance type of the DbColDef class.
type TDbColDef a = CDbColDef a

-- | Abstract type of the DbColDef class.
data CDbColDef a
CDbColDef :: CDbColDef a

-- | Pointer to an object of type <a>DbColFor</a>.
type DbColFor a = Object (CDbColFor a)

-- | Inheritance type of the DbColFor class.
type TDbColFor a = CDbColFor a

-- | Abstract type of the DbColFor class.
data CDbColFor a
CDbColFor :: CDbColFor a

-- | Pointer to an object of type <a>DbColInf</a>.
type DbColInf a = Object (CDbColInf a)

-- | Inheritance type of the DbColInf class.
type TDbColInf a = CDbColInf a

-- | Abstract type of the DbColInf class.
data CDbColInf a
CDbColInf :: CDbColInf a

-- | Pointer to an object of type <a>DbConnectInf</a>.
type DbConnectInf a = Object (CDbConnectInf a)

-- | Inheritance type of the DbConnectInf class.
type TDbConnectInf a = CDbConnectInf a

-- | Abstract type of the DbConnectInf class.
data CDbConnectInf a
CDbConnectInf :: CDbConnectInf a

-- | Pointer to an object of type <a>DbInf</a>.
type DbInf a = Object (CDbInf a)

-- | Inheritance type of the DbInf class.
type TDbInf a = CDbInf a

-- | Abstract type of the DbInf class.
data CDbInf a
CDbInf :: CDbInf a

-- | Pointer to an object of type <a>DbSqlTypeInfo</a>.
type DbSqlTypeInfo a = Object (CDbSqlTypeInfo a)

-- | Inheritance type of the DbSqlTypeInfo class.
type TDbSqlTypeInfo a = CDbSqlTypeInfo a

-- | Abstract type of the DbSqlTypeInfo class.
data CDbSqlTypeInfo a
CDbSqlTypeInfo :: CDbSqlTypeInfo a

-- | Pointer to an object of type <a>DbTable</a>.
type DbTable a = Object (CDbTable a)

-- | Inheritance type of the DbTable class.
type TDbTable a = CDbTable a

-- | Abstract type of the DbTable class.
data CDbTable a
CDbTable :: CDbTable a

-- | Pointer to an object of type <a>DbTableInfo</a>.
type DbTableInfo a = Object (CDbTableInfo a)

-- | Inheritance type of the DbTableInfo class.
type TDbTableInfo a = CDbTableInfo a

-- | Abstract type of the DbTableInfo class.
data CDbTableInfo a
CDbTableInfo :: CDbTableInfo a

-- | Pointer to an object of type <a>DebugContext</a>.
type DebugContext a = Object (CDebugContext a)

-- | Inheritance type of the DebugContext class.
type TDebugContext a = CDebugContext a

-- | Abstract type of the DebugContext class.
data CDebugContext a
CDebugContext :: CDebugContext a

-- | Pointer to an object of type <a>DialUpEvent</a>, derived from
--   <a>Event</a>.
type DialUpEvent a = Event (CDialUpEvent a)

-- | Inheritance type of the DialUpEvent class.
type TDialUpEvent a = TEvent (CDialUpEvent a)

-- | Abstract type of the DialUpEvent class.
data CDialUpEvent a
CDialUpEvent :: CDialUpEvent a

-- | Pointer to an object of type <a>DialUpManager</a>.
type DialUpManager a = Object (CDialUpManager a)

-- | Inheritance type of the DialUpManager class.
type TDialUpManager a = CDialUpManager a

-- | Abstract type of the DialUpManager class.
data CDialUpManager a
CDialUpManager :: CDialUpManager a

-- | Pointer to an object of type <a>Dialog</a>, derived from
--   <a>TopLevelWindow</a>.
type Dialog a = TopLevelWindow (CDialog a)

-- | Inheritance type of the Dialog class.
type TDialog a = TTopLevelWindow (CDialog a)

-- | Abstract type of the Dialog class.
data CDialog a
CDialog :: CDialog a

-- | Pointer to an object of type <a>DirDialog</a>, derived from
--   <a>Dialog</a>.
type DirDialog a = Dialog (CDirDialog a)

-- | Inheritance type of the DirDialog class.
type TDirDialog a = TDialog (CDirDialog a)

-- | Abstract type of the DirDialog class.
data CDirDialog a
CDirDialog :: CDirDialog a

-- | Pointer to an object of type <a>DirTraverser</a>.
type DirTraverser a = Object (CDirTraverser a)

-- | Inheritance type of the DirTraverser class.
type TDirTraverser a = CDirTraverser a

-- | Abstract type of the DirTraverser class.
data CDirTraverser a
CDirTraverser :: CDirTraverser a

-- | Pointer to an object of type <a>DocChildFrame</a>, derived from
--   <a>Frame</a>.
type DocChildFrame a = Frame (CDocChildFrame a)

-- | Inheritance type of the DocChildFrame class.
type TDocChildFrame a = TFrame (CDocChildFrame a)

-- | Abstract type of the DocChildFrame class.
data CDocChildFrame a
CDocChildFrame :: CDocChildFrame a

-- | Pointer to an object of type <a>DocMDIChildFrame</a>, derived from
--   <a>MDIChildFrame</a>.
type DocMDIChildFrame a = MDIChildFrame (CDocMDIChildFrame a)

-- | Inheritance type of the DocMDIChildFrame class.
type TDocMDIChildFrame a = TMDIChildFrame (CDocMDIChildFrame a)

-- | Abstract type of the DocMDIChildFrame class.
data CDocMDIChildFrame a
CDocMDIChildFrame :: CDocMDIChildFrame a

-- | Pointer to an object of type <a>DocMDIParentFrame</a>, derived from
--   <a>MDIParentFrame</a>.
type DocMDIParentFrame a = MDIParentFrame (CDocMDIParentFrame a)

-- | Inheritance type of the DocMDIParentFrame class.
type TDocMDIParentFrame a = TMDIParentFrame (CDocMDIParentFrame a)

-- | Abstract type of the DocMDIParentFrame class.
data CDocMDIParentFrame a
CDocMDIParentFrame :: CDocMDIParentFrame a

-- | Pointer to an object of type <a>DocManager</a>, derived from
--   <a>EvtHandler</a>.
type DocManager a = EvtHandler (CDocManager a)

-- | Inheritance type of the DocManager class.
type TDocManager a = TEvtHandler (CDocManager a)

-- | Abstract type of the DocManager class.
data CDocManager a
CDocManager :: CDocManager a

-- | Pointer to an object of type <a>DocParentFrame</a>, derived from
--   <a>Frame</a>.
type DocParentFrame a = Frame (CDocParentFrame a)

-- | Inheritance type of the DocParentFrame class.
type TDocParentFrame a = TFrame (CDocParentFrame a)

-- | Abstract type of the DocParentFrame class.
data CDocParentFrame a
CDocParentFrame :: CDocParentFrame a

-- | Pointer to an object of type <a>DocTemplate</a>, derived from
--   <a>WxObject</a>.
type DocTemplate a = WxObject (CDocTemplate a)

-- | Inheritance type of the DocTemplate class.
type TDocTemplate a = TWxObject (CDocTemplate a)

-- | Abstract type of the DocTemplate class.
data CDocTemplate a
CDocTemplate :: CDocTemplate a

-- | Pointer to an object of type <a>Document</a>, derived from
--   <a>EvtHandler</a>.
type Document a = EvtHandler (CDocument a)

-- | Inheritance type of the Document class.
type TDocument a = TEvtHandler (CDocument a)

-- | Abstract type of the Document class.
data CDocument a
CDocument :: CDocument a

-- | Pointer to an object of type <a>DragImage</a>, derived from
--   <a>WxObject</a>.
type DragImage a = WxObject (CDragImage a)

-- | Inheritance type of the DragImage class.
type TDragImage a = TWxObject (CDragImage a)

-- | Abstract type of the DragImage class.
data CDragImage a
CDragImage :: CDragImage a

-- | Pointer to an object of type <a>DrawControl</a>, derived from
--   <a>Control</a>.
type DrawControl a = Control (CDrawControl a)

-- | Inheritance type of the DrawControl class.
type TDrawControl a = TControl (CDrawControl a)

-- | Abstract type of the DrawControl class.
data CDrawControl a
CDrawControl :: CDrawControl a

-- | Pointer to an object of type <a>DrawWindow</a>, derived from
--   <a>Window</a>.
type DrawWindow a = Window (CDrawWindow a)

-- | Inheritance type of the DrawWindow class.
type TDrawWindow a = TWindow (CDrawWindow a)

-- | Abstract type of the DrawWindow class.
data CDrawWindow a
CDrawWindow :: CDrawWindow a

-- | Pointer to an object of type <a>DropFilesEvent</a>, derived from
--   <a>Event</a>.
type DropFilesEvent a = Event (CDropFilesEvent a)

-- | Inheritance type of the DropFilesEvent class.
type TDropFilesEvent a = TEvent (CDropFilesEvent a)

-- | Abstract type of the DropFilesEvent class.
data CDropFilesEvent a
CDropFilesEvent :: CDropFilesEvent a

-- | Pointer to an object of type <a>DropSource</a>.
type DropSource a = Object (CDropSource a)

-- | Inheritance type of the DropSource class.
type TDropSource a = CDropSource a

-- | Abstract type of the DropSource class.
data CDropSource a
CDropSource :: CDropSource a

-- | Pointer to an object of type <a>DropTarget</a>.
type DropTarget a = Object (CDropTarget a)

-- | Inheritance type of the DropTarget class.
type TDropTarget a = CDropTarget a

-- | Abstract type of the DropTarget class.
data CDropTarget a
CDropTarget :: CDropTarget a

-- | Pointer to an object of type <a>DynToolInfo</a>, derived from
--   <a>ToolLayoutItem</a>.
type DynToolInfo a = ToolLayoutItem (CDynToolInfo a)

-- | Inheritance type of the DynToolInfo class.
type TDynToolInfo a = TToolLayoutItem (CDynToolInfo a)

-- | Abstract type of the DynToolInfo class.
data CDynToolInfo a
CDynToolInfo :: CDynToolInfo a

-- | Pointer to an object of type <a>DynamicLibrary</a>.
type DynamicLibrary a = Object (CDynamicLibrary a)

-- | Inheritance type of the DynamicLibrary class.
type TDynamicLibrary a = CDynamicLibrary a

-- | Abstract type of the DynamicLibrary class.
data CDynamicLibrary a
CDynamicLibrary :: CDynamicLibrary a

-- | Pointer to an object of type <a>DynamicSashWindow</a>, derived from
--   <a>Window</a>.
type DynamicSashWindow a = Window (CDynamicSashWindow a)

-- | Inheritance type of the DynamicSashWindow class.
type TDynamicSashWindow a = TWindow (CDynamicSashWindow a)

-- | Abstract type of the DynamicSashWindow class.
data CDynamicSashWindow a
CDynamicSashWindow :: CDynamicSashWindow a

-- | Pointer to an object of type <a>DynamicToolBar</a>, derived from
--   <a>ToolBarBase</a>.
type DynamicToolBar a = ToolBarBase (CDynamicToolBar a)

-- | Inheritance type of the DynamicToolBar class.
type TDynamicToolBar a = TToolBarBase (CDynamicToolBar a)

-- | Abstract type of the DynamicToolBar class.
data CDynamicToolBar a
CDynamicToolBar :: CDynamicToolBar a

-- | Pointer to an object of type <a>EditableListBox</a>, derived from
--   <a>Panel</a>.
type EditableListBox a = Panel (CEditableListBox a)

-- | Inheritance type of the EditableListBox class.
type TEditableListBox a = TPanel (CEditableListBox a)

-- | Abstract type of the EditableListBox class.
data CEditableListBox a
CEditableListBox :: CEditableListBox a

-- | Pointer to an object of type <a>EncodingConverter</a>, derived from
--   <a>WxObject</a>.
type EncodingConverter a = WxObject (CEncodingConverter a)

-- | Inheritance type of the EncodingConverter class.
type TEncodingConverter a = TWxObject (CEncodingConverter a)

-- | Abstract type of the EncodingConverter class.
data CEncodingConverter a
CEncodingConverter :: CEncodingConverter a

-- | Pointer to an object of type <a>EraseEvent</a>, derived from
--   <a>Event</a>.
type EraseEvent a = Event (CEraseEvent a)

-- | Inheritance type of the EraseEvent class.
type TEraseEvent a = TEvent (CEraseEvent a)

-- | Abstract type of the EraseEvent class.
data CEraseEvent a
CEraseEvent :: CEraseEvent a

-- | Pointer to an object of type <a>Event</a>, derived from
--   <a>WxObject</a>.
type Event a = WxObject (CEvent a)

-- | Inheritance type of the Event class.
type TEvent a = TWxObject (CEvent a)

-- | Abstract type of the Event class.
data CEvent a
CEvent :: CEvent a

-- | Pointer to an object of type <a>EvtHandler</a>, derived from
--   <a>WxObject</a>.
type EvtHandler a = WxObject (CEvtHandler a)

-- | Inheritance type of the EvtHandler class.
type TEvtHandler a = TWxObject (CEvtHandler a)

-- | Abstract type of the EvtHandler class.
data CEvtHandler a
CEvtHandler :: CEvtHandler a

-- | Pointer to an object of type <a>ExprDatabase</a>, derived from
--   <a>List</a>.
type ExprDatabase a = List (CExprDatabase a)

-- | Inheritance type of the ExprDatabase class.
type TExprDatabase a = TList (CExprDatabase a)

-- | Abstract type of the ExprDatabase class.
data CExprDatabase a
CExprDatabase :: CExprDatabase a

-- | Pointer to an object of type <a>FFile</a>.
type FFile a = Object (CFFile a)

-- | Inheritance type of the FFile class.
type TFFile a = CFFile a

-- | Abstract type of the FFile class.
data CFFile a
CFFile :: CFFile a

-- | Pointer to an object of type <a>FFileInputStream</a>, derived from
--   <a>InputStream</a>.
type FFileInputStream a = InputStream (CFFileInputStream a)

-- | Inheritance type of the FFileInputStream class.
type TFFileInputStream a = TInputStream (CFFileInputStream a)

-- | Abstract type of the FFileInputStream class.
data CFFileInputStream a
CFFileInputStream :: CFFileInputStream a

-- | Pointer to an object of type <a>FFileOutputStream</a>, derived from
--   <a>OutputStream</a>.
type FFileOutputStream a = OutputStream (CFFileOutputStream a)

-- | Inheritance type of the FFileOutputStream class.
type TFFileOutputStream a = TOutputStream (CFFileOutputStream a)

-- | Abstract type of the FFileOutputStream class.
data CFFileOutputStream a
CFFileOutputStream :: CFFileOutputStream a

-- | Pointer to an object of type <a>FSFile</a>, derived from
--   <a>WxObject</a>.
type FSFile a = WxObject (CFSFile a)

-- | Inheritance type of the FSFile class.
type TFSFile a = TWxObject (CFSFile a)

-- | Abstract type of the FSFile class.
data CFSFile a
CFSFile :: CFSFile a

-- | Pointer to an object of type <a>FTP</a>, derived from <a>Protocol</a>.
type FTP a = Protocol (CFTP a)

-- | Inheritance type of the FTP class.
type TFTP a = TProtocol (CFTP a)

-- | Abstract type of the FTP class.
data CFTP a
CFTP :: CFTP a

-- | Pointer to an object of type <a>FileConfig</a>, derived from
--   <a>ConfigBase</a>.
type FileConfig a = ConfigBase (CFileConfig a)

-- | Inheritance type of the FileConfig class.
type TFileConfig a = TConfigBase (CFileConfig a)

-- | Abstract type of the FileConfig class.
data CFileConfig a
CFileConfig :: CFileConfig a

-- | Pointer to an object of type <a>FileDataObject</a>, derived from
--   <a>DataObjectSimple</a>.
type FileDataObject a = DataObjectSimple (CFileDataObject a)

-- | Inheritance type of the FileDataObject class.
type TFileDataObject a = TDataObjectSimple (CFileDataObject a)

-- | Abstract type of the FileDataObject class.
data CFileDataObject a
CFileDataObject :: CFileDataObject a

-- | Pointer to an object of type <a>FileDialog</a>, derived from
--   <a>Dialog</a>.
type FileDialog a = Dialog (CFileDialog a)

-- | Inheritance type of the FileDialog class.
type TFileDialog a = TDialog (CFileDialog a)

-- | Abstract type of the FileDialog class.
data CFileDialog a
CFileDialog :: CFileDialog a

-- | Pointer to an object of type <a>FileDropTarget</a>, derived from
--   <a>DropTarget</a>.
type FileDropTarget a = DropTarget (CFileDropTarget a)

-- | Inheritance type of the FileDropTarget class.
type TFileDropTarget a = TDropTarget (CFileDropTarget a)

-- | Abstract type of the FileDropTarget class.
data CFileDropTarget a
CFileDropTarget :: CFileDropTarget a

-- | Pointer to an object of type <a>FileHistory</a>, derived from
--   <a>WxObject</a>.
type FileHistory a = WxObject (CFileHistory a)

-- | Inheritance type of the FileHistory class.
type TFileHistory a = TWxObject (CFileHistory a)

-- | Abstract type of the FileHistory class.
data CFileHistory a
CFileHistory :: CFileHistory a

-- | Pointer to an object of type <a>FileInputStream</a>, derived from
--   <a>InputStream</a>.
type FileInputStream a = InputStream (CFileInputStream a)

-- | Inheritance type of the FileInputStream class.
type TFileInputStream a = TInputStream (CFileInputStream a)

-- | Abstract type of the FileInputStream class.
data CFileInputStream a
CFileInputStream :: CFileInputStream a

-- | Pointer to an object of type <a>FileName</a>.
type FileName a = Object (CFileName a)

-- | Inheritance type of the FileName class.
type TFileName a = CFileName a

-- | Abstract type of the FileName class.
data CFileName a
CFileName :: CFileName a

-- | Pointer to an object of type <a>FileOutputStream</a>, derived from
--   <a>OutputStream</a>.
type FileOutputStream a = OutputStream (CFileOutputStream a)

-- | Inheritance type of the FileOutputStream class.
type TFileOutputStream a = TOutputStream (CFileOutputStream a)

-- | Abstract type of the FileOutputStream class.
data CFileOutputStream a
CFileOutputStream :: CFileOutputStream a

-- | Pointer to an object of type <a>FileProperty</a>, derived from
--   <a>PGProperty</a>.
type FileProperty a = PGProperty (CFileProperty a)

-- | Inheritance type of the FileProperty class.
type TFileProperty a = TPGProperty (CFileProperty a)

-- | Abstract type of the FileProperty class.
data CFileProperty a
CFileProperty :: CFileProperty a

-- | Pointer to an object of type <a>FileSystem</a>, derived from
--   <a>WxObject</a>.
type FileSystem a = WxObject (CFileSystem a)

-- | Inheritance type of the FileSystem class.
type TFileSystem a = TWxObject (CFileSystem a)

-- | Abstract type of the FileSystem class.
data CFileSystem a
CFileSystem :: CFileSystem a

-- | Pointer to an object of type <a>FileSystemHandler</a>, derived from
--   <a>WxObject</a>.
type FileSystemHandler a = WxObject (CFileSystemHandler a)

-- | Inheritance type of the FileSystemHandler class.
type TFileSystemHandler a = TWxObject (CFileSystemHandler a)

-- | Abstract type of the FileSystemHandler class.
data CFileSystemHandler a
CFileSystemHandler :: CFileSystemHandler a

-- | Pointer to an object of type <a>FileType</a>.
type FileType a = Object (CFileType a)

-- | Inheritance type of the FileType class.
type TFileType a = CFileType a

-- | Abstract type of the FileType class.
data CFileType a
CFileType :: CFileType a

-- | Pointer to an object of type <a>FilterInputStream</a>, derived from
--   <a>InputStream</a>.
type FilterInputStream a = InputStream (CFilterInputStream a)

-- | Inheritance type of the FilterInputStream class.
type TFilterInputStream a = TInputStream (CFilterInputStream a)

-- | Abstract type of the FilterInputStream class.
data CFilterInputStream a
CFilterInputStream :: CFilterInputStream a

-- | Pointer to an object of type <a>FilterOutputStream</a>, derived from
--   <a>OutputStream</a>.
type FilterOutputStream a = OutputStream (CFilterOutputStream a)

-- | Inheritance type of the FilterOutputStream class.
type TFilterOutputStream a = TOutputStream (CFilterOutputStream a)

-- | Abstract type of the FilterOutputStream class.
data CFilterOutputStream a
CFilterOutputStream :: CFilterOutputStream a

-- | Pointer to an object of type <a>FindDialogEvent</a>, derived from
--   <a>CommandEvent</a>.
type FindDialogEvent a = CommandEvent (CFindDialogEvent a)

-- | Inheritance type of the FindDialogEvent class.
type TFindDialogEvent a = TCommandEvent (CFindDialogEvent a)

-- | Abstract type of the FindDialogEvent class.
data CFindDialogEvent a
CFindDialogEvent :: CFindDialogEvent a

-- | Pointer to an object of type <a>FindReplaceData</a>, derived from
--   <a>WxObject</a>.
type FindReplaceData a = WxObject (CFindReplaceData a)

-- | Inheritance type of the FindReplaceData class.
type TFindReplaceData a = TWxObject (CFindReplaceData a)

-- | Abstract type of the FindReplaceData class.
data CFindReplaceData a
CFindReplaceData :: CFindReplaceData a

-- | Pointer to an object of type <a>FindReplaceDialog</a>, derived from
--   <a>Dialog</a>.
type FindReplaceDialog a = Dialog (CFindReplaceDialog a)

-- | Inheritance type of the FindReplaceDialog class.
type TFindReplaceDialog a = TDialog (CFindReplaceDialog a)

-- | Abstract type of the FindReplaceDialog class.
data CFindReplaceDialog a
CFindReplaceDialog :: CFindReplaceDialog a

-- | Pointer to an object of type <a>FlexGridSizer</a>, derived from
--   <a>GridSizer</a>.
type FlexGridSizer a = GridSizer (CFlexGridSizer a)

-- | Inheritance type of the FlexGridSizer class.
type TFlexGridSizer a = TGridSizer (CFlexGridSizer a)

-- | Abstract type of the FlexGridSizer class.
data CFlexGridSizer a
CFlexGridSizer :: CFlexGridSizer a

-- | Pointer to an object of type <a>FloatProperty</a>, derived from
--   <a>PGProperty</a>.
type FloatProperty a = PGProperty (CFloatProperty a)

-- | Inheritance type of the FloatProperty class.
type TFloatProperty a = TPGProperty (CFloatProperty a)

-- | Abstract type of the FloatProperty class.
data CFloatProperty a
CFloatProperty :: CFloatProperty a

-- | Pointer to an object of type <a>FocusEvent</a>, derived from
--   <a>Event</a>.
type FocusEvent a = Event (CFocusEvent a)

-- | Inheritance type of the FocusEvent class.
type TFocusEvent a = TEvent (CFocusEvent a)

-- | Abstract type of the FocusEvent class.
data CFocusEvent a
CFocusEvent :: CFocusEvent a

-- | Pointer to an object of type <a>Font</a>, derived from
--   <a>GDIObject</a>.
type Font a = GDIObject (CFont a)

-- | Inheritance type of the Font class.
type TFont a = TGDIObject (CFont a)

-- | Abstract type of the Font class.
data CFont a
CFont :: CFont a

-- | Pointer to an object of type <a>FontData</a>, derived from
--   <a>WxObject</a>.
type FontData a = WxObject (CFontData a)

-- | Inheritance type of the FontData class.
type TFontData a = TWxObject (CFontData a)

-- | Abstract type of the FontData class.
data CFontData a
CFontData :: CFontData a

-- | Pointer to an object of type <a>FontDialog</a>, derived from
--   <a>Dialog</a>.
type FontDialog a = Dialog (CFontDialog a)

-- | Inheritance type of the FontDialog class.
type TFontDialog a = TDialog (CFontDialog a)

-- | Abstract type of the FontDialog class.
data CFontDialog a
CFontDialog :: CFontDialog a

-- | Pointer to an object of type <a>FontEnumerator</a>.
type FontEnumerator a = Object (CFontEnumerator a)

-- | Inheritance type of the FontEnumerator class.
type TFontEnumerator a = CFontEnumerator a

-- | Abstract type of the FontEnumerator class.
data CFontEnumerator a
CFontEnumerator :: CFontEnumerator a

-- | Pointer to an object of type <a>FontList</a>, derived from
--   <a>List</a>.
type FontList a = List (CFontList a)

-- | Inheritance type of the FontList class.
type TFontList a = TList (CFontList a)

-- | Abstract type of the FontList class.
data CFontList a
CFontList :: CFontList a

-- | Pointer to an object of type <a>FontMapper</a>.
type FontMapper a = Object (CFontMapper a)

-- | Inheritance type of the FontMapper class.
type TFontMapper a = CFontMapper a

-- | Abstract type of the FontMapper class.
data CFontMapper a
CFontMapper :: CFontMapper a

-- | Pointer to an object of type <a>Frame</a>, derived from
--   <a>TopLevelWindow</a>.
type Frame a = TopLevelWindow (CFrame a)

-- | Inheritance type of the Frame class.
type TFrame a = TTopLevelWindow (CFrame a)

-- | Abstract type of the Frame class.
data CFrame a
CFrame :: CFrame a

-- | Pointer to an object of type <a>FrameLayout</a>, derived from
--   <a>EvtHandler</a>.
type FrameLayout a = EvtHandler (CFrameLayout a)

-- | Inheritance type of the FrameLayout class.
type TFrameLayout a = TEvtHandler (CFrameLayout a)

-- | Abstract type of the FrameLayout class.
data CFrameLayout a
CFrameLayout :: CFrameLayout a

-- | Pointer to an object of type <a>GCDC</a>, derived from <a>DC</a>.
type GCDC a = DC (CGCDC a)

-- | Inheritance type of the GCDC class.
type TGCDC a = TDC (CGCDC a)

-- | Abstract type of the GCDC class.
data CGCDC a
CGCDC :: CGCDC a

-- | Pointer to an object of type <a>GDIObject</a>, derived from
--   <a>WxObject</a>.
type GDIObject a = WxObject (CGDIObject a)

-- | Inheritance type of the GDIObject class.
type TGDIObject a = TWxObject (CGDIObject a)

-- | Abstract type of the GDIObject class.
data CGDIObject a
CGDIObject :: CGDIObject a

-- | Pointer to an object of type <a>GLCanvas</a>, derived from
--   <a>Window</a>.
type GLCanvas a = Window (CGLCanvas a)

-- | Inheritance type of the GLCanvas class.
type TGLCanvas a = TWindow (CGLCanvas a)

-- | Abstract type of the GLCanvas class.
data CGLCanvas a
CGLCanvas :: CGLCanvas a

-- | Pointer to an object of type <a>GLContext</a>, derived from
--   <a>WxObject</a>.
type GLContext a = WxObject (CGLContext a)

-- | Inheritance type of the GLContext class.
type TGLContext a = TWxObject (CGLContext a)

-- | Abstract type of the GLContext class.
data CGLContext a
CGLContext :: CGLContext a

-- | Pointer to an object of type <a>Gauge</a>, derived from
--   <a>Control</a>.
type Gauge a = Control (CGauge a)

-- | Inheritance type of the Gauge class.
type TGauge a = TControl (CGauge a)

-- | Abstract type of the Gauge class.
data CGauge a
CGauge :: CGauge a

-- | Pointer to an object of type <a>Gauge95</a>, derived from
--   <a>Gauge</a>.
type Gauge95 a = Gauge (CGauge95 a)

-- | Inheritance type of the Gauge95 class.
type TGauge95 a = TGauge (CGauge95 a)

-- | Abstract type of the Gauge95 class.
data CGauge95 a
CGauge95 :: CGauge95 a

-- | Pointer to an object of type <a>GaugeMSW</a>, derived from
--   <a>Gauge</a>.
type GaugeMSW a = Gauge (CGaugeMSW a)

-- | Inheritance type of the GaugeMSW class.
type TGaugeMSW a = TGauge (CGaugeMSW a)

-- | Abstract type of the GaugeMSW class.
data CGaugeMSW a
CGaugeMSW :: CGaugeMSW a

-- | Pointer to an object of type <a>GenericDirCtrl</a>, derived from
--   <a>Control</a>.
type GenericDirCtrl a = Control (CGenericDirCtrl a)

-- | Inheritance type of the GenericDirCtrl class.
type TGenericDirCtrl a = TControl (CGenericDirCtrl a)

-- | Abstract type of the GenericDirCtrl class.
data CGenericDirCtrl a
CGenericDirCtrl :: CGenericDirCtrl a

-- | Pointer to an object of type <a>GenericDragImage</a>, derived from
--   <a>DragImage</a>.
type GenericDragImage a = DragImage (CGenericDragImage a)

-- | Inheritance type of the GenericDragImage class.
type TGenericDragImage a = TDragImage (CGenericDragImage a)

-- | Abstract type of the GenericDragImage class.
data CGenericDragImage a
CGenericDragImage :: CGenericDragImage a

-- | Pointer to an object of type <a>GenericValidator</a>, derived from
--   <a>Validator</a>.
type GenericValidator a = Validator (CGenericValidator a)

-- | Inheritance type of the GenericValidator class.
type TGenericValidator a = TValidator (CGenericValidator a)

-- | Abstract type of the GenericValidator class.
data CGenericValidator a
CGenericValidator :: CGenericValidator a

-- | Pointer to an object of type <a>GraphicsBrush</a>, derived from
--   <a>GraphicsObject</a>.
type GraphicsBrush a = GraphicsObject (CGraphicsBrush a)

-- | Inheritance type of the GraphicsBrush class.
type TGraphicsBrush a = TGraphicsObject (CGraphicsBrush a)

-- | Abstract type of the GraphicsBrush class.
data CGraphicsBrush a
CGraphicsBrush :: CGraphicsBrush a

-- | Pointer to an object of type <a>GraphicsContext</a>, derived from
--   <a>GraphicsObject</a>.
type GraphicsContext a = GraphicsObject (CGraphicsContext a)

-- | Inheritance type of the GraphicsContext class.
type TGraphicsContext a = TGraphicsObject (CGraphicsContext a)

-- | Abstract type of the GraphicsContext class.
data CGraphicsContext a
CGraphicsContext :: CGraphicsContext a

-- | Pointer to an object of type <a>GraphicsFont</a>, derived from
--   <a>GraphicsObject</a>.
type GraphicsFont a = GraphicsObject (CGraphicsFont a)

-- | Inheritance type of the GraphicsFont class.
type TGraphicsFont a = TGraphicsObject (CGraphicsFont a)

-- | Abstract type of the GraphicsFont class.
data CGraphicsFont a
CGraphicsFont :: CGraphicsFont a

-- | Pointer to an object of type <a>GraphicsMatrix</a>, derived from
--   <a>GraphicsObject</a>.
type GraphicsMatrix a = GraphicsObject (CGraphicsMatrix a)

-- | Inheritance type of the GraphicsMatrix class.
type TGraphicsMatrix a = TGraphicsObject (CGraphicsMatrix a)

-- | Abstract type of the GraphicsMatrix class.
data CGraphicsMatrix a
CGraphicsMatrix :: CGraphicsMatrix a

-- | Pointer to an object of type <a>GraphicsObject</a>, derived from
--   <a>WxObject</a>.
type GraphicsObject a = WxObject (CGraphicsObject a)

-- | Inheritance type of the GraphicsObject class.
type TGraphicsObject a = TWxObject (CGraphicsObject a)

-- | Abstract type of the GraphicsObject class.
data CGraphicsObject a
CGraphicsObject :: CGraphicsObject a

-- | Pointer to an object of type <a>GraphicsPath</a>, derived from
--   <a>GraphicsObject</a>.
type GraphicsPath a = GraphicsObject (CGraphicsPath a)

-- | Inheritance type of the GraphicsPath class.
type TGraphicsPath a = TGraphicsObject (CGraphicsPath a)

-- | Abstract type of the GraphicsPath class.
data CGraphicsPath a
CGraphicsPath :: CGraphicsPath a

-- | Pointer to an object of type <a>GraphicsPen</a>, derived from
--   <a>GraphicsObject</a>.
type GraphicsPen a = GraphicsObject (CGraphicsPen a)

-- | Inheritance type of the GraphicsPen class.
type TGraphicsPen a = TGraphicsObject (CGraphicsPen a)

-- | Abstract type of the GraphicsPen class.
data CGraphicsPen a
CGraphicsPen :: CGraphicsPen a

-- | Pointer to an object of type <a>GraphicsRenderer</a>, derived from
--   <a>GraphicsObject</a>.
type GraphicsRenderer a = GraphicsObject (CGraphicsRenderer a)

-- | Inheritance type of the GraphicsRenderer class.
type TGraphicsRenderer a = TGraphicsObject (CGraphicsRenderer a)

-- | Abstract type of the GraphicsRenderer class.
data CGraphicsRenderer a
CGraphicsRenderer :: CGraphicsRenderer a

-- | Pointer to an object of type <a>Grid</a>, derived from
--   <a>ScrolledWindow</a>.
type Grid a = ScrolledWindow (CGrid a)

-- | Inheritance type of the Grid class.
type TGrid a = TScrolledWindow (CGrid a)

-- | Abstract type of the Grid class.
data CGrid a
CGrid :: CGrid a

-- | Pointer to an object of type <a>GridCellAttr</a>.
type GridCellAttr a = Object (CGridCellAttr a)

-- | Inheritance type of the GridCellAttr class.
type TGridCellAttr a = CGridCellAttr a

-- | Abstract type of the GridCellAttr class.
data CGridCellAttr a
CGridCellAttr :: CGridCellAttr a

-- | Pointer to an object of type <a>GridCellAutoWrapStringRenderer</a>,
--   derived from <a>GridCellStringRenderer</a>.
type GridCellAutoWrapStringRenderer a = GridCellStringRenderer (CGridCellAutoWrapStringRenderer a)

-- | Inheritance type of the GridCellAutoWrapStringRenderer class.
type TGridCellAutoWrapStringRenderer a = TGridCellStringRenderer (CGridCellAutoWrapStringRenderer a)

-- | Abstract type of the GridCellAutoWrapStringRenderer class.
data CGridCellAutoWrapStringRenderer a
CGridCellAutoWrapStringRenderer :: CGridCellAutoWrapStringRenderer a

-- | Pointer to an object of type <a>GridCellBoolEditor</a>, derived from
--   <a>GridCellEditor</a>.
type GridCellBoolEditor a = GridCellEditor (CGridCellBoolEditor a)

-- | Inheritance type of the GridCellBoolEditor class.
type TGridCellBoolEditor a = TGridCellEditor (CGridCellBoolEditor a)

-- | Abstract type of the GridCellBoolEditor class.
data CGridCellBoolEditor a
CGridCellBoolEditor :: CGridCellBoolEditor a

-- | Pointer to an object of type <a>GridCellBoolRenderer</a>, derived from
--   <a>GridCellRenderer</a>.
type GridCellBoolRenderer a = GridCellRenderer (CGridCellBoolRenderer a)

-- | Inheritance type of the GridCellBoolRenderer class.
type TGridCellBoolRenderer a = TGridCellRenderer (CGridCellBoolRenderer a)

-- | Abstract type of the GridCellBoolRenderer class.
data CGridCellBoolRenderer a
CGridCellBoolRenderer :: CGridCellBoolRenderer a

-- | Pointer to an object of type <a>GridCellChoiceEditor</a>, derived from
--   <a>GridCellEditor</a>.
type GridCellChoiceEditor a = GridCellEditor (CGridCellChoiceEditor a)

-- | Inheritance type of the GridCellChoiceEditor class.
type TGridCellChoiceEditor a = TGridCellEditor (CGridCellChoiceEditor a)

-- | Abstract type of the GridCellChoiceEditor class.
data CGridCellChoiceEditor a
CGridCellChoiceEditor :: CGridCellChoiceEditor a

-- | Pointer to an object of type <a>GridCellCoordsArray</a>.
type GridCellCoordsArray a = Object (CGridCellCoordsArray a)

-- | Inheritance type of the GridCellCoordsArray class.
type TGridCellCoordsArray a = CGridCellCoordsArray a

-- | Abstract type of the GridCellCoordsArray class.
data CGridCellCoordsArray a
CGridCellCoordsArray :: CGridCellCoordsArray a

-- | Pointer to an object of type <a>GridCellEditor</a>, derived from
--   <a>GridCellWorker</a>.
type GridCellEditor a = GridCellWorker (CGridCellEditor a)

-- | Inheritance type of the GridCellEditor class.
type TGridCellEditor a = TGridCellWorker (CGridCellEditor a)

-- | Abstract type of the GridCellEditor class.
data CGridCellEditor a
CGridCellEditor :: CGridCellEditor a

-- | Pointer to an object of type <a>GridCellFloatEditor</a>, derived from
--   <a>GridCellTextEditor</a>.
type GridCellFloatEditor a = GridCellTextEditor (CGridCellFloatEditor a)

-- | Inheritance type of the GridCellFloatEditor class.
type TGridCellFloatEditor a = TGridCellTextEditor (CGridCellFloatEditor a)

-- | Abstract type of the GridCellFloatEditor class.
data CGridCellFloatEditor a
CGridCellFloatEditor :: CGridCellFloatEditor a

-- | Pointer to an object of type <a>GridCellFloatRenderer</a>, derived
--   from <a>GridCellStringRenderer</a>.
type GridCellFloatRenderer a = GridCellStringRenderer (CGridCellFloatRenderer a)

-- | Inheritance type of the GridCellFloatRenderer class.
type TGridCellFloatRenderer a = TGridCellStringRenderer (CGridCellFloatRenderer a)

-- | Abstract type of the GridCellFloatRenderer class.
data CGridCellFloatRenderer a
CGridCellFloatRenderer :: CGridCellFloatRenderer a

-- | Pointer to an object of type <a>GridCellNumberEditor</a>, derived from
--   <a>GridCellTextEditor</a>.
type GridCellNumberEditor a = GridCellTextEditor (CGridCellNumberEditor a)

-- | Inheritance type of the GridCellNumberEditor class.
type TGridCellNumberEditor a = TGridCellTextEditor (CGridCellNumberEditor a)

-- | Abstract type of the GridCellNumberEditor class.
data CGridCellNumberEditor a
CGridCellNumberEditor :: CGridCellNumberEditor a

-- | Pointer to an object of type <a>GridCellNumberRenderer</a>, derived
--   from <a>GridCellStringRenderer</a>.
type GridCellNumberRenderer a = GridCellStringRenderer (CGridCellNumberRenderer a)

-- | Inheritance type of the GridCellNumberRenderer class.
type TGridCellNumberRenderer a = TGridCellStringRenderer (CGridCellNumberRenderer a)

-- | Abstract type of the GridCellNumberRenderer class.
data CGridCellNumberRenderer a
CGridCellNumberRenderer :: CGridCellNumberRenderer a

-- | Pointer to an object of type <a>GridCellRenderer</a>, derived from
--   <a>GridCellWorker</a>.
type GridCellRenderer a = GridCellWorker (CGridCellRenderer a)

-- | Inheritance type of the GridCellRenderer class.
type TGridCellRenderer a = TGridCellWorker (CGridCellRenderer a)

-- | Abstract type of the GridCellRenderer class.
data CGridCellRenderer a
CGridCellRenderer :: CGridCellRenderer a

-- | Pointer to an object of type <a>GridCellStringRenderer</a>, derived
--   from <a>GridCellRenderer</a>.
type GridCellStringRenderer a = GridCellRenderer (CGridCellStringRenderer a)

-- | Inheritance type of the GridCellStringRenderer class.
type TGridCellStringRenderer a = TGridCellRenderer (CGridCellStringRenderer a)

-- | Abstract type of the GridCellStringRenderer class.
data CGridCellStringRenderer a
CGridCellStringRenderer :: CGridCellStringRenderer a

-- | Pointer to an object of type <a>GridCellTextEditor</a>, derived from
--   <a>GridCellEditor</a>.
type GridCellTextEditor a = GridCellEditor (CGridCellTextEditor a)

-- | Inheritance type of the GridCellTextEditor class.
type TGridCellTextEditor a = TGridCellEditor (CGridCellTextEditor a)

-- | Abstract type of the GridCellTextEditor class.
data CGridCellTextEditor a
CGridCellTextEditor :: CGridCellTextEditor a

-- | Pointer to an object of type <a>GridCellTextEnterEditor</a>, derived
--   from <a>GridCellTextEditor</a>.
type GridCellTextEnterEditor a = GridCellTextEditor (CGridCellTextEnterEditor a)

-- | Inheritance type of the GridCellTextEnterEditor class.
type TGridCellTextEnterEditor a = TGridCellTextEditor (CGridCellTextEnterEditor a)

-- | Abstract type of the GridCellTextEnterEditor class.
data CGridCellTextEnterEditor a
CGridCellTextEnterEditor :: CGridCellTextEnterEditor a

-- | Pointer to an object of type <a>GridCellWorker</a>.
type GridCellWorker a = Object (CGridCellWorker a)

-- | Inheritance type of the GridCellWorker class.
type TGridCellWorker a = CGridCellWorker a

-- | Abstract type of the GridCellWorker class.
data CGridCellWorker a
CGridCellWorker :: CGridCellWorker a

-- | Pointer to an object of type <a>GridEditorCreatedEvent</a>, derived
--   from <a>CommandEvent</a>.
type GridEditorCreatedEvent a = CommandEvent (CGridEditorCreatedEvent a)

-- | Inheritance type of the GridEditorCreatedEvent class.
type TGridEditorCreatedEvent a = TCommandEvent (CGridEditorCreatedEvent a)

-- | Abstract type of the GridEditorCreatedEvent class.
data CGridEditorCreatedEvent a
CGridEditorCreatedEvent :: CGridEditorCreatedEvent a

-- | Pointer to an object of type <a>GridEvent</a>, derived from
--   <a>NotifyEvent</a>.
type GridEvent a = NotifyEvent (CGridEvent a)

-- | Inheritance type of the GridEvent class.
type TGridEvent a = TNotifyEvent (CGridEvent a)

-- | Abstract type of the GridEvent class.
data CGridEvent a
CGridEvent :: CGridEvent a

-- | Pointer to an object of type <a>GridRangeSelectEvent</a>, derived from
--   <a>NotifyEvent</a>.
type GridRangeSelectEvent a = NotifyEvent (CGridRangeSelectEvent a)

-- | Inheritance type of the GridRangeSelectEvent class.
type TGridRangeSelectEvent a = TNotifyEvent (CGridRangeSelectEvent a)

-- | Abstract type of the GridRangeSelectEvent class.
data CGridRangeSelectEvent a
CGridRangeSelectEvent :: CGridRangeSelectEvent a

-- | Pointer to an object of type <a>GridSizeEvent</a>, derived from
--   <a>NotifyEvent</a>.
type GridSizeEvent a = NotifyEvent (CGridSizeEvent a)

-- | Inheritance type of the GridSizeEvent class.
type TGridSizeEvent a = TNotifyEvent (CGridSizeEvent a)

-- | Abstract type of the GridSizeEvent class.
data CGridSizeEvent a
CGridSizeEvent :: CGridSizeEvent a

-- | Pointer to an object of type <a>GridSizer</a>, derived from
--   <a>Sizer</a>.
type GridSizer a = Sizer (CGridSizer a)

-- | Inheritance type of the GridSizer class.
type TGridSizer a = TSizer (CGridSizer a)

-- | Abstract type of the GridSizer class.
data CGridSizer a
CGridSizer :: CGridSizer a

-- | Pointer to an object of type <a>GridTableBase</a>, derived from
--   <a>WxObject</a>.
type GridTableBase a = WxObject (CGridTableBase a)

-- | Inheritance type of the GridTableBase class.
type TGridTableBase a = TWxObject (CGridTableBase a)

-- | Abstract type of the GridTableBase class.
data CGridTableBase a
CGridTableBase :: CGridTableBase a

-- | Pointer to an object of type <a>HTTP</a>, derived from
--   <a>Protocol</a>.
type HTTP a = Protocol (CHTTP a)

-- | Inheritance type of the HTTP class.
type THTTP a = TProtocol (CHTTP a)

-- | Abstract type of the HTTP class.
data CHTTP a
CHTTP :: CHTTP a

-- | Pointer to an object of type <a>HashMap</a>.
type HashMap a = Object (CHashMap a)

-- | Inheritance type of the HashMap class.
type THashMap a = CHashMap a

-- | Abstract type of the HashMap class.
data CHashMap a
CHashMap :: CHashMap a

-- | Pointer to an object of type <a>HelpController</a>, derived from
--   <a>HelpControllerBase</a>.
type HelpController a = HelpControllerBase (CHelpController a)

-- | Inheritance type of the HelpController class.
type THelpController a = THelpControllerBase (CHelpController a)

-- | Abstract type of the HelpController class.
data CHelpController a
CHelpController :: CHelpController a

-- | Pointer to an object of type <a>HelpControllerBase</a>, derived from
--   <a>WxObject</a>.
type HelpControllerBase a = WxObject (CHelpControllerBase a)

-- | Inheritance type of the HelpControllerBase class.
type THelpControllerBase a = TWxObject (CHelpControllerBase a)

-- | Abstract type of the HelpControllerBase class.
data CHelpControllerBase a
CHelpControllerBase :: CHelpControllerBase a

-- | Pointer to an object of type <a>HelpControllerHelpProvider</a>,
--   derived from <a>SimpleHelpProvider</a>.
type HelpControllerHelpProvider a = SimpleHelpProvider (CHelpControllerHelpProvider a)

-- | Inheritance type of the HelpControllerHelpProvider class.
type THelpControllerHelpProvider a = TSimpleHelpProvider (CHelpControllerHelpProvider a)

-- | Abstract type of the HelpControllerHelpProvider class.
data CHelpControllerHelpProvider a
CHelpControllerHelpProvider :: CHelpControllerHelpProvider a

-- | Pointer to an object of type <a>HelpEvent</a>, derived from
--   <a>CommandEvent</a>.
type HelpEvent a = CommandEvent (CHelpEvent a)

-- | Inheritance type of the HelpEvent class.
type THelpEvent a = TCommandEvent (CHelpEvent a)

-- | Abstract type of the HelpEvent class.
data CHelpEvent a
CHelpEvent :: CHelpEvent a

-- | Pointer to an object of type <a>HelpProvider</a>.
type HelpProvider a = Object (CHelpProvider a)

-- | Inheritance type of the HelpProvider class.
type THelpProvider a = CHelpProvider a

-- | Abstract type of the HelpProvider class.
data CHelpProvider a
CHelpProvider :: CHelpProvider a

-- | Pointer to an object of type <a>HtmlCell</a>, derived from
--   <a>WxObject</a>.
type HtmlCell a = WxObject (CHtmlCell a)

-- | Inheritance type of the HtmlCell class.
type THtmlCell a = TWxObject (CHtmlCell a)

-- | Abstract type of the HtmlCell class.
data CHtmlCell a
CHtmlCell :: CHtmlCell a

-- | Pointer to an object of type <a>HtmlColourCell</a>, derived from
--   <a>HtmlCell</a>.
type HtmlColourCell a = HtmlCell (CHtmlColourCell a)

-- | Inheritance type of the HtmlColourCell class.
type THtmlColourCell a = THtmlCell (CHtmlColourCell a)

-- | Abstract type of the HtmlColourCell class.
data CHtmlColourCell a
CHtmlColourCell :: CHtmlColourCell a

-- | Pointer to an object of type <a>HtmlContainerCell</a>, derived from
--   <a>HtmlCell</a>.
type HtmlContainerCell a = HtmlCell (CHtmlContainerCell a)

-- | Inheritance type of the HtmlContainerCell class.
type THtmlContainerCell a = THtmlCell (CHtmlContainerCell a)

-- | Abstract type of the HtmlContainerCell class.
data CHtmlContainerCell a
CHtmlContainerCell :: CHtmlContainerCell a

-- | Pointer to an object of type <a>HtmlDCRenderer</a>, derived from
--   <a>WxObject</a>.
type HtmlDCRenderer a = WxObject (CHtmlDCRenderer a)

-- | Inheritance type of the HtmlDCRenderer class.
type THtmlDCRenderer a = TWxObject (CHtmlDCRenderer a)

-- | Abstract type of the HtmlDCRenderer class.
data CHtmlDCRenderer a
CHtmlDCRenderer :: CHtmlDCRenderer a

-- | Pointer to an object of type <a>HtmlEasyPrinting</a>, derived from
--   <a>WxObject</a>.
type HtmlEasyPrinting a = WxObject (CHtmlEasyPrinting a)

-- | Inheritance type of the HtmlEasyPrinting class.
type THtmlEasyPrinting a = TWxObject (CHtmlEasyPrinting a)

-- | Abstract type of the HtmlEasyPrinting class.
data CHtmlEasyPrinting a
CHtmlEasyPrinting :: CHtmlEasyPrinting a

-- | Pointer to an object of type <a>HtmlFilter</a>, derived from
--   <a>WxObject</a>.
type HtmlFilter a = WxObject (CHtmlFilter a)

-- | Inheritance type of the HtmlFilter class.
type THtmlFilter a = TWxObject (CHtmlFilter a)

-- | Abstract type of the HtmlFilter class.
data CHtmlFilter a
CHtmlFilter :: CHtmlFilter a

-- | Pointer to an object of type <a>HtmlHelpController</a>, derived from
--   <a>HelpControllerBase</a>.
type HtmlHelpController a = HelpControllerBase (CHtmlHelpController a)

-- | Inheritance type of the HtmlHelpController class.
type THtmlHelpController a = THelpControllerBase (CHtmlHelpController a)

-- | Abstract type of the HtmlHelpController class.
data CHtmlHelpController a
CHtmlHelpController :: CHtmlHelpController a

-- | Pointer to an object of type <a>HtmlHelpData</a>, derived from
--   <a>WxObject</a>.
type HtmlHelpData a = WxObject (CHtmlHelpData a)

-- | Inheritance type of the HtmlHelpData class.
type THtmlHelpData a = TWxObject (CHtmlHelpData a)

-- | Abstract type of the HtmlHelpData class.
data CHtmlHelpData a
CHtmlHelpData :: CHtmlHelpData a

-- | Pointer to an object of type <a>HtmlHelpFrame</a>, derived from
--   <a>Frame</a>.
type HtmlHelpFrame a = Frame (CHtmlHelpFrame a)

-- | Inheritance type of the HtmlHelpFrame class.
type THtmlHelpFrame a = TFrame (CHtmlHelpFrame a)

-- | Abstract type of the HtmlHelpFrame class.
data CHtmlHelpFrame a
CHtmlHelpFrame :: CHtmlHelpFrame a

-- | Pointer to an object of type <a>HtmlLinkInfo</a>, derived from
--   <a>WxObject</a>.
type HtmlLinkInfo a = WxObject (CHtmlLinkInfo a)

-- | Inheritance type of the HtmlLinkInfo class.
type THtmlLinkInfo a = TWxObject (CHtmlLinkInfo a)

-- | Abstract type of the HtmlLinkInfo class.
data CHtmlLinkInfo a
CHtmlLinkInfo :: CHtmlLinkInfo a

-- | Pointer to an object of type <a>HtmlParser</a>, derived from
--   <a>WxObject</a>.
type HtmlParser a = WxObject (CHtmlParser a)

-- | Inheritance type of the HtmlParser class.
type THtmlParser a = TWxObject (CHtmlParser a)

-- | Abstract type of the HtmlParser class.
data CHtmlParser a
CHtmlParser :: CHtmlParser a

-- | Pointer to an object of type <a>HtmlPrintout</a>, derived from
--   <a>Printout</a>.
type HtmlPrintout a = Printout (CHtmlPrintout a)

-- | Inheritance type of the HtmlPrintout class.
type THtmlPrintout a = TPrintout (CHtmlPrintout a)

-- | Abstract type of the HtmlPrintout class.
data CHtmlPrintout a
CHtmlPrintout :: CHtmlPrintout a

-- | Pointer to an object of type <a>HtmlTag</a>, derived from
--   <a>WxObject</a>.
type HtmlTag a = WxObject (CHtmlTag a)

-- | Inheritance type of the HtmlTag class.
type THtmlTag a = TWxObject (CHtmlTag a)

-- | Abstract type of the HtmlTag class.
data CHtmlTag a
CHtmlTag :: CHtmlTag a

-- | Pointer to an object of type <a>HtmlTagHandler</a>, derived from
--   <a>WxObject</a>.
type HtmlTagHandler a = WxObject (CHtmlTagHandler a)

-- | Inheritance type of the HtmlTagHandler class.
type THtmlTagHandler a = TWxObject (CHtmlTagHandler a)

-- | Abstract type of the HtmlTagHandler class.
data CHtmlTagHandler a
CHtmlTagHandler :: CHtmlTagHandler a

-- | Pointer to an object of type <a>HtmlTagsModule</a>, derived from
--   <a>Module</a>.
type HtmlTagsModule a = Module (CHtmlTagsModule a)

-- | Inheritance type of the HtmlTagsModule class.
type THtmlTagsModule a = TModule (CHtmlTagsModule a)

-- | Abstract type of the HtmlTagsModule class.
data CHtmlTagsModule a
CHtmlTagsModule :: CHtmlTagsModule a

-- | Pointer to an object of type <a>HtmlWidgetCell</a>, derived from
--   <a>HtmlCell</a>.
type HtmlWidgetCell a = HtmlCell (CHtmlWidgetCell a)

-- | Inheritance type of the HtmlWidgetCell class.
type THtmlWidgetCell a = THtmlCell (CHtmlWidgetCell a)

-- | Abstract type of the HtmlWidgetCell class.
data CHtmlWidgetCell a
CHtmlWidgetCell :: CHtmlWidgetCell a

-- | Pointer to an object of type <a>HtmlWinParser</a>, derived from
--   <a>HtmlParser</a>.
type HtmlWinParser a = HtmlParser (CHtmlWinParser a)

-- | Inheritance type of the HtmlWinParser class.
type THtmlWinParser a = THtmlParser (CHtmlWinParser a)

-- | Abstract type of the HtmlWinParser class.
data CHtmlWinParser a
CHtmlWinParser :: CHtmlWinParser a

-- | Pointer to an object of type <a>HtmlWinTagHandler</a>, derived from
--   <a>HtmlTagHandler</a>.
type HtmlWinTagHandler a = HtmlTagHandler (CHtmlWinTagHandler a)

-- | Inheritance type of the HtmlWinTagHandler class.
type THtmlWinTagHandler a = THtmlTagHandler (CHtmlWinTagHandler a)

-- | Abstract type of the HtmlWinTagHandler class.
data CHtmlWinTagHandler a
CHtmlWinTagHandler :: CHtmlWinTagHandler a

-- | Pointer to an object of type <a>HtmlWindow</a>, derived from
--   <a>ScrolledWindow</a>.
type HtmlWindow a = ScrolledWindow (CHtmlWindow a)

-- | Inheritance type of the HtmlWindow class.
type THtmlWindow a = TScrolledWindow (CHtmlWindow a)

-- | Abstract type of the HtmlWindow class.
data CHtmlWindow a
CHtmlWindow :: CHtmlWindow a

-- | Pointer to an object of type <a>HyperlinkCtrl</a>, derived from
--   <a>Control</a>.
type HyperlinkCtrl a = Control (CHyperlinkCtrl a)

-- | Inheritance type of the HyperlinkCtrl class.
type THyperlinkCtrl a = TControl (CHyperlinkCtrl a)

-- | Abstract type of the HyperlinkCtrl class.
data CHyperlinkCtrl a
CHyperlinkCtrl :: CHyperlinkCtrl a

-- | Pointer to an object of type <a>IPV4address</a>, derived from
--   <a>SockAddress</a>.
type IPV4address a = SockAddress (CIPV4address a)

-- | Inheritance type of the IPV4address class.
type TIPV4address a = TSockAddress (CIPV4address a)

-- | Abstract type of the IPV4address class.
data CIPV4address a
CIPV4address :: CIPV4address a

-- | Pointer to an object of type <a>Icon</a>, derived from <a>Bitmap</a>.
type Icon a = Bitmap (CIcon a)

-- | Inheritance type of the Icon class.
type TIcon a = TBitmap (CIcon a)

-- | Abstract type of the Icon class.
data CIcon a
CIcon :: CIcon a

-- | Pointer to an object of type <a>IconBundle</a>.
type IconBundle a = Object (CIconBundle a)

-- | Inheritance type of the IconBundle class.
type TIconBundle a = CIconBundle a

-- | Abstract type of the IconBundle class.
data CIconBundle a
CIconBundle :: CIconBundle a

-- | Pointer to an object of type <a>IconizeEvent</a>, derived from
--   <a>Event</a>.
type IconizeEvent a = Event (CIconizeEvent a)

-- | Inheritance type of the IconizeEvent class.
type TIconizeEvent a = TEvent (CIconizeEvent a)

-- | Abstract type of the IconizeEvent class.
data CIconizeEvent a
CIconizeEvent :: CIconizeEvent a

-- | Pointer to an object of type <a>IdleEvent</a>, derived from
--   <a>Event</a>.
type IdleEvent a = Event (CIdleEvent a)

-- | Inheritance type of the IdleEvent class.
type TIdleEvent a = TEvent (CIdleEvent a)

-- | Abstract type of the IdleEvent class.
data CIdleEvent a
CIdleEvent :: CIdleEvent a

-- | Pointer to an object of type <a>Image</a>, derived from
--   <a>WxObject</a>.
type Image a = WxObject (CImage a)

-- | Inheritance type of the Image class.
type TImage a = TWxObject (CImage a)

-- | Abstract type of the Image class.
data CImage a
CImage :: CImage a

-- | Pointer to an object of type <a>ImageHandler</a>, derived from
--   <a>WxObject</a>.
type ImageHandler a = WxObject (CImageHandler a)

-- | Inheritance type of the ImageHandler class.
type TImageHandler a = TWxObject (CImageHandler a)

-- | Abstract type of the ImageHandler class.
data CImageHandler a
CImageHandler :: CImageHandler a

-- | Pointer to an object of type <a>ImageList</a>, derived from
--   <a>WxObject</a>.
type ImageList a = WxObject (CImageList a)

-- | Inheritance type of the ImageList class.
type TImageList a = TWxObject (CImageList a)

-- | Abstract type of the ImageList class.
data CImageList a
CImageList :: CImageList a

-- | Pointer to an object of type <a>IndividualLayoutConstraint</a>,
--   derived from <a>WxObject</a>.
type IndividualLayoutConstraint a = WxObject (CIndividualLayoutConstraint a)

-- | Inheritance type of the IndividualLayoutConstraint class.
type TIndividualLayoutConstraint a = TWxObject (CIndividualLayoutConstraint a)

-- | Abstract type of the IndividualLayoutConstraint class.
data CIndividualLayoutConstraint a
CIndividualLayoutConstraint :: CIndividualLayoutConstraint a

-- | Pointer to an object of type <a>InitDialogEvent</a>, derived from
--   <a>Event</a>.
type InitDialogEvent a = Event (CInitDialogEvent a)

-- | Inheritance type of the InitDialogEvent class.
type TInitDialogEvent a = TEvent (CInitDialogEvent a)

-- | Abstract type of the InitDialogEvent class.
data CInitDialogEvent a
CInitDialogEvent :: CInitDialogEvent a

-- | Pointer to an object of type <a>InputSink</a>, derived from
--   <a>Thread</a>.
type InputSink a = Thread (CInputSink a)

-- | Inheritance type of the InputSink class.
type TInputSink a = TThread (CInputSink a)

-- | Abstract type of the InputSink class.
data CInputSink a
CInputSink :: CInputSink a

-- | Pointer to an object of type <a>InputSinkEvent</a>, derived from
--   <a>Event</a>.
type InputSinkEvent a = Event (CInputSinkEvent a)

-- | Inheritance type of the InputSinkEvent class.
type TInputSinkEvent a = TEvent (CInputSinkEvent a)

-- | Abstract type of the InputSinkEvent class.
data CInputSinkEvent a
CInputSinkEvent :: CInputSinkEvent a

-- | Pointer to an object of type <a>InputStream</a>, derived from
--   <a>StreamBase</a>.
type InputStream a = StreamBase (CInputStream a)

-- | Inheritance type of the InputStream class.
type TInputStream a = TStreamBase (CInputStream a)

-- | Abstract type of the InputStream class.
data CInputStream a
CInputStream :: CInputStream a

-- | Pointer to an object of type <a>IntProperty</a>, derived from
--   <a>PGProperty</a>.
type IntProperty a = PGProperty (CIntProperty a)

-- | Inheritance type of the IntProperty class.
type TIntProperty a = TPGProperty (CIntProperty a)

-- | Abstract type of the IntProperty class.
data CIntProperty a
CIntProperty :: CIntProperty a

-- | Pointer to an object of type <a>Joystick</a>, derived from
--   <a>WxObject</a>.
type Joystick a = WxObject (CJoystick a)

-- | Inheritance type of the Joystick class.
type TJoystick a = TWxObject (CJoystick a)

-- | Abstract type of the Joystick class.
data CJoystick a
CJoystick :: CJoystick a

-- | Pointer to an object of type <a>JoystickEvent</a>, derived from
--   <a>Event</a>.
type JoystickEvent a = Event (CJoystickEvent a)

-- | Inheritance type of the JoystickEvent class.
type TJoystickEvent a = TEvent (CJoystickEvent a)

-- | Abstract type of the JoystickEvent class.
data CJoystickEvent a
CJoystickEvent :: CJoystickEvent a

-- | Pointer to an object of type <a>KeyEvent</a>, derived from
--   <a>Event</a>.
type KeyEvent a = Event (CKeyEvent a)

-- | Inheritance type of the KeyEvent class.
type TKeyEvent a = TEvent (CKeyEvent a)

-- | Abstract type of the KeyEvent class.
data CKeyEvent a
CKeyEvent :: CKeyEvent a

-- | Pointer to an object of type <a>LEDNumberCtrl</a>, derived from
--   <a>Control</a>.
type LEDNumberCtrl a = Control (CLEDNumberCtrl a)

-- | Inheritance type of the LEDNumberCtrl class.
type TLEDNumberCtrl a = TControl (CLEDNumberCtrl a)

-- | Abstract type of the LEDNumberCtrl class.
data CLEDNumberCtrl a
CLEDNumberCtrl :: CLEDNumberCtrl a

-- | Pointer to an object of type <a>LayoutAlgorithm</a>, derived from
--   <a>WxObject</a>.
type LayoutAlgorithm a = WxObject (CLayoutAlgorithm a)

-- | Inheritance type of the LayoutAlgorithm class.
type TLayoutAlgorithm a = TWxObject (CLayoutAlgorithm a)

-- | Abstract type of the LayoutAlgorithm class.
data CLayoutAlgorithm a
CLayoutAlgorithm :: CLayoutAlgorithm a

-- | Pointer to an object of type <a>LayoutConstraints</a>, derived from
--   <a>WxObject</a>.
type LayoutConstraints a = WxObject (CLayoutConstraints a)

-- | Inheritance type of the LayoutConstraints class.
type TLayoutConstraints a = TWxObject (CLayoutConstraints a)

-- | Abstract type of the LayoutConstraints class.
data CLayoutConstraints a
CLayoutConstraints :: CLayoutConstraints a

-- | Pointer to an object of type <a>List</a>, derived from
--   <a>WxObject</a>.
type List a = WxObject (CList a)

-- | Inheritance type of the List class.
type TList a = TWxObject (CList a)

-- | Abstract type of the List class.
data CList a
CList :: CList a

-- | Pointer to an object of type <a>ListBox</a>, derived from
--   <a>Control</a>.
type ListBox a = Control (CListBox a)

-- | Inheritance type of the ListBox class.
type TListBox a = TControl (CListBox a)

-- | Abstract type of the ListBox class.
data CListBox a
CListBox :: CListBox a

-- | Pointer to an object of type <a>ListCtrl</a>, derived from
--   <a>Control</a>.
type ListCtrl a = Control (CListCtrl a)

-- | Inheritance type of the ListCtrl class.
type TListCtrl a = TControl (CListCtrl a)

-- | Abstract type of the ListCtrl class.
data CListCtrl a
CListCtrl :: CListCtrl a

-- | Pointer to an object of type <a>ListEvent</a>, derived from
--   <a>NotifyEvent</a>.
type ListEvent a = NotifyEvent (CListEvent a)

-- | Inheritance type of the ListEvent class.
type TListEvent a = TNotifyEvent (CListEvent a)

-- | Abstract type of the ListEvent class.
data CListEvent a
CListEvent :: CListEvent a

-- | Pointer to an object of type <a>ListItem</a>, derived from
--   <a>WxObject</a>.
type ListItem a = WxObject (CListItem a)

-- | Inheritance type of the ListItem class.
type TListItem a = TWxObject (CListItem a)

-- | Abstract type of the ListItem class.
data CListItem a
CListItem :: CListItem a

-- | Pointer to an object of type <a>Locale</a>.
type Locale a = Object (CLocale a)

-- | Inheritance type of the Locale class.
type TLocale a = CLocale a

-- | Abstract type of the Locale class.
data CLocale a
CLocale :: CLocale a

-- | Pointer to an object of type <a>Log</a>.
type Log a = Object (CLog a)

-- | Inheritance type of the Log class.
type TLog a = CLog a

-- | Abstract type of the Log class.
data CLog a
CLog :: CLog a

-- | Pointer to an object of type <a>LogChain</a>, derived from <a>Log</a>.
type LogChain a = Log (CLogChain a)

-- | Inheritance type of the LogChain class.
type TLogChain a = TLog (CLogChain a)

-- | Abstract type of the LogChain class.
data CLogChain a
CLogChain :: CLogChain a

-- | Pointer to an object of type <a>LogGUI</a>, derived from <a>Log</a>.
type LogGUI a = Log (CLogGUI a)

-- | Inheritance type of the LogGUI class.
type TLogGUI a = TLog (CLogGUI a)

-- | Abstract type of the LogGUI class.
data CLogGUI a
CLogGUI :: CLogGUI a

-- | Pointer to an object of type <a>LogNull</a>, derived from <a>Log</a>.
type LogNull a = Log (CLogNull a)

-- | Inheritance type of the LogNull class.
type TLogNull a = TLog (CLogNull a)

-- | Abstract type of the LogNull class.
data CLogNull a
CLogNull :: CLogNull a

-- | Pointer to an object of type <a>LogPassThrough</a>, derived from
--   <a>LogChain</a>.
type LogPassThrough a = LogChain (CLogPassThrough a)

-- | Inheritance type of the LogPassThrough class.
type TLogPassThrough a = TLogChain (CLogPassThrough a)

-- | Abstract type of the LogPassThrough class.
data CLogPassThrough a
CLogPassThrough :: CLogPassThrough a

-- | Pointer to an object of type <a>LogStderr</a>, derived from
--   <a>Log</a>.
type LogStderr a = Log (CLogStderr a)

-- | Inheritance type of the LogStderr class.
type TLogStderr a = TLog (CLogStderr a)

-- | Abstract type of the LogStderr class.
data CLogStderr a
CLogStderr :: CLogStderr a

-- | Pointer to an object of type <a>LogStream</a>, derived from
--   <a>Log</a>.
type LogStream a = Log (CLogStream a)

-- | Inheritance type of the LogStream class.
type TLogStream a = TLog (CLogStream a)

-- | Abstract type of the LogStream class.
data CLogStream a
CLogStream :: CLogStream a

-- | Pointer to an object of type <a>LogTextCtrl</a>, derived from
--   <a>Log</a>.
type LogTextCtrl a = Log (CLogTextCtrl a)

-- | Inheritance type of the LogTextCtrl class.
type TLogTextCtrl a = TLog (CLogTextCtrl a)

-- | Abstract type of the LogTextCtrl class.
data CLogTextCtrl a
CLogTextCtrl :: CLogTextCtrl a

-- | Pointer to an object of type <a>LogWindow</a>, derived from
--   <a>LogPassThrough</a>.
type LogWindow a = LogPassThrough (CLogWindow a)

-- | Inheritance type of the LogWindow class.
type TLogWindow a = TLogPassThrough (CLogWindow a)

-- | Abstract type of the LogWindow class.
data CLogWindow a
CLogWindow :: CLogWindow a

-- | Pointer to an object of type <a>LongLong</a>.
type LongLong a = Object (CLongLong a)

-- | Inheritance type of the LongLong class.
type TLongLong a = CLongLong a

-- | Abstract type of the LongLong class.
data CLongLong a
CLongLong :: CLongLong a

-- | Pointer to an object of type <a>MBConv</a>.
type MBConv a = Object (CMBConv a)

-- | Inheritance type of the MBConv class.
type TMBConv a = CMBConv a

-- | Abstract type of the MBConv class.
data CMBConv a
CMBConv :: CMBConv a

-- | Pointer to an object of type <a>MBConvFile</a>, derived from
--   <a>MBConv</a>.
type MBConvFile a = MBConv (CMBConvFile a)

-- | Inheritance type of the MBConvFile class.
type TMBConvFile a = TMBConv (CMBConvFile a)

-- | Abstract type of the MBConvFile class.
data CMBConvFile a
CMBConvFile :: CMBConvFile a

-- | Pointer to an object of type <a>MBConvUTF7</a>, derived from
--   <a>MBConv</a>.
type MBConvUTF7 a = MBConv (CMBConvUTF7 a)

-- | Inheritance type of the MBConvUTF7 class.
type TMBConvUTF7 a = TMBConv (CMBConvUTF7 a)

-- | Abstract type of the MBConvUTF7 class.
data CMBConvUTF7 a
CMBConvUTF7 :: CMBConvUTF7 a

-- | Pointer to an object of type <a>MBConvUTF8</a>, derived from
--   <a>MBConv</a>.
type MBConvUTF8 a = MBConv (CMBConvUTF8 a)

-- | Inheritance type of the MBConvUTF8 class.
type TMBConvUTF8 a = TMBConv (CMBConvUTF8 a)

-- | Abstract type of the MBConvUTF8 class.
data CMBConvUTF8 a
CMBConvUTF8 :: CMBConvUTF8 a

-- | Pointer to an object of type <a>MDIChildFrame</a>, derived from
--   <a>Frame</a>.
type MDIChildFrame a = Frame (CMDIChildFrame a)

-- | Inheritance type of the MDIChildFrame class.
type TMDIChildFrame a = TFrame (CMDIChildFrame a)

-- | Abstract type of the MDIChildFrame class.
data CMDIChildFrame a
CMDIChildFrame :: CMDIChildFrame a

-- | Pointer to an object of type <a>MDIClientWindow</a>, derived from
--   <a>Window</a>.
type MDIClientWindow a = Window (CMDIClientWindow a)

-- | Inheritance type of the MDIClientWindow class.
type TMDIClientWindow a = TWindow (CMDIClientWindow a)

-- | Abstract type of the MDIClientWindow class.
data CMDIClientWindow a
CMDIClientWindow :: CMDIClientWindow a

-- | Pointer to an object of type <a>MDIParentFrame</a>, derived from
--   <a>Frame</a>.
type MDIParentFrame a = Frame (CMDIParentFrame a)

-- | Inheritance type of the MDIParentFrame class.
type TMDIParentFrame a = TFrame (CMDIParentFrame a)

-- | Abstract type of the MDIParentFrame class.
data CMDIParentFrame a
CMDIParentFrame :: CMDIParentFrame a

-- | Pointer to an object of type <a>Mask</a>, derived from
--   <a>WxObject</a>.
type Mask a = WxObject (CMask a)

-- | Inheritance type of the Mask class.
type TMask a = TWxObject (CMask a)

-- | Abstract type of the Mask class.
data CMask a
CMask :: CMask a

-- | Pointer to an object of type <a>MaximizeEvent</a>, derived from
--   <a>Event</a>.
type MaximizeEvent a = Event (CMaximizeEvent a)

-- | Inheritance type of the MaximizeEvent class.
type TMaximizeEvent a = TEvent (CMaximizeEvent a)

-- | Abstract type of the MaximizeEvent class.
data CMaximizeEvent a
CMaximizeEvent :: CMaximizeEvent a

-- | Pointer to an object of type <a>MediaCtrl</a>, derived from
--   <a>Window</a>.
type MediaCtrl a = Window (CMediaCtrl a)

-- | Inheritance type of the MediaCtrl class.
type TMediaCtrl a = TWindow (CMediaCtrl a)

-- | Abstract type of the MediaCtrl class.
data CMediaCtrl a
CMediaCtrl :: CMediaCtrl a

-- | Pointer to an object of type <a>MediaEvent</a>, derived from
--   <a>NotifyEvent</a>.
type MediaEvent a = NotifyEvent (CMediaEvent a)

-- | Inheritance type of the MediaEvent class.
type TMediaEvent a = TNotifyEvent (CMediaEvent a)

-- | Abstract type of the MediaEvent class.
data CMediaEvent a
CMediaEvent :: CMediaEvent a

-- | Pointer to an object of type <a>MemoryBuffer</a>.
type MemoryBuffer a = Object (CMemoryBuffer a)

-- | Inheritance type of the MemoryBuffer class.
type TMemoryBuffer a = CMemoryBuffer a

-- | Abstract type of the MemoryBuffer class.
data CMemoryBuffer a
CMemoryBuffer :: CMemoryBuffer a

-- | Pointer to an object of type <a>MemoryDC</a>, derived from <a>DC</a>.
type MemoryDC a = DC (CMemoryDC a)

-- | Inheritance type of the MemoryDC class.
type TMemoryDC a = TDC (CMemoryDC a)

-- | Abstract type of the MemoryDC class.
data CMemoryDC a
CMemoryDC :: CMemoryDC a

-- | Pointer to an object of type <a>MemoryFSHandler</a>, derived from
--   <a>FileSystemHandler</a>.
type MemoryFSHandler a = FileSystemHandler (CMemoryFSHandler a)

-- | Inheritance type of the MemoryFSHandler class.
type TMemoryFSHandler a = TFileSystemHandler (CMemoryFSHandler a)

-- | Abstract type of the MemoryFSHandler class.
data CMemoryFSHandler a
CMemoryFSHandler :: CMemoryFSHandler a

-- | Pointer to an object of type <a>MemoryInputStream</a>, derived from
--   <a>InputStream</a>.
type MemoryInputStream a = InputStream (CMemoryInputStream a)

-- | Inheritance type of the MemoryInputStream class.
type TMemoryInputStream a = TInputStream (CMemoryInputStream a)

-- | Abstract type of the MemoryInputStream class.
data CMemoryInputStream a
CMemoryInputStream :: CMemoryInputStream a

-- | Pointer to an object of type <a>MemoryOutputStream</a>, derived from
--   <a>OutputStream</a>.
type MemoryOutputStream a = OutputStream (CMemoryOutputStream a)

-- | Inheritance type of the MemoryOutputStream class.
type TMemoryOutputStream a = TOutputStream (CMemoryOutputStream a)

-- | Abstract type of the MemoryOutputStream class.
data CMemoryOutputStream a
CMemoryOutputStream :: CMemoryOutputStream a

-- | Pointer to an object of type <a>Menu</a>, derived from
--   <a>EvtHandler</a>.
type Menu a = EvtHandler (CMenu a)

-- | Inheritance type of the Menu class.
type TMenu a = TEvtHandler (CMenu a)

-- | Abstract type of the Menu class.
data CMenu a
CMenu :: CMenu a

-- | Pointer to an object of type <a>MenuBar</a>, derived from
--   <a>EvtHandler</a>.
type MenuBar a = EvtHandler (CMenuBar a)

-- | Inheritance type of the MenuBar class.
type TMenuBar a = TEvtHandler (CMenuBar a)

-- | Abstract type of the MenuBar class.
data CMenuBar a
CMenuBar :: CMenuBar a

-- | Pointer to an object of type <a>MenuEvent</a>, derived from
--   <a>Event</a>.
type MenuEvent a = Event (CMenuEvent a)

-- | Inheritance type of the MenuEvent class.
type TMenuEvent a = TEvent (CMenuEvent a)

-- | Abstract type of the MenuEvent class.
data CMenuEvent a
CMenuEvent :: CMenuEvent a

-- | Pointer to an object of type <a>MenuItem</a>, derived from
--   <a>WxObject</a>.
type MenuItem a = WxObject (CMenuItem a)

-- | Inheritance type of the MenuItem class.
type TMenuItem a = TWxObject (CMenuItem a)

-- | Abstract type of the MenuItem class.
data CMenuItem a
CMenuItem :: CMenuItem a

-- | Pointer to an object of type <a>MessageDialog</a>, derived from
--   <a>Dialog</a>.
type MessageDialog a = Dialog (CMessageDialog a)

-- | Inheritance type of the MessageDialog class.
type TMessageDialog a = TDialog (CMessageDialog a)

-- | Abstract type of the MessageDialog class.
data CMessageDialog a
CMessageDialog :: CMessageDialog a

-- | Pointer to an object of type <a>Metafile</a>, derived from
--   <a>WxObject</a>.
type Metafile a = WxObject (CMetafile a)

-- | Inheritance type of the Metafile class.
type TMetafile a = TWxObject (CMetafile a)

-- | Abstract type of the Metafile class.
data CMetafile a
CMetafile :: CMetafile a

-- | Pointer to an object of type <a>MetafileDC</a>, derived from
--   <a>DC</a>.
type MetafileDC a = DC (CMetafileDC a)

-- | Inheritance type of the MetafileDC class.
type TMetafileDC a = TDC (CMetafileDC a)

-- | Abstract type of the MetafileDC class.
data CMetafileDC a
CMetafileDC :: CMetafileDC a

-- | Pointer to an object of type <a>MimeTypesManager</a>.
type MimeTypesManager a = Object (CMimeTypesManager a)

-- | Inheritance type of the MimeTypesManager class.
type TMimeTypesManager a = CMimeTypesManager a

-- | Abstract type of the MimeTypesManager class.
data CMimeTypesManager a
CMimeTypesManager :: CMimeTypesManager a

-- | Pointer to an object of type <a>MiniFrame</a>, derived from
--   <a>Frame</a>.
type MiniFrame a = Frame (CMiniFrame a)

-- | Inheritance type of the MiniFrame class.
type TMiniFrame a = TFrame (CMiniFrame a)

-- | Abstract type of the MiniFrame class.
data CMiniFrame a
CMiniFrame :: CMiniFrame a

-- | Pointer to an object of type <a>MirrorDC</a>, derived from <a>DC</a>.
type MirrorDC a = DC (CMirrorDC a)

-- | Inheritance type of the MirrorDC class.
type TMirrorDC a = TDC (CMirrorDC a)

-- | Abstract type of the MirrorDC class.
data CMirrorDC a
CMirrorDC :: CMirrorDC a

-- | Pointer to an object of type <a>Module</a>, derived from
--   <a>WxObject</a>.
type Module a = WxObject (CModule a)

-- | Inheritance type of the Module class.
type TModule a = TWxObject (CModule a)

-- | Abstract type of the Module class.
data CModule a
CModule :: CModule a

-- | Pointer to an object of type <a>MouseCaptureChangedEvent</a>, derived
--   from <a>Event</a>.
type MouseCaptureChangedEvent a = Event (CMouseCaptureChangedEvent a)

-- | Inheritance type of the MouseCaptureChangedEvent class.
type TMouseCaptureChangedEvent a = TEvent (CMouseCaptureChangedEvent a)

-- | Abstract type of the MouseCaptureChangedEvent class.
data CMouseCaptureChangedEvent a
CMouseCaptureChangedEvent :: CMouseCaptureChangedEvent a

-- | Pointer to an object of type <a>MouseEvent</a>, derived from
--   <a>Event</a>.
type MouseEvent a = Event (CMouseEvent a)

-- | Inheritance type of the MouseEvent class.
type TMouseEvent a = TEvent (CMouseEvent a)

-- | Abstract type of the MouseEvent class.
data CMouseEvent a
CMouseEvent :: CMouseEvent a

-- | Pointer to an object of type <a>MoveEvent</a>, derived from
--   <a>Event</a>.
type MoveEvent a = Event (CMoveEvent a)

-- | Inheritance type of the MoveEvent class.
type TMoveEvent a = TEvent (CMoveEvent a)

-- | Abstract type of the MoveEvent class.
data CMoveEvent a
CMoveEvent :: CMoveEvent a

-- | Pointer to an object of type <a>MultiCellCanvas</a>, derived from
--   <a>FlexGridSizer</a>.
type MultiCellCanvas a = FlexGridSizer (CMultiCellCanvas a)

-- | Inheritance type of the MultiCellCanvas class.
type TMultiCellCanvas a = TFlexGridSizer (CMultiCellCanvas a)

-- | Abstract type of the MultiCellCanvas class.
data CMultiCellCanvas a
CMultiCellCanvas :: CMultiCellCanvas a

-- | Pointer to an object of type <a>MultiCellItemHandle</a>, derived from
--   <a>WxObject</a>.
type MultiCellItemHandle a = WxObject (CMultiCellItemHandle a)

-- | Inheritance type of the MultiCellItemHandle class.
type TMultiCellItemHandle a = TWxObject (CMultiCellItemHandle a)

-- | Abstract type of the MultiCellItemHandle class.
data CMultiCellItemHandle a
CMultiCellItemHandle :: CMultiCellItemHandle a

-- | Pointer to an object of type <a>MultiCellSizer</a>, derived from
--   <a>Sizer</a>.
type MultiCellSizer a = Sizer (CMultiCellSizer a)

-- | Inheritance type of the MultiCellSizer class.
type TMultiCellSizer a = TSizer (CMultiCellSizer a)

-- | Abstract type of the MultiCellSizer class.
data CMultiCellSizer a
CMultiCellSizer :: CMultiCellSizer a

-- | Pointer to an object of type <a>Mutex</a>.
type Mutex a = Object (CMutex a)

-- | Inheritance type of the Mutex class.
type TMutex a = CMutex a

-- | Abstract type of the Mutex class.
data CMutex a
CMutex :: CMutex a

-- | Pointer to an object of type <a>MutexLocker</a>.
type MutexLocker a = Object (CMutexLocker a)

-- | Inheritance type of the MutexLocker class.
type TMutexLocker a = CMutexLocker a

-- | Abstract type of the MutexLocker class.
data CMutexLocker a
CMutexLocker :: CMutexLocker a

-- | Pointer to an object of type <a>NavigationKeyEvent</a>, derived from
--   <a>Event</a>.
type NavigationKeyEvent a = Event (CNavigationKeyEvent a)

-- | Inheritance type of the NavigationKeyEvent class.
type TNavigationKeyEvent a = TEvent (CNavigationKeyEvent a)

-- | Abstract type of the NavigationKeyEvent class.
data CNavigationKeyEvent a
CNavigationKeyEvent :: CNavigationKeyEvent a

-- | Pointer to an object of type <a>NewBitmapButton</a>, derived from
--   <a>Panel</a>.
type NewBitmapButton a = Panel (CNewBitmapButton a)

-- | Inheritance type of the NewBitmapButton class.
type TNewBitmapButton a = TPanel (CNewBitmapButton a)

-- | Abstract type of the NewBitmapButton class.
data CNewBitmapButton a
CNewBitmapButton :: CNewBitmapButton a

-- | Pointer to an object of type <a>NodeBase</a>.
type NodeBase a = Object (CNodeBase a)

-- | Inheritance type of the NodeBase class.
type TNodeBase a = CNodeBase a

-- | Abstract type of the NodeBase class.
data CNodeBase a
CNodeBase :: CNodeBase a

-- | Pointer to an object of type <a>Notebook</a>, derived from
--   <a>Control</a>.
type Notebook a = Control (CNotebook a)

-- | Inheritance type of the Notebook class.
type TNotebook a = TControl (CNotebook a)

-- | Abstract type of the Notebook class.
data CNotebook a
CNotebook :: CNotebook a

-- | Pointer to an object of type <a>NotebookEvent</a>, derived from
--   <a>NotifyEvent</a>.
type NotebookEvent a = NotifyEvent (CNotebookEvent a)

-- | Inheritance type of the NotebookEvent class.
type TNotebookEvent a = TNotifyEvent (CNotebookEvent a)

-- | Abstract type of the NotebookEvent class.
data CNotebookEvent a
CNotebookEvent :: CNotebookEvent a

-- | Pointer to an object of type <a>NotifyEvent</a>, derived from
--   <a>CommandEvent</a>.
type NotifyEvent a = CommandEvent (CNotifyEvent a)

-- | Inheritance type of the NotifyEvent class.
type TNotifyEvent a = TCommandEvent (CNotifyEvent a)

-- | Abstract type of the NotifyEvent class.
data CNotifyEvent a
CNotifyEvent :: CNotifyEvent a

-- | Pointer to an object of type <a>ObjectRefData</a>.
type ObjectRefData a = Object (CObjectRefData a)

-- | Inheritance type of the ObjectRefData class.
type TObjectRefData a = CObjectRefData a

-- | Abstract type of the ObjectRefData class.
data CObjectRefData a
CObjectRefData :: CObjectRefData a

-- | Pointer to an object of type <a>OutputStream</a>, derived from
--   <a>StreamBase</a>.
type OutputStream a = StreamBase (COutputStream a)

-- | Inheritance type of the OutputStream class.
type TOutputStream a = TStreamBase (COutputStream a)

-- | Abstract type of the OutputStream class.
data COutputStream a
COutputStream :: COutputStream a

-- | Pointer to an object of type <a>PGProperty</a>, derived from
--   <a>WxObject</a>.
type PGProperty a = WxObject (CPGProperty a)

-- | Inheritance type of the PGProperty class.
type TPGProperty a = TWxObject (CPGProperty a)

-- | Abstract type of the PGProperty class.
data CPGProperty a
CPGProperty :: CPGProperty a

-- | Pointer to an object of type <a>PageSetupDialog</a>, derived from
--   <a>Dialog</a>.
type PageSetupDialog a = Dialog (CPageSetupDialog a)

-- | Inheritance type of the PageSetupDialog class.
type TPageSetupDialog a = TDialog (CPageSetupDialog a)

-- | Abstract type of the PageSetupDialog class.
data CPageSetupDialog a
CPageSetupDialog :: CPageSetupDialog a

-- | Pointer to an object of type <a>PageSetupDialogData</a>, derived from
--   <a>WxObject</a>.
type PageSetupDialogData a = WxObject (CPageSetupDialogData a)

-- | Inheritance type of the PageSetupDialogData class.
type TPageSetupDialogData a = TWxObject (CPageSetupDialogData a)

-- | Abstract type of the PageSetupDialogData class.
data CPageSetupDialogData a
CPageSetupDialogData :: CPageSetupDialogData a

-- | Pointer to an object of type <a>PaintDC</a>, derived from
--   <a>WindowDC</a>.
type PaintDC a = WindowDC (CPaintDC a)

-- | Inheritance type of the PaintDC class.
type TPaintDC a = TWindowDC (CPaintDC a)

-- | Abstract type of the PaintDC class.
data CPaintDC a
CPaintDC :: CPaintDC a

-- | Pointer to an object of type <a>PaintEvent</a>, derived from
--   <a>Event</a>.
type PaintEvent a = Event (CPaintEvent a)

-- | Inheritance type of the PaintEvent class.
type TPaintEvent a = TEvent (CPaintEvent a)

-- | Abstract type of the PaintEvent class.
data CPaintEvent a
CPaintEvent :: CPaintEvent a

-- | Pointer to an object of type <a>Palette</a>, derived from
--   <a>GDIObject</a>.
type Palette a = GDIObject (CPalette a)

-- | Inheritance type of the Palette class.
type TPalette a = TGDIObject (CPalette a)

-- | Abstract type of the Palette class.
data CPalette a
CPalette :: CPalette a

-- | Pointer to an object of type <a>PaletteChangedEvent</a>, derived from
--   <a>Event</a>.
type PaletteChangedEvent a = Event (CPaletteChangedEvent a)

-- | Inheritance type of the PaletteChangedEvent class.
type TPaletteChangedEvent a = TEvent (CPaletteChangedEvent a)

-- | Abstract type of the PaletteChangedEvent class.
data CPaletteChangedEvent a
CPaletteChangedEvent :: CPaletteChangedEvent a

-- | Pointer to an object of type <a>Panel</a>, derived from <a>Window</a>.
type Panel a = Window (CPanel a)

-- | Inheritance type of the Panel class.
type TPanel a = TWindow (CPanel a)

-- | Abstract type of the Panel class.
data CPanel a
CPanel :: CPanel a

-- | Pointer to an object of type <a>PathList</a>, derived from
--   <a>List</a>.
type PathList a = List (CPathList a)

-- | Inheritance type of the PathList class.
type TPathList a = TList (CPathList a)

-- | Abstract type of the PathList class.
data CPathList a
CPathList :: CPathList a

-- | Pointer to an object of type <a>Pen</a>, derived from
--   <a>GDIObject</a>.
type Pen a = GDIObject (CPen a)

-- | Inheritance type of the Pen class.
type TPen a = TGDIObject (CPen a)

-- | Abstract type of the Pen class.
data CPen a
CPen :: CPen a

-- | Pointer to an object of type <a>PenList</a>, derived from <a>List</a>.
type PenList a = List (CPenList a)

-- | Inheritance type of the PenList class.
type TPenList a = TList (CPenList a)

-- | Abstract type of the PenList class.
data CPenList a
CPenList :: CPenList a

-- | Pointer to an object of type <a>PickerBase</a>, derived from
--   <a>Control</a>.
type PickerBase a = Control (CPickerBase a)

-- | Inheritance type of the PickerBase class.
type TPickerBase a = TControl (CPickerBase a)

-- | Abstract type of the PickerBase class.
data CPickerBase a
CPickerBase :: CPickerBase a

-- | Pointer to an object of type <a>PlotCurve</a>, derived from
--   <a>WxObject</a>.
type PlotCurve a = WxObject (CPlotCurve a)

-- | Inheritance type of the PlotCurve class.
type TPlotCurve a = TWxObject (CPlotCurve a)

-- | Abstract type of the PlotCurve class.
data CPlotCurve a
CPlotCurve :: CPlotCurve a

-- | Pointer to an object of type <a>PlotEvent</a>, derived from
--   <a>NotifyEvent</a>.
type PlotEvent a = NotifyEvent (CPlotEvent a)

-- | Inheritance type of the PlotEvent class.
type TPlotEvent a = TNotifyEvent (CPlotEvent a)

-- | Abstract type of the PlotEvent class.
data CPlotEvent a
CPlotEvent :: CPlotEvent a

-- | Pointer to an object of type <a>PlotOnOffCurve</a>, derived from
--   <a>WxObject</a>.
type PlotOnOffCurve a = WxObject (CPlotOnOffCurve a)

-- | Inheritance type of the PlotOnOffCurve class.
type TPlotOnOffCurve a = TWxObject (CPlotOnOffCurve a)

-- | Abstract type of the PlotOnOffCurve class.
data CPlotOnOffCurve a
CPlotOnOffCurve :: CPlotOnOffCurve a

-- | Pointer to an object of type <a>PlotWindow</a>, derived from
--   <a>ScrolledWindow</a>.
type PlotWindow a = ScrolledWindow (CPlotWindow a)

-- | Inheritance type of the PlotWindow class.
type TPlotWindow a = TScrolledWindow (CPlotWindow a)

-- | Abstract type of the PlotWindow class.
data CPlotWindow a
CPlotWindow :: CPlotWindow a

-- | Pointer to an object of type <a>PopupTransientWindow</a>, derived from
--   <a>PopupWindow</a>.
type PopupTransientWindow a = PopupWindow (CPopupTransientWindow a)

-- | Inheritance type of the PopupTransientWindow class.
type TPopupTransientWindow a = TPopupWindow (CPopupTransientWindow a)

-- | Abstract type of the PopupTransientWindow class.
data CPopupTransientWindow a
CPopupTransientWindow :: CPopupTransientWindow a

-- | Pointer to an object of type <a>PopupWindow</a>, derived from
--   <a>Window</a>.
type PopupWindow a = Window (CPopupWindow a)

-- | Inheritance type of the PopupWindow class.
type TPopupWindow a = TWindow (CPopupWindow a)

-- | Abstract type of the PopupWindow class.
data CPopupWindow a
CPopupWindow :: CPopupWindow a

-- | Pointer to an object of type <a>PostScriptDC</a>, derived from
--   <a>DC</a>.
type PostScriptDC a = DC (CPostScriptDC a)

-- | Inheritance type of the PostScriptDC class.
type TPostScriptDC a = TDC (CPostScriptDC a)

-- | Abstract type of the PostScriptDC class.
data CPostScriptDC a
CPostScriptDC :: CPostScriptDC a

-- | Pointer to an object of type <a>PostScriptPrintNativeData</a>, derived
--   from <a>WxObject</a>.
type PostScriptPrintNativeData a = WxObject (CPostScriptPrintNativeData a)

-- | Inheritance type of the PostScriptPrintNativeData class.
type TPostScriptPrintNativeData a = TWxObject (CPostScriptPrintNativeData a)

-- | Abstract type of the PostScriptPrintNativeData class.
data CPostScriptPrintNativeData a
CPostScriptPrintNativeData :: CPostScriptPrintNativeData a

-- | Pointer to an object of type <a>PreviewCanvas</a>, derived from
--   <a>ScrolledWindow</a>.
type PreviewCanvas a = ScrolledWindow (CPreviewCanvas a)

-- | Inheritance type of the PreviewCanvas class.
type TPreviewCanvas a = TScrolledWindow (CPreviewCanvas a)

-- | Abstract type of the PreviewCanvas class.
data CPreviewCanvas a
CPreviewCanvas :: CPreviewCanvas a

-- | Pointer to an object of type <a>PreviewControlBar</a>, derived from
--   <a>Panel</a>.
type PreviewControlBar a = Panel (CPreviewControlBar a)

-- | Inheritance type of the PreviewControlBar class.
type TPreviewControlBar a = TPanel (CPreviewControlBar a)

-- | Abstract type of the PreviewControlBar class.
data CPreviewControlBar a
CPreviewControlBar :: CPreviewControlBar a

-- | Pointer to an object of type <a>PreviewFrame</a>, derived from
--   <a>Frame</a>.
type PreviewFrame a = Frame (CPreviewFrame a)

-- | Inheritance type of the PreviewFrame class.
type TPreviewFrame a = TFrame (CPreviewFrame a)

-- | Abstract type of the PreviewFrame class.
data CPreviewFrame a
CPreviewFrame :: CPreviewFrame a

-- | Pointer to an object of type <a>PrintData</a>, derived from
--   <a>WxObject</a>.
type PrintData a = WxObject (CPrintData a)

-- | Inheritance type of the PrintData class.
type TPrintData a = TWxObject (CPrintData a)

-- | Abstract type of the PrintData class.
data CPrintData a
CPrintData :: CPrintData a

-- | Pointer to an object of type <a>PrintDialog</a>, derived from
--   <a>Dialog</a>.
type PrintDialog a = Dialog (CPrintDialog a)

-- | Inheritance type of the PrintDialog class.
type TPrintDialog a = TDialog (CPrintDialog a)

-- | Abstract type of the PrintDialog class.
data CPrintDialog a
CPrintDialog :: CPrintDialog a

-- | Pointer to an object of type <a>PrintDialogData</a>, derived from
--   <a>WxObject</a>.
type PrintDialogData a = WxObject (CPrintDialogData a)

-- | Inheritance type of the PrintDialogData class.
type TPrintDialogData a = TWxObject (CPrintDialogData a)

-- | Abstract type of the PrintDialogData class.
data CPrintDialogData a
CPrintDialogData :: CPrintDialogData a

-- | Pointer to an object of type <a>PrintPreview</a>, derived from
--   <a>WxObject</a>.
type PrintPreview a = WxObject (CPrintPreview a)

-- | Inheritance type of the PrintPreview class.
type TPrintPreview a = TWxObject (CPrintPreview a)

-- | Abstract type of the PrintPreview class.
data CPrintPreview a
CPrintPreview :: CPrintPreview a

-- | Pointer to an object of type <a>Printer</a>, derived from
--   <a>WxObject</a>.
type Printer a = WxObject (CPrinter a)

-- | Inheritance type of the Printer class.
type TPrinter a = TWxObject (CPrinter a)

-- | Abstract type of the Printer class.
data CPrinter a
CPrinter :: CPrinter a

-- | Pointer to an object of type <a>PrinterDC</a>, derived from <a>DC</a>.
type PrinterDC a = DC (CPrinterDC a)

-- | Inheritance type of the PrinterDC class.
type TPrinterDC a = TDC (CPrinterDC a)

-- | Abstract type of the PrinterDC class.
data CPrinterDC a
CPrinterDC :: CPrinterDC a

-- | Pointer to an object of type <a>Printout</a>, derived from
--   <a>WxObject</a>.
type Printout a = WxObject (CPrintout a)

-- | Inheritance type of the Printout class.
type TPrintout a = TWxObject (CPrintout a)

-- | Abstract type of the Printout class.
data CPrintout a
CPrintout :: CPrintout a

-- | Pointer to an object of type <a>PrivateDropTarget</a>, derived from
--   <a>DropTarget</a>.
type PrivateDropTarget a = DropTarget (CPrivateDropTarget a)

-- | Inheritance type of the PrivateDropTarget class.
type TPrivateDropTarget a = TDropTarget (CPrivateDropTarget a)

-- | Abstract type of the PrivateDropTarget class.
data CPrivateDropTarget a
CPrivateDropTarget :: CPrivateDropTarget a

-- | Pointer to an object of type <a>Process</a>, derived from
--   <a>EvtHandler</a>.
type Process a = EvtHandler (CProcess a)

-- | Inheritance type of the Process class.
type TProcess a = TEvtHandler (CProcess a)

-- | Abstract type of the Process class.
data CProcess a
CProcess :: CProcess a

-- | Pointer to an object of type <a>ProcessEvent</a>, derived from
--   <a>Event</a>.
type ProcessEvent a = Event (CProcessEvent a)

-- | Inheritance type of the ProcessEvent class.
type TProcessEvent a = TEvent (CProcessEvent a)

-- | Abstract type of the ProcessEvent class.
data CProcessEvent a
CProcessEvent :: CProcessEvent a

-- | Pointer to an object of type <a>ProgressDialog</a>, derived from
--   <a>Frame</a>.
type ProgressDialog a = Frame (CProgressDialog a)

-- | Inheritance type of the ProgressDialog class.
type TProgressDialog a = TFrame (CProgressDialog a)

-- | Abstract type of the ProgressDialog class.
data CProgressDialog a
CProgressDialog :: CProgressDialog a

-- | Pointer to an object of type <a>PropertyCategory</a>, derived from
--   <a>PGProperty</a>.
type PropertyCategory a = PGProperty (CPropertyCategory a)

-- | Inheritance type of the PropertyCategory class.
type TPropertyCategory a = TPGProperty (CPropertyCategory a)

-- | Abstract type of the PropertyCategory class.
data CPropertyCategory a
CPropertyCategory :: CPropertyCategory a

-- | Pointer to an object of type <a>PropertyGrid</a>, derived from
--   <a>Control</a>.
type PropertyGrid a = Control (CPropertyGrid a)

-- | Inheritance type of the PropertyGrid class.
type TPropertyGrid a = TControl (CPropertyGrid a)

-- | Abstract type of the PropertyGrid class.
data CPropertyGrid a
CPropertyGrid :: CPropertyGrid a

-- | Pointer to an object of type <a>PropertyGridEvent</a>, derived from
--   <a>NotifyEvent</a>.
type PropertyGridEvent a = NotifyEvent (CPropertyGridEvent a)

-- | Inheritance type of the PropertyGridEvent class.
type TPropertyGridEvent a = TNotifyEvent (CPropertyGridEvent a)

-- | Abstract type of the PropertyGridEvent class.
data CPropertyGridEvent a
CPropertyGridEvent :: CPropertyGridEvent a

-- | Pointer to an object of type <a>Protocol</a>, derived from
--   <a>SocketClient</a>.
type Protocol a = SocketClient (CProtocol a)

-- | Inheritance type of the Protocol class.
type TProtocol a = TSocketClient (CProtocol a)

-- | Abstract type of the Protocol class.
data CProtocol a
CProtocol :: CProtocol a

-- | Pointer to an object of type <a>Quantize</a>, derived from
--   <a>WxObject</a>.
type Quantize a = WxObject (CQuantize a)

-- | Inheritance type of the Quantize class.
type TQuantize a = TWxObject (CQuantize a)

-- | Abstract type of the Quantize class.
data CQuantize a
CQuantize :: CQuantize a

-- | Pointer to an object of type <a>QueryCol</a>, derived from
--   <a>WxObject</a>.
type QueryCol a = WxObject (CQueryCol a)

-- | Inheritance type of the QueryCol class.
type TQueryCol a = TWxObject (CQueryCol a)

-- | Abstract type of the QueryCol class.
data CQueryCol a
CQueryCol :: CQueryCol a

-- | Pointer to an object of type <a>QueryField</a>, derived from
--   <a>WxObject</a>.
type QueryField a = WxObject (CQueryField a)

-- | Inheritance type of the QueryField class.
type TQueryField a = TWxObject (CQueryField a)

-- | Abstract type of the QueryField class.
data CQueryField a
CQueryField :: CQueryField a

-- | Pointer to an object of type <a>QueryLayoutInfoEvent</a>, derived from
--   <a>Event</a>.
type QueryLayoutInfoEvent a = Event (CQueryLayoutInfoEvent a)

-- | Inheritance type of the QueryLayoutInfoEvent class.
type TQueryLayoutInfoEvent a = TEvent (CQueryLayoutInfoEvent a)

-- | Abstract type of the QueryLayoutInfoEvent class.
data CQueryLayoutInfoEvent a
CQueryLayoutInfoEvent :: CQueryLayoutInfoEvent a

-- | Pointer to an object of type <a>QueryNewPaletteEvent</a>, derived from
--   <a>Event</a>.
type QueryNewPaletteEvent a = Event (CQueryNewPaletteEvent a)

-- | Inheritance type of the QueryNewPaletteEvent class.
type TQueryNewPaletteEvent a = TEvent (CQueryNewPaletteEvent a)

-- | Abstract type of the QueryNewPaletteEvent class.
data CQueryNewPaletteEvent a
CQueryNewPaletteEvent :: CQueryNewPaletteEvent a

-- | Pointer to an object of type <a>RadioBox</a>, derived from
--   <a>Control</a>.
type RadioBox a = Control (CRadioBox a)

-- | Inheritance type of the RadioBox class.
type TRadioBox a = TControl (CRadioBox a)

-- | Abstract type of the RadioBox class.
data CRadioBox a
CRadioBox :: CRadioBox a

-- | Pointer to an object of type <a>RadioButton</a>, derived from
--   <a>Control</a>.
type RadioButton a = Control (CRadioButton a)

-- | Inheritance type of the RadioButton class.
type TRadioButton a = TControl (CRadioButton a)

-- | Abstract type of the RadioButton class.
data CRadioButton a
CRadioButton :: CRadioButton a

-- | Pointer to an object of type <a>RealPoint</a>.
type RealPoint a = Object (CRealPoint a)

-- | Inheritance type of the RealPoint class.
type TRealPoint a = CRealPoint a

-- | Abstract type of the RealPoint class.
data CRealPoint a
CRealPoint :: CRealPoint a

-- | Pointer to an object of type <a>RecordSet</a>, derived from
--   <a>WxObject</a>.
type RecordSet a = WxObject (CRecordSet a)

-- | Inheritance type of the RecordSet class.
type TRecordSet a = TWxObject (CRecordSet a)

-- | Abstract type of the RecordSet class.
data CRecordSet a
CRecordSet :: CRecordSet a

-- | Pointer to an object of type <a>RegEx</a>.
type RegEx a = Object (CRegEx a)

-- | Inheritance type of the RegEx class.
type TRegEx a = CRegEx a

-- | Abstract type of the RegEx class.
data CRegEx a
CRegEx :: CRegEx a

-- | Pointer to an object of type <a>Region</a>, derived from
--   <a>GDIObject</a>.
type Region a = GDIObject (CRegion a)

-- | Inheritance type of the Region class.
type TRegion a = TGDIObject (CRegion a)

-- | Abstract type of the Region class.
data CRegion a
CRegion :: CRegion a

-- | Pointer to an object of type <a>RegionIterator</a>, derived from
--   <a>WxObject</a>.
type RegionIterator a = WxObject (CRegionIterator a)

-- | Inheritance type of the RegionIterator class.
type TRegionIterator a = TWxObject (CRegionIterator a)

-- | Abstract type of the RegionIterator class.
data CRegionIterator a
CRegionIterator :: CRegionIterator a

-- | Pointer to an object of type <a>RemotelyScrolledTreeCtrl</a>, derived
--   from <a>TreeCtrl</a>.
type RemotelyScrolledTreeCtrl a = TreeCtrl (CRemotelyScrolledTreeCtrl a)

-- | Inheritance type of the RemotelyScrolledTreeCtrl class.
type TRemotelyScrolledTreeCtrl a = TTreeCtrl (CRemotelyScrolledTreeCtrl a)

-- | Abstract type of the RemotelyScrolledTreeCtrl class.
data CRemotelyScrolledTreeCtrl a
CRemotelyScrolledTreeCtrl :: CRemotelyScrolledTreeCtrl a

-- | Pointer to an object of type <a>STCDoc</a>.
type STCDoc a = Object (CSTCDoc a)

-- | Inheritance type of the STCDoc class.
type TSTCDoc a = CSTCDoc a

-- | Abstract type of the STCDoc class.
data CSTCDoc a
CSTCDoc :: CSTCDoc a

-- | Pointer to an object of type <a>SVGFileDC</a>, derived from <a>DC</a>.
type SVGFileDC a = DC (CSVGFileDC a)

-- | Inheritance type of the SVGFileDC class.
type TSVGFileDC a = TDC (CSVGFileDC a)

-- | Abstract type of the SVGFileDC class.
data CSVGFileDC a
CSVGFileDC :: CSVGFileDC a

-- | Pointer to an object of type <a>SashEvent</a>, derived from
--   <a>Event</a>.
type SashEvent a = Event (CSashEvent a)

-- | Inheritance type of the SashEvent class.
type TSashEvent a = TEvent (CSashEvent a)

-- | Abstract type of the SashEvent class.
data CSashEvent a
CSashEvent :: CSashEvent a

-- | Pointer to an object of type <a>SashLayoutWindow</a>, derived from
--   <a>SashWindow</a>.
type SashLayoutWindow a = SashWindow (CSashLayoutWindow a)

-- | Inheritance type of the SashLayoutWindow class.
type TSashLayoutWindow a = TSashWindow (CSashLayoutWindow a)

-- | Abstract type of the SashLayoutWindow class.
data CSashLayoutWindow a
CSashLayoutWindow :: CSashLayoutWindow a

-- | Pointer to an object of type <a>SashWindow</a>, derived from
--   <a>Window</a>.
type SashWindow a = Window (CSashWindow a)

-- | Inheritance type of the SashWindow class.
type TSashWindow a = TWindow (CSashWindow a)

-- | Abstract type of the SashWindow class.
data CSashWindow a
CSashWindow :: CSashWindow a

-- | Pointer to an object of type <a>ScopedArray</a>.
type ScopedArray a = Object (CScopedArray a)

-- | Inheritance type of the ScopedArray class.
type TScopedArray a = CScopedArray a

-- | Abstract type of the ScopedArray class.
data CScopedArray a
CScopedArray :: CScopedArray a

-- | Pointer to an object of type <a>ScopedPtr</a>.
type ScopedPtr a = Object (CScopedPtr a)

-- | Inheritance type of the ScopedPtr class.
type TScopedPtr a = CScopedPtr a

-- | Abstract type of the ScopedPtr class.
data CScopedPtr a
CScopedPtr :: CScopedPtr a

-- | Pointer to an object of type <a>ScreenDC</a>, derived from <a>DC</a>.
type ScreenDC a = DC (CScreenDC a)

-- | Inheritance type of the ScreenDC class.
type TScreenDC a = TDC (CScreenDC a)

-- | Abstract type of the ScreenDC class.
data CScreenDC a
CScreenDC :: CScreenDC a

-- | Pointer to an object of type <a>ScrollBar</a>, derived from
--   <a>Control</a>.
type ScrollBar a = Control (CScrollBar a)

-- | Inheritance type of the ScrollBar class.
type TScrollBar a = TControl (CScrollBar a)

-- | Abstract type of the ScrollBar class.
data CScrollBar a
CScrollBar :: CScrollBar a

-- | Pointer to an object of type <a>ScrollEvent</a>, derived from
--   <a>Event</a>.
type ScrollEvent a = Event (CScrollEvent a)

-- | Inheritance type of the ScrollEvent class.
type TScrollEvent a = TEvent (CScrollEvent a)

-- | Abstract type of the ScrollEvent class.
data CScrollEvent a
CScrollEvent :: CScrollEvent a

-- | Pointer to an object of type <a>ScrollWinEvent</a>, derived from
--   <a>Event</a>.
type ScrollWinEvent a = Event (CScrollWinEvent a)

-- | Inheritance type of the ScrollWinEvent class.
type TScrollWinEvent a = TEvent (CScrollWinEvent a)

-- | Abstract type of the ScrollWinEvent class.
data CScrollWinEvent a
CScrollWinEvent :: CScrollWinEvent a

-- | Pointer to an object of type <a>ScrolledWindow</a>, derived from
--   <a>Panel</a>.
type ScrolledWindow a = Panel (CScrolledWindow a)

-- | Inheritance type of the ScrolledWindow class.
type TScrolledWindow a = TPanel (CScrolledWindow a)

-- | Abstract type of the ScrolledWindow class.
data CScrolledWindow a
CScrolledWindow :: CScrolledWindow a

-- | Pointer to an object of type <a>Semaphore</a>.
type Semaphore a = Object (CSemaphore a)

-- | Inheritance type of the Semaphore class.
type TSemaphore a = CSemaphore a

-- | Abstract type of the Semaphore class.
data CSemaphore a
CSemaphore :: CSemaphore a

-- | Pointer to an object of type <a>Server</a>, derived from
--   <a>ServerBase</a>.
type Server a = ServerBase (CServer a)

-- | Inheritance type of the Server class.
type TServer a = TServerBase (CServer a)

-- | Abstract type of the Server class.
data CServer a
CServer :: CServer a

-- | Pointer to an object of type <a>ServerBase</a>, derived from
--   <a>WxObject</a>.
type ServerBase a = WxObject (CServerBase a)

-- | Inheritance type of the ServerBase class.
type TServerBase a = TWxObject (CServerBase a)

-- | Abstract type of the ServerBase class.
data CServerBase a
CServerBase :: CServerBase a

-- | Pointer to an object of type <a>SetCursorEvent</a>, derived from
--   <a>Event</a>.
type SetCursorEvent a = Event (CSetCursorEvent a)

-- | Inheritance type of the SetCursorEvent class.
type TSetCursorEvent a = TEvent (CSetCursorEvent a)

-- | Abstract type of the SetCursorEvent class.
data CSetCursorEvent a
CSetCursorEvent :: CSetCursorEvent a

-- | Pointer to an object of type <a>ShowEvent</a>, derived from
--   <a>Event</a>.
type ShowEvent a = Event (CShowEvent a)

-- | Inheritance type of the ShowEvent class.
type TShowEvent a = TEvent (CShowEvent a)

-- | Abstract type of the ShowEvent class.
data CShowEvent a
CShowEvent :: CShowEvent a

-- | Pointer to an object of type <a>SimpleHelpProvider</a>, derived from
--   <a>HelpProvider</a>.
type SimpleHelpProvider a = HelpProvider (CSimpleHelpProvider a)

-- | Inheritance type of the SimpleHelpProvider class.
type TSimpleHelpProvider a = THelpProvider (CSimpleHelpProvider a)

-- | Abstract type of the SimpleHelpProvider class.
data CSimpleHelpProvider a
CSimpleHelpProvider :: CSimpleHelpProvider a

-- | Pointer to an object of type <a>SingleChoiceDialog</a>, derived from
--   <a>Dialog</a>.
type SingleChoiceDialog a = Dialog (CSingleChoiceDialog a)

-- | Inheritance type of the SingleChoiceDialog class.
type TSingleChoiceDialog a = TDialog (CSingleChoiceDialog a)

-- | Abstract type of the SingleChoiceDialog class.
data CSingleChoiceDialog a
CSingleChoiceDialog :: CSingleChoiceDialog a

-- | Pointer to an object of type <a>SingleInstanceChecker</a>.
type SingleInstanceChecker a = Object (CSingleInstanceChecker a)

-- | Inheritance type of the SingleInstanceChecker class.
type TSingleInstanceChecker a = CSingleInstanceChecker a

-- | Abstract type of the SingleInstanceChecker class.
data CSingleInstanceChecker a
CSingleInstanceChecker :: CSingleInstanceChecker a

-- | Pointer to an object of type <a>SizeEvent</a>, derived from
--   <a>Event</a>.
type SizeEvent a = Event (CSizeEvent a)

-- | Inheritance type of the SizeEvent class.
type TSizeEvent a = TEvent (CSizeEvent a)

-- | Abstract type of the SizeEvent class.
data CSizeEvent a
CSizeEvent :: CSizeEvent a

-- | Pointer to an object of type <a>Sizer</a>, derived from
--   <a>WxObject</a>.
type Sizer a = WxObject (CSizer a)

-- | Inheritance type of the Sizer class.
type TSizer a = TWxObject (CSizer a)

-- | Abstract type of the Sizer class.
data CSizer a
CSizer :: CSizer a

-- | Pointer to an object of type <a>SizerItem</a>, derived from
--   <a>WxObject</a>.
type SizerItem a = WxObject (CSizerItem a)

-- | Inheritance type of the SizerItem class.
type TSizerItem a = TWxObject (CSizerItem a)

-- | Abstract type of the SizerItem class.
data CSizerItem a
CSizerItem :: CSizerItem a

-- | Pointer to an object of type <a>Slider</a>, derived from
--   <a>Control</a>.
type Slider a = Control (CSlider a)

-- | Inheritance type of the Slider class.
type TSlider a = TControl (CSlider a)

-- | Abstract type of the Slider class.
data CSlider a
CSlider :: CSlider a

-- | Pointer to an object of type <a>Slider95</a>, derived from
--   <a>Slider</a>.
type Slider95 a = Slider (CSlider95 a)

-- | Inheritance type of the Slider95 class.
type TSlider95 a = TSlider (CSlider95 a)

-- | Abstract type of the Slider95 class.
data CSlider95 a
CSlider95 :: CSlider95 a

-- | Pointer to an object of type <a>SliderMSW</a>, derived from
--   <a>Slider</a>.
type SliderMSW a = Slider (CSliderMSW a)

-- | Inheritance type of the SliderMSW class.
type TSliderMSW a = TSlider (CSliderMSW a)

-- | Abstract type of the SliderMSW class.
data CSliderMSW a
CSliderMSW :: CSliderMSW a

-- | Pointer to an object of type <a>SockAddress</a>, derived from
--   <a>WxObject</a>.
type SockAddress a = WxObject (CSockAddress a)

-- | Inheritance type of the SockAddress class.
type TSockAddress a = TWxObject (CSockAddress a)

-- | Abstract type of the SockAddress class.
data CSockAddress a
CSockAddress :: CSockAddress a

-- | Pointer to an object of type <a>SocketBase</a>, derived from
--   <a>WxObject</a>.
type SocketBase a = WxObject (CSocketBase a)

-- | Inheritance type of the SocketBase class.
type TSocketBase a = TWxObject (CSocketBase a)

-- | Abstract type of the SocketBase class.
data CSocketBase a
CSocketBase :: CSocketBase a

-- | Pointer to an object of type <a>SocketClient</a>, derived from
--   <a>SocketBase</a>.
type SocketClient a = SocketBase (CSocketClient a)

-- | Inheritance type of the SocketClient class.
type TSocketClient a = TSocketBase (CSocketClient a)

-- | Abstract type of the SocketClient class.
data CSocketClient a
CSocketClient :: CSocketClient a

-- | Pointer to an object of type <a>SocketEvent</a>, derived from
--   <a>Event</a>.
type SocketEvent a = Event (CSocketEvent a)

-- | Inheritance type of the SocketEvent class.
type TSocketEvent a = TEvent (CSocketEvent a)

-- | Abstract type of the SocketEvent class.
data CSocketEvent a
CSocketEvent :: CSocketEvent a

-- | Pointer to an object of type <a>SocketInputStream</a>, derived from
--   <a>InputStream</a>.
type SocketInputStream a = InputStream (CSocketInputStream a)

-- | Inheritance type of the SocketInputStream class.
type TSocketInputStream a = TInputStream (CSocketInputStream a)

-- | Abstract type of the SocketInputStream class.
data CSocketInputStream a
CSocketInputStream :: CSocketInputStream a

-- | Pointer to an object of type <a>SocketOutputStream</a>, derived from
--   <a>OutputStream</a>.
type SocketOutputStream a = OutputStream (CSocketOutputStream a)

-- | Inheritance type of the SocketOutputStream class.
type TSocketOutputStream a = TOutputStream (CSocketOutputStream a)

-- | Abstract type of the SocketOutputStream class.
data CSocketOutputStream a
CSocketOutputStream :: CSocketOutputStream a

-- | Pointer to an object of type <a>SocketServer</a>, derived from
--   <a>SocketBase</a>.
type SocketServer a = SocketBase (CSocketServer a)

-- | Inheritance type of the SocketServer class.
type TSocketServer a = TSocketBase (CSocketServer a)

-- | Abstract type of the SocketServer class.
data CSocketServer a
CSocketServer :: CSocketServer a

-- | Pointer to an object of type <a>Sound</a>, derived from
--   <a>WxObject</a>.
type Sound a = WxObject (CSound a)

-- | Inheritance type of the Sound class.
type TSound a = TWxObject (CSound a)

-- | Abstract type of the Sound class.
data CSound a
CSound :: CSound a

-- | Pointer to an object of type <a>SpinButton</a>, derived from
--   <a>Control</a>.
type SpinButton a = Control (CSpinButton a)

-- | Inheritance type of the SpinButton class.
type TSpinButton a = TControl (CSpinButton a)

-- | Abstract type of the SpinButton class.
data CSpinButton a
CSpinButton :: CSpinButton a

-- | Pointer to an object of type <a>SpinCtrl</a>, derived from
--   <a>Control</a>.
type SpinCtrl a = Control (CSpinCtrl a)

-- | Inheritance type of the SpinCtrl class.
type TSpinCtrl a = TControl (CSpinCtrl a)

-- | Abstract type of the SpinCtrl class.
data CSpinCtrl a
CSpinCtrl :: CSpinCtrl a

-- | Pointer to an object of type <a>SpinEvent</a>, derived from
--   <a>NotifyEvent</a>.
type SpinEvent a = NotifyEvent (CSpinEvent a)

-- | Inheritance type of the SpinEvent class.
type TSpinEvent a = TNotifyEvent (CSpinEvent a)

-- | Abstract type of the SpinEvent class.
data CSpinEvent a
CSpinEvent :: CSpinEvent a

-- | Pointer to an object of type <a>SplashScreen</a>, derived from
--   <a>Frame</a>.
type SplashScreen a = Frame (CSplashScreen a)

-- | Inheritance type of the SplashScreen class.
type TSplashScreen a = TFrame (CSplashScreen a)

-- | Abstract type of the SplashScreen class.
data CSplashScreen a
CSplashScreen :: CSplashScreen a

-- | Pointer to an object of type <a>SplitterEvent</a>, derived from
--   <a>NotifyEvent</a>.
type SplitterEvent a = NotifyEvent (CSplitterEvent a)

-- | Inheritance type of the SplitterEvent class.
type TSplitterEvent a = TNotifyEvent (CSplitterEvent a)

-- | Abstract type of the SplitterEvent class.
data CSplitterEvent a
CSplitterEvent :: CSplitterEvent a

-- | Pointer to an object of type <a>SplitterScrolledWindow</a>, derived
--   from <a>ScrolledWindow</a>.
type SplitterScrolledWindow a = ScrolledWindow (CSplitterScrolledWindow a)

-- | Inheritance type of the SplitterScrolledWindow class.
type TSplitterScrolledWindow a = TScrolledWindow (CSplitterScrolledWindow a)

-- | Abstract type of the SplitterScrolledWindow class.
data CSplitterScrolledWindow a
CSplitterScrolledWindow :: CSplitterScrolledWindow a

-- | Pointer to an object of type <a>SplitterWindow</a>, derived from
--   <a>Window</a>.
type SplitterWindow a = Window (CSplitterWindow a)

-- | Inheritance type of the SplitterWindow class.
type TSplitterWindow a = TWindow (CSplitterWindow a)

-- | Abstract type of the SplitterWindow class.
data CSplitterWindow a
CSplitterWindow :: CSplitterWindow a

-- | Pointer to an object of type <a>StaticBitmap</a>, derived from
--   <a>Control</a>.
type StaticBitmap a = Control (CStaticBitmap a)

-- | Inheritance type of the StaticBitmap class.
type TStaticBitmap a = TControl (CStaticBitmap a)

-- | Abstract type of the StaticBitmap class.
data CStaticBitmap a
CStaticBitmap :: CStaticBitmap a

-- | Pointer to an object of type <a>StaticBox</a>, derived from
--   <a>Control</a>.
type StaticBox a = Control (CStaticBox a)

-- | Inheritance type of the StaticBox class.
type TStaticBox a = TControl (CStaticBox a)

-- | Abstract type of the StaticBox class.
data CStaticBox a
CStaticBox :: CStaticBox a

-- | Pointer to an object of type <a>StaticBoxSizer</a>, derived from
--   <a>BoxSizer</a>.
type StaticBoxSizer a = BoxSizer (CStaticBoxSizer a)

-- | Inheritance type of the StaticBoxSizer class.
type TStaticBoxSizer a = TBoxSizer (CStaticBoxSizer a)

-- | Abstract type of the StaticBoxSizer class.
data CStaticBoxSizer a
CStaticBoxSizer :: CStaticBoxSizer a

-- | Pointer to an object of type <a>StaticLine</a>, derived from
--   <a>Control</a>.
type StaticLine a = Control (CStaticLine a)

-- | Inheritance type of the StaticLine class.
type TStaticLine a = TControl (CStaticLine a)

-- | Abstract type of the StaticLine class.
data CStaticLine a
CStaticLine :: CStaticLine a

-- | Pointer to an object of type <a>StaticText</a>, derived from
--   <a>Control</a>.
type StaticText a = Control (CStaticText a)

-- | Inheritance type of the StaticText class.
type TStaticText a = TControl (CStaticText a)

-- | Abstract type of the StaticText class.
data CStaticText a
CStaticText :: CStaticText a

-- | Pointer to an object of type <a>StatusBar</a>, derived from
--   <a>Window</a>.
type StatusBar a = Window (CStatusBar a)

-- | Inheritance type of the StatusBar class.
type TStatusBar a = TWindow (CStatusBar a)

-- | Abstract type of the StatusBar class.
data CStatusBar a
CStatusBar :: CStatusBar a

-- | Pointer to an object of type <a>StopWatch</a>.
type StopWatch a = Object (CStopWatch a)

-- | Inheritance type of the StopWatch class.
type TStopWatch a = CStopWatch a

-- | Abstract type of the StopWatch class.
data CStopWatch a
CStopWatch :: CStopWatch a

-- | Pointer to an object of type <a>StreamBase</a>.
type StreamBase a = Object (CStreamBase a)

-- | Inheritance type of the StreamBase class.
type TStreamBase a = CStreamBase a

-- | Abstract type of the StreamBase class.
data CStreamBase a
CStreamBase :: CStreamBase a

-- | Pointer to an object of type <a>StreamBuffer</a>.
type StreamBuffer a = Object (CStreamBuffer a)

-- | Inheritance type of the StreamBuffer class.
type TStreamBuffer a = CStreamBuffer a

-- | Abstract type of the StreamBuffer class.
data CStreamBuffer a
CStreamBuffer :: CStreamBuffer a

-- | Pointer to an object of type <a>StreamToTextRedirector</a>.
type StreamToTextRedirector a = Object (CStreamToTextRedirector a)

-- | Inheritance type of the StreamToTextRedirector class.
type TStreamToTextRedirector a = CStreamToTextRedirector a

-- | Abstract type of the StreamToTextRedirector class.
data CStreamToTextRedirector a
CStreamToTextRedirector :: CStreamToTextRedirector a

-- | Pointer to an object of type <a>StringBuffer</a>.
type StringBuffer a = Object (CStringBuffer a)

-- | Inheritance type of the StringBuffer class.
type TStringBuffer a = CStringBuffer a

-- | Abstract type of the StringBuffer class.
data CStringBuffer a
CStringBuffer :: CStringBuffer a

-- | Pointer to an object of type <a>StringClientData</a>, derived from
--   <a>ClientData</a>.
type StringClientData a = ClientData (CStringClientData a)

-- | Inheritance type of the StringClientData class.
type TStringClientData a = TClientData (CStringClientData a)

-- | Abstract type of the StringClientData class.
data CStringClientData a
CStringClientData :: CStringClientData a

-- | Pointer to an object of type <a>StringList</a>, derived from
--   <a>List</a>.
type StringList a = List (CStringList a)

-- | Inheritance type of the StringList class.
type TStringList a = TList (CStringList a)

-- | Abstract type of the StringList class.
data CStringList a
CStringList :: CStringList a

-- | Pointer to an object of type <a>StringProperty</a>, derived from
--   <a>PGProperty</a>.
type StringProperty a = PGProperty (CStringProperty a)

-- | Inheritance type of the StringProperty class.
type TStringProperty a = TPGProperty (CStringProperty a)

-- | Abstract type of the StringProperty class.
data CStringProperty a
CStringProperty :: CStringProperty a

-- | Pointer to an object of type <a>StringTokenizer</a>, derived from
--   <a>WxObject</a>.
type StringTokenizer a = WxObject (CStringTokenizer a)

-- | Inheritance type of the StringTokenizer class.
type TStringTokenizer a = TWxObject (CStringTokenizer a)

-- | Abstract type of the StringTokenizer class.
data CStringTokenizer a
CStringTokenizer :: CStringTokenizer a

-- | Pointer to an object of type <a>StyledTextCtrl</a>, derived from
--   <a>Control</a>.
type StyledTextCtrl a = Control (CStyledTextCtrl a)

-- | Inheritance type of the StyledTextCtrl class.
type TStyledTextCtrl a = TControl (CStyledTextCtrl a)

-- | Abstract type of the StyledTextCtrl class.
data CStyledTextCtrl a
CStyledTextCtrl :: CStyledTextCtrl a

-- | Pointer to an object of type <a>StyledTextEvent</a>, derived from
--   <a>CommandEvent</a>.
type StyledTextEvent a = CommandEvent (CStyledTextEvent a)

-- | Inheritance type of the StyledTextEvent class.
type TStyledTextEvent a = TCommandEvent (CStyledTextEvent a)

-- | Abstract type of the StyledTextEvent class.
data CStyledTextEvent a
CStyledTextEvent :: CStyledTextEvent a

-- | Pointer to an object of type <a>SysColourChangedEvent</a>, derived
--   from <a>Event</a>.
type SysColourChangedEvent a = Event (CSysColourChangedEvent a)

-- | Inheritance type of the SysColourChangedEvent class.
type TSysColourChangedEvent a = TEvent (CSysColourChangedEvent a)

-- | Abstract type of the SysColourChangedEvent class.
data CSysColourChangedEvent a
CSysColourChangedEvent :: CSysColourChangedEvent a

-- | Pointer to an object of type <a>SystemOptions</a>, derived from
--   <a>WxObject</a>.
type SystemOptions a = WxObject (CSystemOptions a)

-- | Inheritance type of the SystemOptions class.
type TSystemOptions a = TWxObject (CSystemOptions a)

-- | Abstract type of the SystemOptions class.
data CSystemOptions a
CSystemOptions :: CSystemOptions a

-- | Pointer to an object of type <a>SystemSettings</a>, derived from
--   <a>WxObject</a>.
type SystemSettings a = WxObject (CSystemSettings a)

-- | Inheritance type of the SystemSettings class.
type TSystemSettings a = TWxObject (CSystemSettings a)

-- | Abstract type of the SystemSettings class.
data CSystemSettings a
CSystemSettings :: CSystemSettings a

-- | Pointer to an object of type <a>TabCtrl</a>, derived from
--   <a>Control</a>.
type TabCtrl a = Control (CTabCtrl a)

-- | Inheritance type of the TabCtrl class.
type TTabCtrl a = TControl (CTabCtrl a)

-- | Abstract type of the TabCtrl class.
data CTabCtrl a
CTabCtrl :: CTabCtrl a

-- | Pointer to an object of type <a>TabEvent</a>, derived from
--   <a>CommandEvent</a>.
type TabEvent a = CommandEvent (CTabEvent a)

-- | Inheritance type of the TabEvent class.
type TTabEvent a = TCommandEvent (CTabEvent a)

-- | Abstract type of the TabEvent class.
data CTabEvent a
CTabEvent :: CTabEvent a

-- | Pointer to an object of type <a>TablesInUse</a>, derived from
--   <a>WxObject</a>.
type TablesInUse a = WxObject (CTablesInUse a)

-- | Inheritance type of the TablesInUse class.
type TTablesInUse a = TWxObject (CTablesInUse a)

-- | Abstract type of the TablesInUse class.
data CTablesInUse a
CTablesInUse :: CTablesInUse a

-- | Pointer to an object of type <a>TaskBarIcon</a>, derived from
--   <a>EvtHandler</a>.
type TaskBarIcon a = EvtHandler (CTaskBarIcon a)

-- | Inheritance type of the TaskBarIcon class.
type TTaskBarIcon a = TEvtHandler (CTaskBarIcon a)

-- | Abstract type of the TaskBarIcon class.
data CTaskBarIcon a
CTaskBarIcon :: CTaskBarIcon a

-- | Pointer to an object of type <a>TempFile</a>.
type TempFile a = Object (CTempFile a)

-- | Inheritance type of the TempFile class.
type TTempFile a = CTempFile a

-- | Abstract type of the TempFile class.
data CTempFile a
CTempFile :: CTempFile a

-- | Pointer to an object of type <a>TextAttr</a>.
type TextAttr a = Object (CTextAttr a)

-- | Inheritance type of the TextAttr class.
type TTextAttr a = CTextAttr a

-- | Abstract type of the TextAttr class.
data CTextAttr a
CTextAttr :: CTextAttr a

-- | Pointer to an object of type <a>TextCtrl</a>, derived from
--   <a>Control</a>.
type TextCtrl a = Control (CTextCtrl a)

-- | Inheritance type of the TextCtrl class.
type TTextCtrl a = TControl (CTextCtrl a)

-- | Abstract type of the TextCtrl class.
data CTextCtrl a
CTextCtrl :: CTextCtrl a

-- | Pointer to an object of type <a>TextDataObject</a>, derived from
--   <a>DataObjectSimple</a>.
type TextDataObject a = DataObjectSimple (CTextDataObject a)

-- | Inheritance type of the TextDataObject class.
type TTextDataObject a = TDataObjectSimple (CTextDataObject a)

-- | Abstract type of the TextDataObject class.
data CTextDataObject a
CTextDataObject :: CTextDataObject a

-- | Pointer to an object of type <a>TextDropTarget</a>, derived from
--   <a>DropTarget</a>.
type TextDropTarget a = DropTarget (CTextDropTarget a)

-- | Inheritance type of the TextDropTarget class.
type TTextDropTarget a = TDropTarget (CTextDropTarget a)

-- | Abstract type of the TextDropTarget class.
data CTextDropTarget a
CTextDropTarget :: CTextDropTarget a

-- | Pointer to an object of type <a>TextEntryDialog</a>, derived from
--   <a>Dialog</a>.
type TextEntryDialog a = Dialog (CTextEntryDialog a)

-- | Inheritance type of the TextEntryDialog class.
type TTextEntryDialog a = TDialog (CTextEntryDialog a)

-- | Abstract type of the TextEntryDialog class.
data CTextEntryDialog a
CTextEntryDialog :: CTextEntryDialog a

-- | Pointer to an object of type <a>TextFile</a>.
type TextFile a = Object (CTextFile a)

-- | Inheritance type of the TextFile class.
type TTextFile a = CTextFile a

-- | Abstract type of the TextFile class.
data CTextFile a
CTextFile :: CTextFile a

-- | Pointer to an object of type <a>TextInputStream</a>.
type TextInputStream a = Object (CTextInputStream a)

-- | Inheritance type of the TextInputStream class.
type TTextInputStream a = CTextInputStream a

-- | Abstract type of the TextInputStream class.
data CTextInputStream a
CTextInputStream :: CTextInputStream a

-- | Pointer to an object of type <a>TextOutputStream</a>.
type TextOutputStream a = Object (CTextOutputStream a)

-- | Inheritance type of the TextOutputStream class.
type TTextOutputStream a = CTextOutputStream a

-- | Abstract type of the TextOutputStream class.
data CTextOutputStream a
CTextOutputStream :: CTextOutputStream a

-- | Pointer to an object of type <a>TextValidator</a>, derived from
--   <a>Validator</a>.
type TextValidator a = Validator (CTextValidator a)

-- | Inheritance type of the TextValidator class.
type TTextValidator a = TValidator (CTextValidator a)

-- | Abstract type of the TextValidator class.
data CTextValidator a
CTextValidator :: CTextValidator a

-- | Pointer to an object of type <a>ThinSplitterWindow</a>, derived from
--   <a>SplitterWindow</a>.
type ThinSplitterWindow a = SplitterWindow (CThinSplitterWindow a)

-- | Inheritance type of the ThinSplitterWindow class.
type TThinSplitterWindow a = TSplitterWindow (CThinSplitterWindow a)

-- | Abstract type of the ThinSplitterWindow class.
data CThinSplitterWindow a
CThinSplitterWindow :: CThinSplitterWindow a

-- | Pointer to an object of type <a>Thread</a>.
type Thread a = Object (CThread a)

-- | Inheritance type of the Thread class.
type TThread a = CThread a

-- | Abstract type of the Thread class.
data CThread a
CThread :: CThread a

-- | Pointer to an object of type <a>Time</a>, derived from
--   <a>WxObject</a>.
type Time a = WxObject (CTime a)

-- | Inheritance type of the Time class.
type TTime a = TWxObject (CTime a)

-- | Abstract type of the Time class.
data CTime a
CTime :: CTime a

-- | Pointer to an object of type <a>TimeSpan</a>.
type TimeSpan a = Object (CTimeSpan a)

-- | Inheritance type of the TimeSpan class.
type TTimeSpan a = CTimeSpan a

-- | Abstract type of the TimeSpan class.
data CTimeSpan a
CTimeSpan :: CTimeSpan a

-- | Pointer to an object of type <a>Timer</a>, derived from
--   <a>WxObject</a>.
type Timer a = WxObject (CTimer a)

-- | Inheritance type of the Timer class.
type TTimer a = TWxObject (CTimer a)

-- | Abstract type of the Timer class.
data CTimer a
CTimer :: CTimer a

-- | Pointer to an object of type <a>TimerBase</a>, derived from
--   <a>WxObject</a>.
type TimerBase a = WxObject (CTimerBase a)

-- | Inheritance type of the TimerBase class.
type TTimerBase a = TWxObject (CTimerBase a)

-- | Abstract type of the TimerBase class.
data CTimerBase a
CTimerBase :: CTimerBase a

-- | Pointer to an object of type <a>TimerEvent</a>, derived from
--   <a>Event</a>.
type TimerEvent a = Event (CTimerEvent a)

-- | Inheritance type of the TimerEvent class.
type TTimerEvent a = TEvent (CTimerEvent a)

-- | Abstract type of the TimerEvent class.
data CTimerEvent a
CTimerEvent :: CTimerEvent a

-- | Pointer to an object of type <a>TimerEx</a>, derived from
--   <a>Timer</a>.
type TimerEx a = Timer (CTimerEx a)

-- | Inheritance type of the TimerEx class.
type TTimerEx a = TTimer (CTimerEx a)

-- | Abstract type of the TimerEx class.
data CTimerEx a
CTimerEx :: CTimerEx a

-- | Pointer to an object of type <a>TimerRunner</a>.
type TimerRunner a = Object (CTimerRunner a)

-- | Inheritance type of the TimerRunner class.
type TTimerRunner a = CTimerRunner a

-- | Abstract type of the TimerRunner class.
data CTimerRunner a
CTimerRunner :: CTimerRunner a

-- | Pointer to an object of type <a>TipProvider</a>.
type TipProvider a = Object (CTipProvider a)

-- | Inheritance type of the TipProvider class.
type TTipProvider a = CTipProvider a

-- | Abstract type of the TipProvider class.
data CTipProvider a
CTipProvider :: CTipProvider a

-- | Pointer to an object of type <a>TipWindow</a>, derived from
--   <a>PopupTransientWindow</a>.
type TipWindow a = PopupTransientWindow (CTipWindow a)

-- | Inheritance type of the TipWindow class.
type TTipWindow a = TPopupTransientWindow (CTipWindow a)

-- | Abstract type of the TipWindow class.
data CTipWindow a
CTipWindow :: CTipWindow a

-- | Pointer to an object of type <a>ToggleButton</a>, derived from
--   <a>Control</a>.
type ToggleButton a = Control (CToggleButton a)

-- | Inheritance type of the ToggleButton class.
type TToggleButton a = TControl (CToggleButton a)

-- | Abstract type of the ToggleButton class.
data CToggleButton a
CToggleButton :: CToggleButton a

-- | Pointer to an object of type <a>ToolBar</a>, derived from
--   <a>ToolBarBase</a>.
type ToolBar a = ToolBarBase (CToolBar a)

-- | Inheritance type of the ToolBar class.
type TToolBar a = TToolBarBase (CToolBar a)

-- | Abstract type of the ToolBar class.
data CToolBar a
CToolBar :: CToolBar a

-- | Pointer to an object of type <a>ToolBarBase</a>, derived from
--   <a>Control</a>.
type ToolBarBase a = Control (CToolBarBase a)

-- | Inheritance type of the ToolBarBase class.
type TToolBarBase a = TControl (CToolBarBase a)

-- | Abstract type of the ToolBarBase class.
data CToolBarBase a
CToolBarBase :: CToolBarBase a

-- | Pointer to an object of type <a>ToolLayoutItem</a>, derived from
--   <a>WxObject</a>.
type ToolLayoutItem a = WxObject (CToolLayoutItem a)

-- | Inheritance type of the ToolLayoutItem class.
type TToolLayoutItem a = TWxObject (CToolLayoutItem a)

-- | Abstract type of the ToolLayoutItem class.
data CToolLayoutItem a
CToolLayoutItem :: CToolLayoutItem a

-- | Pointer to an object of type <a>ToolTip</a>, derived from
--   <a>WxObject</a>.
type ToolTip a = WxObject (CToolTip a)

-- | Inheritance type of the ToolTip class.
type TToolTip a = TWxObject (CToolTip a)

-- | Abstract type of the ToolTip class.
data CToolTip a
CToolTip :: CToolTip a

-- | Pointer to an object of type <a>ToolWindow</a>, derived from
--   <a>Frame</a>.
type ToolWindow a = Frame (CToolWindow a)

-- | Inheritance type of the ToolWindow class.
type TToolWindow a = TFrame (CToolWindow a)

-- | Abstract type of the ToolWindow class.
data CToolWindow a
CToolWindow :: CToolWindow a

-- | Pointer to an object of type <a>TopLevelWindow</a>, derived from
--   <a>Window</a>.
type TopLevelWindow a = Window (CTopLevelWindow a)

-- | Inheritance type of the TopLevelWindow class.
type TTopLevelWindow a = TWindow (CTopLevelWindow a)

-- | Abstract type of the TopLevelWindow class.
data CTopLevelWindow a
CTopLevelWindow :: CTopLevelWindow a

-- | Pointer to an object of type <a>TreeCompanionWindow</a>, derived from
--   <a>Window</a>.
type TreeCompanionWindow a = Window (CTreeCompanionWindow a)

-- | Inheritance type of the TreeCompanionWindow class.
type TTreeCompanionWindow a = TWindow (CTreeCompanionWindow a)

-- | Abstract type of the TreeCompanionWindow class.
data CTreeCompanionWindow a
CTreeCompanionWindow :: CTreeCompanionWindow a

-- | Pointer to an object of type <a>TreeCtrl</a>, derived from
--   <a>Control</a>.
type TreeCtrl a = Control (CTreeCtrl a)

-- | Inheritance type of the TreeCtrl class.
type TTreeCtrl a = TControl (CTreeCtrl a)

-- | Abstract type of the TreeCtrl class.
data CTreeCtrl a
CTreeCtrl :: CTreeCtrl a

-- | Pointer to an object of type <a>TreeEvent</a>, derived from
--   <a>NotifyEvent</a>.
type TreeEvent a = NotifyEvent (CTreeEvent a)

-- | Inheritance type of the TreeEvent class.
type TTreeEvent a = TNotifyEvent (CTreeEvent a)

-- | Abstract type of the TreeEvent class.
data CTreeEvent a
CTreeEvent :: CTreeEvent a

-- | Pointer to an object of type <a>TreeItemData</a>, derived from
--   <a>ClientData</a>.
type TreeItemData a = ClientData (CTreeItemData a)

-- | Inheritance type of the TreeItemData class.
type TTreeItemData a = TClientData (CTreeItemData a)

-- | Abstract type of the TreeItemData class.
data CTreeItemData a
CTreeItemData :: CTreeItemData a

-- | Pointer to an object of type <a>TreeItemId</a>.
type TreeItemId a = Object (CTreeItemId a)

-- | Inheritance type of the TreeItemId class.
type TTreeItemId a = CTreeItemId a

-- | Abstract type of the TreeItemId class.
data CTreeItemId a
CTreeItemId :: CTreeItemId a

-- | Pointer to an object of type <a>TreeLayout</a>, derived from
--   <a>WxObject</a>.
type TreeLayout a = WxObject (CTreeLayout a)

-- | Inheritance type of the TreeLayout class.
type TTreeLayout a = TWxObject (CTreeLayout a)

-- | Abstract type of the TreeLayout class.
data CTreeLayout a
CTreeLayout :: CTreeLayout a

-- | Pointer to an object of type <a>TreeLayoutStored</a>, derived from
--   <a>TreeLayout</a>.
type TreeLayoutStored a = TreeLayout (CTreeLayoutStored a)

-- | Inheritance type of the TreeLayoutStored class.
type TTreeLayoutStored a = TTreeLayout (CTreeLayoutStored a)

-- | Abstract type of the TreeLayoutStored class.
data CTreeLayoutStored a
CTreeLayoutStored :: CTreeLayoutStored a

-- | Pointer to an object of type <a>URL</a>, derived from <a>WxObject</a>.
type URL a = WxObject (CURL a)

-- | Inheritance type of the URL class.
type TURL a = TWxObject (CURL a)

-- | Abstract type of the URL class.
data CURL a
CURL :: CURL a

-- | Pointer to an object of type <a>UpdateUIEvent</a>, derived from
--   <a>Event</a>.
type UpdateUIEvent a = Event (CUpdateUIEvent a)

-- | Inheritance type of the UpdateUIEvent class.
type TUpdateUIEvent a = TEvent (CUpdateUIEvent a)

-- | Abstract type of the UpdateUIEvent class.
data CUpdateUIEvent a
CUpdateUIEvent :: CUpdateUIEvent a

-- | Pointer to an object of type <a>Validator</a>, derived from
--   <a>EvtHandler</a>.
type Validator a = EvtHandler (CValidator a)

-- | Inheritance type of the Validator class.
type TValidator a = TEvtHandler (CValidator a)

-- | Abstract type of the Validator class.
data CValidator a
CValidator :: CValidator a

-- | Pointer to an object of type <a>Variant</a>, derived from
--   <a>WxObject</a>.
type Variant a = WxObject (CVariant a)

-- | Inheritance type of the Variant class.
type TVariant a = TWxObject (CVariant a)

-- | Abstract type of the Variant class.
data CVariant a
CVariant :: CVariant a

-- | Pointer to an object of type <a>VariantData</a>, derived from
--   <a>WxObject</a>.
type VariantData a = WxObject (CVariantData a)

-- | Inheritance type of the VariantData class.
type TVariantData a = TWxObject (CVariantData a)

-- | Abstract type of the VariantData class.
data CVariantData a
CVariantData :: CVariantData a

-- | Pointer to an object of type <a>View</a>, derived from
--   <a>EvtHandler</a>.
type View a = EvtHandler (CView a)

-- | Inheritance type of the View class.
type TView a = TEvtHandler (CView a)

-- | Abstract type of the View class.
data CView a
CView :: CView a

-- | Pointer to an object of type <a>WXCApp</a>, derived from <a>App</a>.
type WXCApp a = App (CWXCApp a)

-- | Inheritance type of the WXCApp class.
type TWXCApp a = TApp (CWXCApp a)

-- | Abstract type of the WXCApp class.
data CWXCApp a
CWXCApp :: CWXCApp a

-- | Pointer to an object of type <a>WXCArtProv</a>, derived from
--   <a>ArtProvider</a>.
type WXCArtProv a = ArtProvider (CWXCArtProv a)

-- | Inheritance type of the WXCArtProv class.
type TWXCArtProv a = TArtProvider (CWXCArtProv a)

-- | Abstract type of the WXCArtProv class.
data CWXCArtProv a
CWXCArtProv :: CWXCArtProv a

-- | Pointer to an object of type <a>WXCClient</a>, derived from
--   <a>Client</a>.
type WXCClient a = Client (CWXCClient a)

-- | Inheritance type of the WXCClient class.
type TWXCClient a = TClient (CWXCClient a)

-- | Abstract type of the WXCClient class.
data CWXCClient a
CWXCClient :: CWXCClient a

-- | Pointer to an object of type <a>WXCCommand</a>, derived from
--   <a>Command</a>.
type WXCCommand a = Command (CWXCCommand a)

-- | Inheritance type of the WXCCommand class.
type TWXCCommand a = TCommand (CWXCCommand a)

-- | Abstract type of the WXCCommand class.
data CWXCCommand a
CWXCCommand :: CWXCCommand a

-- | Pointer to an object of type <a>WXCConnection</a>, derived from
--   <a>Connection</a>.
type WXCConnection a = Connection (CWXCConnection a)

-- | Inheritance type of the WXCConnection class.
type TWXCConnection a = TConnection (CWXCConnection a)

-- | Abstract type of the WXCConnection class.
data CWXCConnection a
CWXCConnection :: CWXCConnection a

-- | Pointer to an object of type <a>WXCDragDataObject</a>.
type WXCDragDataObject a = Object (CWXCDragDataObject a)

-- | Inheritance type of the WXCDragDataObject class.
type TWXCDragDataObject a = CWXCDragDataObject a

-- | Abstract type of the WXCDragDataObject class.
data CWXCDragDataObject a
CWXCDragDataObject :: CWXCDragDataObject a

-- | Pointer to an object of type <a>WXCDropTarget</a>, derived from
--   <a>DropTarget</a>.
type WXCDropTarget a = DropTarget (CWXCDropTarget a)

-- | Inheritance type of the WXCDropTarget class.
type TWXCDropTarget a = TDropTarget (CWXCDropTarget a)

-- | Abstract type of the WXCDropTarget class.
data CWXCDropTarget a
CWXCDropTarget :: CWXCDropTarget a

-- | Pointer to an object of type <a>WXCFileDropTarget</a>, derived from
--   <a>FileDropTarget</a>.
type WXCFileDropTarget a = FileDropTarget (CWXCFileDropTarget a)

-- | Inheritance type of the WXCFileDropTarget class.
type TWXCFileDropTarget a = TFileDropTarget (CWXCFileDropTarget a)

-- | Abstract type of the WXCFileDropTarget class.
data CWXCFileDropTarget a
CWXCFileDropTarget :: CWXCFileDropTarget a

-- | Pointer to an object of type <a>WXCGridTable</a>, derived from
--   <a>GridTableBase</a>.
type WXCGridTable a = GridTableBase (CWXCGridTable a)

-- | Inheritance type of the WXCGridTable class.
type TWXCGridTable a = TGridTableBase (CWXCGridTable a)

-- | Abstract type of the WXCGridTable class.
data CWXCGridTable a
CWXCGridTable :: CWXCGridTable a

-- | Pointer to an object of type <a>WXCHtmlEvent</a>, derived from
--   <a>CommandEvent</a>.
type WXCHtmlEvent a = CommandEvent (CWXCHtmlEvent a)

-- | Inheritance type of the WXCHtmlEvent class.
type TWXCHtmlEvent a = TCommandEvent (CWXCHtmlEvent a)

-- | Abstract type of the WXCHtmlEvent class.
data CWXCHtmlEvent a
CWXCHtmlEvent :: CWXCHtmlEvent a

-- | Pointer to an object of type <a>WXCHtmlWindow</a>, derived from
--   <a>HtmlWindow</a>.
type WXCHtmlWindow a = HtmlWindow (CWXCHtmlWindow a)

-- | Inheritance type of the WXCHtmlWindow class.
type TWXCHtmlWindow a = THtmlWindow (CWXCHtmlWindow a)

-- | Abstract type of the WXCHtmlWindow class.
data CWXCHtmlWindow a
CWXCHtmlWindow :: CWXCHtmlWindow a

-- | Pointer to an object of type <a>WXCLocale</a>, derived from
--   <a>Locale</a>.
type WXCLocale a = Locale (CWXCLocale a)

-- | Inheritance type of the WXCLocale class.
type TWXCLocale a = TLocale (CWXCLocale a)

-- | Abstract type of the WXCLocale class.
data CWXCLocale a
CWXCLocale :: CWXCLocale a

-- | Pointer to an object of type <a>WXCLog</a>, derived from <a>Log</a>.
type WXCLog a = Log (CWXCLog a)

-- | Inheritance type of the WXCLog class.
type TWXCLog a = TLog (CWXCLog a)

-- | Abstract type of the WXCLog class.
data CWXCLog a
CWXCLog :: CWXCLog a

-- | Pointer to an object of type <a>WXCMessageParameters</a>.
type WXCMessageParameters a = Object (CWXCMessageParameters a)

-- | Inheritance type of the WXCMessageParameters class.
type TWXCMessageParameters a = CWXCMessageParameters a

-- | Abstract type of the WXCMessageParameters class.
data CWXCMessageParameters a
CWXCMessageParameters :: CWXCMessageParameters a

-- | Pointer to an object of type <a>WXCPlotCurve</a>, derived from
--   <a>PlotCurve</a>.
type WXCPlotCurve a = PlotCurve (CWXCPlotCurve a)

-- | Inheritance type of the WXCPlotCurve class.
type TWXCPlotCurve a = TPlotCurve (CWXCPlotCurve a)

-- | Abstract type of the WXCPlotCurve class.
data CWXCPlotCurve a
CWXCPlotCurve :: CWXCPlotCurve a

-- | Pointer to an object of type <a>WXCPreviewControlBar</a>, derived from
--   <a>PreviewControlBar</a>.
type WXCPreviewControlBar a = PreviewControlBar (CWXCPreviewControlBar a)

-- | Inheritance type of the WXCPreviewControlBar class.
type TWXCPreviewControlBar a = TPreviewControlBar (CWXCPreviewControlBar a)

-- | Abstract type of the WXCPreviewControlBar class.
data CWXCPreviewControlBar a
CWXCPreviewControlBar :: CWXCPreviewControlBar a

-- | Pointer to an object of type <a>WXCPreviewFrame</a>, derived from
--   <a>PreviewFrame</a>.
type WXCPreviewFrame a = PreviewFrame (CWXCPreviewFrame a)

-- | Inheritance type of the WXCPreviewFrame class.
type TWXCPreviewFrame a = TPreviewFrame (CWXCPreviewFrame a)

-- | Abstract type of the WXCPreviewFrame class.
data CWXCPreviewFrame a
CWXCPreviewFrame :: CWXCPreviewFrame a

-- | Pointer to an object of type <a>WXCPrintEvent</a>, derived from
--   <a>Event</a>.
type WXCPrintEvent a = Event (CWXCPrintEvent a)

-- | Inheritance type of the WXCPrintEvent class.
type TWXCPrintEvent a = TEvent (CWXCPrintEvent a)

-- | Abstract type of the WXCPrintEvent class.
data CWXCPrintEvent a
CWXCPrintEvent :: CWXCPrintEvent a

-- | Pointer to an object of type <a>WXCPrintout</a>, derived from
--   <a>Printout</a>.
type WXCPrintout a = Printout (CWXCPrintout a)

-- | Inheritance type of the WXCPrintout class.
type TWXCPrintout a = TPrintout (CWXCPrintout a)

-- | Abstract type of the WXCPrintout class.
data CWXCPrintout a
CWXCPrintout :: CWXCPrintout a

-- | Pointer to an object of type <a>WXCPrintoutHandler</a>, derived from
--   <a>EvtHandler</a>.
type WXCPrintoutHandler a = EvtHandler (CWXCPrintoutHandler a)

-- | Inheritance type of the WXCPrintoutHandler class.
type TWXCPrintoutHandler a = TEvtHandler (CWXCPrintoutHandler a)

-- | Abstract type of the WXCPrintoutHandler class.
data CWXCPrintoutHandler a
CWXCPrintoutHandler :: CWXCPrintoutHandler a

-- | Pointer to an object of type <a>WXCServer</a>, derived from
--   <a>Server</a>.
type WXCServer a = Server (CWXCServer a)

-- | Inheritance type of the WXCServer class.
type TWXCServer a = TServer (CWXCServer a)

-- | Abstract type of the WXCServer class.
data CWXCServer a
CWXCServer :: CWXCServer a

-- | Pointer to an object of type <a>WXCTextDropTarget</a>, derived from
--   <a>TextDropTarget</a>.
type WXCTextDropTarget a = TextDropTarget (CWXCTextDropTarget a)

-- | Inheritance type of the WXCTextDropTarget class.
type TWXCTextDropTarget a = TTextDropTarget (CWXCTextDropTarget a)

-- | Abstract type of the WXCTextDropTarget class.
data CWXCTextDropTarget a
CWXCTextDropTarget :: CWXCTextDropTarget a

-- | Pointer to an object of type <a>WXCTextValidator</a>, derived from
--   <a>TextValidator</a>.
type WXCTextValidator a = TextValidator (CWXCTextValidator a)

-- | Inheritance type of the WXCTextValidator class.
type TWXCTextValidator a = TTextValidator (CWXCTextValidator a)

-- | Abstract type of the WXCTextValidator class.
data CWXCTextValidator a
CWXCTextValidator :: CWXCTextValidator a

-- | Pointer to an object of type <a>WXCTreeItemData</a>, derived from
--   <a>TreeItemData</a>.
type WXCTreeItemData a = TreeItemData (CWXCTreeItemData a)

-- | Inheritance type of the WXCTreeItemData class.
type TWXCTreeItemData a = TTreeItemData (CWXCTreeItemData a)

-- | Abstract type of the WXCTreeItemData class.
data CWXCTreeItemData a
CWXCTreeItemData :: CWXCTreeItemData a

-- | Pointer to an object of type <a>Window</a>, derived from
--   <a>EvtHandler</a>.
type Window a = EvtHandler (CWindow a)

-- | Inheritance type of the Window class.
type TWindow a = TEvtHandler (CWindow a)

-- | Abstract type of the Window class.
data CWindow a
CWindow :: CWindow a

-- | Pointer to an object of type <a>WindowCreateEvent</a>, derived from
--   <a>CommandEvent</a>.
type WindowCreateEvent a = CommandEvent (CWindowCreateEvent a)

-- | Inheritance type of the WindowCreateEvent class.
type TWindowCreateEvent a = TCommandEvent (CWindowCreateEvent a)

-- | Abstract type of the WindowCreateEvent class.
data CWindowCreateEvent a
CWindowCreateEvent :: CWindowCreateEvent a

-- | Pointer to an object of type <a>WindowDC</a>, derived from <a>DC</a>.
type WindowDC a = DC (CWindowDC a)

-- | Inheritance type of the WindowDC class.
type TWindowDC a = TDC (CWindowDC a)

-- | Abstract type of the WindowDC class.
data CWindowDC a
CWindowDC :: CWindowDC a

-- | Pointer to an object of type <a>WindowDestroyEvent</a>, derived from
--   <a>CommandEvent</a>.
type WindowDestroyEvent a = CommandEvent (CWindowDestroyEvent a)

-- | Inheritance type of the WindowDestroyEvent class.
type TWindowDestroyEvent a = TCommandEvent (CWindowDestroyEvent a)

-- | Abstract type of the WindowDestroyEvent class.
data CWindowDestroyEvent a
CWindowDestroyEvent :: CWindowDestroyEvent a

-- | Pointer to an object of type <a>WindowDisabler</a>.
type WindowDisabler a = Object (CWindowDisabler a)

-- | Inheritance type of the WindowDisabler class.
type TWindowDisabler a = CWindowDisabler a

-- | Abstract type of the WindowDisabler class.
data CWindowDisabler a
CWindowDisabler :: CWindowDisabler a

-- | Pointer to an object of type <a>Wizard</a>, derived from
--   <a>Dialog</a>.
type Wizard a = Dialog (CWizard a)

-- | Inheritance type of the Wizard class.
type TWizard a = TDialog (CWizard a)

-- | Abstract type of the Wizard class.
data CWizard a
CWizard :: CWizard a

-- | Pointer to an object of type <a>WizardEvent</a>, derived from
--   <a>NotifyEvent</a>.
type WizardEvent a = NotifyEvent (CWizardEvent a)

-- | Inheritance type of the WizardEvent class.
type TWizardEvent a = TNotifyEvent (CWizardEvent a)

-- | Abstract type of the WizardEvent class.
data CWizardEvent a
CWizardEvent :: CWizardEvent a

-- | Pointer to an object of type <a>WizardPage</a>, derived from
--   <a>Panel</a>.
type WizardPage a = Panel (CWizardPage a)

-- | Inheritance type of the WizardPage class.
type TWizardPage a = TPanel (CWizardPage a)

-- | Abstract type of the WizardPage class.
data CWizardPage a
CWizardPage :: CWizardPage a

-- | Pointer to an object of type <a>WizardPageSimple</a>, derived from
--   <a>WizardPage</a>.
type WizardPageSimple a = WizardPage (CWizardPageSimple a)

-- | Inheritance type of the WizardPageSimple class.
type TWizardPageSimple a = TWizardPage (CWizardPageSimple a)

-- | Abstract type of the WizardPageSimple class.
data CWizardPageSimple a
CWizardPageSimple :: CWizardPageSimple a

-- | Pointer to an object of type <a>WxArray</a>.
type WxArray a = Object (CWxArray a)

-- | Inheritance type of the WxArray class.
type TWxArray a = CWxArray a

-- | Abstract type of the WxArray class.
data CWxArray a
CWxArray :: CWxArray a

-- | Pointer to an object of type <a>WxDllLoader</a>.
type WxDllLoader a = Object (CWxDllLoader a)

-- | Inheritance type of the WxDllLoader class.
type TWxDllLoader a = CWxDllLoader a

-- | Abstract type of the WxDllLoader class.
data CWxDllLoader a
CWxDllLoader :: CWxDllLoader a

-- | Pointer to an object of type <a>WxExpr</a>.
type WxExpr a = Object (CWxExpr a)

-- | Inheritance type of the WxExpr class.
type TWxExpr a = CWxExpr a

-- | Abstract type of the WxExpr class.
data CWxExpr a
CWxExpr :: CWxExpr a

-- | Pointer to an object of type <a>WxManagedPtr</a>.
type WxManagedPtr a = Object (CWxManagedPtr a)

-- | Inheritance type of the WxManagedPtr class.
type TWxManagedPtr a = CWxManagedPtr a

-- | Abstract type of the WxManagedPtr class.
data CWxManagedPtr a
CWxManagedPtr :: CWxManagedPtr a

-- | Pointer to an object of type <a>WxObject</a>.
type WxObject a = Object (CWxObject a)

-- | Inheritance type of the WxObject class.
type TWxObject a = CWxObject a

-- | Abstract type of the WxObject class.
data CWxObject a
CWxObject :: CWxObject a

-- | Pointer to an object of type <a>WxPoint</a>.
type WxPoint a = Object (CWxPoint a)

-- | Inheritance type of the WxPoint class.
type TWxPoint a = CWxPoint a

-- | Abstract type of the WxPoint class.
data CWxPoint a
CWxPoint :: CWxPoint a

-- | Pointer to an object of type <a>WxRect</a>.
type WxRect a = Object (CWxRect a)

-- | Inheritance type of the WxRect class.
type TWxRect a = CWxRect a

-- | Abstract type of the WxRect class.
data CWxRect a
CWxRect :: CWxRect a

-- | Pointer to an object of type <a>WxSize</a>.
type WxSize a = Object (CWxSize a)

-- | Inheritance type of the WxSize class.
type TWxSize a = CWxSize a

-- | Abstract type of the WxSize class.
data CWxSize a
CWxSize :: CWxSize a

-- | Pointer to an object of type <a>WxString</a>.
type WxString a = Object (CWxString a)

-- | Inheritance type of the WxString class.
type TWxString a = CWxString a

-- | Abstract type of the WxString class.
data CWxString a
CWxString :: CWxString a

-- | Pointer to an object of type <a>XmlResource</a>, derived from
--   <a>WxObject</a>.
type XmlResource a = WxObject (CXmlResource a)

-- | Inheritance type of the XmlResource class.
type TXmlResource a = TWxObject (CXmlResource a)

-- | Abstract type of the XmlResource class.
data CXmlResource a
CXmlResource :: CXmlResource a

-- | Pointer to an object of type <a>XmlResourceHandler</a>, derived from
--   <a>WxObject</a>.
type XmlResourceHandler a = WxObject (CXmlResourceHandler a)

-- | Inheritance type of the XmlResourceHandler class.
type TXmlResourceHandler a = TWxObject (CXmlResourceHandler a)

-- | Abstract type of the XmlResourceHandler class.
data CXmlResourceHandler a
CXmlResourceHandler :: CXmlResourceHandler a

-- | Pointer to an object of type <a>ZipInputStream</a>, derived from
--   <a>InputStream</a>.
type ZipInputStream a = InputStream (CZipInputStream a)

-- | Inheritance type of the ZipInputStream class.
type TZipInputStream a = TInputStream (CZipInputStream a)

-- | Abstract type of the ZipInputStream class.
data CZipInputStream a
CZipInputStream :: CZipInputStream a

-- | Pointer to an object of type <a>ZlibInputStream</a>, derived from
--   <a>FilterInputStream</a>.
type ZlibInputStream a = FilterInputStream (CZlibInputStream a)

-- | Inheritance type of the ZlibInputStream class.
type TZlibInputStream a = TFilterInputStream (CZlibInputStream a)

-- | Abstract type of the ZlibInputStream class.
data CZlibInputStream a
CZlibInputStream :: CZlibInputStream a

-- | Pointer to an object of type <a>ZlibOutputStream</a>, derived from
--   <a>FilterOutputStream</a>.
type ZlibOutputStream a = FilterOutputStream (CZlibOutputStream a)

-- | Inheritance type of the ZlibOutputStream class.
type TZlibOutputStream a = TFilterOutputStream (CZlibOutputStream a)

-- | Abstract type of the ZlibOutputStream class.
data CZlibOutputStream a
CZlibOutputStream :: CZlibOutputStream a


-- | Basic types and marshalling code for the wxWidgets C library.
module Graphics.UI.WXCore.WxcTypes

-- | An <tt>Object a</tt> is a pointer to an object of type <tt>a</tt>. The
--   <tt>a</tt> parameter is used to encode the inheritance relation. When
--   the type parameter is unit <tt>()</tt>, it denotes an object of
--   exactly that class, when the parameter is a type variable <tt>a</tt>,
--   it specifies an object that is at least an instance of that class. For
--   example in wxWidgets, we have the following class hierarchy:
--   
--   <pre>
--   EvtHandler
--     |- Window
--          |- Frame
--          |- Control
--              |- Button
--              |- Radiobox
--   </pre>
--   
--   In wxHaskell, all the creation functions will return objects of
--   exactly that class and use the <tt>()</tt> type:
--   
--   <pre>
--   frameCreate :: Window a -&gt; ... -&gt; IO (Frame ())
--   buttonCreate :: Window a -&gt; ... -&gt; IO (Button ())
--   ...
--   </pre>
--   
--   In contrast, all the <i>this</i> (or <i>self</i>) pointers of methods
--   can take objects of any instance of that class and have a type
--   variable, for example:
--   
--   <pre>
--   windowSetClientSize :: Window a -&gt; Size -&gt; IO ()
--   controlSetLabel     :: Control a -&gt; String -&gt; IO ()
--   buttonSetDefault    :: Button a -&gt; IO ()
--   </pre>
--   
--   This means that we can use <tt>windowSetClientSize</tt> on any window,
--   including buttons and frames, but we can only use
--   <tt>controlSetLabel</tt> on controls, not including frames.
--   
--   In wxHaskell, this works since a <tt>Frame ()</tt> is actually a type
--   synonym for <tt>Window (CFrame ())</tt> (where <tt>CFrame</tt> is an
--   abstract data type). We can thus pass a value of type <tt>Frame
--   ()</tt> to anything that expects some <tt>Window a</tt>. For a button
--   this works too, as it is a synonym for <tt>Control (CButton ())</tt>
--   which is in turn a synonym for <tt>Window (CControl (CButton
--   ()))</tt>. Note that we can't pass a frame to something that expects a
--   value of type <tt>Control a</tt>. Of course, a <tt>Window a</tt> is
--   actually a type synonym for <tt>EvtHandler (CWindow a)</tt>. If you
--   study the documentation in <a>Graphics.UI.WX.Classes</a> closely, you
--   can discover where this chain ends :-).
--   
--   Objects are not automatically deleted. Normally you can use a delete
--   function like <tt>windowDelete</tt> to delete an object. However,
--   almost all objects in the wxWidgets library are automatically deleted
--   by the library. The only objects that should be used with care are
--   resources as bitmaps, fonts and brushes.
data Object a

-- | A null object. Use with care.
objectNull :: Object a

-- | Test for null object.
objectIsNull :: Object a -> Bool

-- | Cast an object to another type. Use with care.
objectCast :: Object a -> Object b

-- | Is this a managed object?
objectIsManaged :: Object a -> Bool

-- | Delete a wxObject, works for managed and unmanaged objects.
objectDelete :: WxObject a -> IO ()

-- | Create an unmanaged object.
objectFromPtr :: Ptr a -> Object a

-- | Create a managed object that will be deleted using
--   |wxObject_SafeDelete|.
managedObjectFromPtr :: Ptr (TWxObject a) -> IO (WxObject a)

-- | Do something with the object pointer.
withObjectPtr :: Object a -> (Ptr a -> IO b) -> IO b

-- | Extract the object pointer and raise an exception if <tt>NULL</tt>.
--   Otherwise continue with the valid pointer.
withObjectRef :: String -> Object a -> (Ptr a -> IO b) -> IO b

-- | Return an unmanaged object.
withObjectResult :: IO (Ptr a) -> IO (Object a)

-- | Create a managed object that will be deleted using
--   |wxObject_SafeDelete|.
withManagedObjectResult :: IO (Ptr (TWxObject a)) -> IO (WxObject a)

-- | Finalize a managed object manually. (No effect on unmanaged objects.)
objectFinalize :: Object a -> IO ()

-- | Remove the finalizer on a managed object. (No effect on unmanaged
--   objects.)
objectNoFinalize :: Object a -> IO ()

-- | An <tt>Id</tt> is used to identify objects during event handling.
type Id = Int

-- | A <tt>Style</tt> is normally used as a flag mask to specify some
--   window style
type Style = Int

-- | An <tt>EventId</tt> is identifies specific events.
type EventId = Int

-- | Convert a Haskell <a>Bool</a> to its numeric representation
fromBool :: Num a => Bool -> a

-- | Convert a Boolean in numeric representation to a Haskell value
toBool :: (Eq a, Num a) => a -> Bool

-- | A point has an x and y coordinate. Coordinates are normally relative
--   to the upper-left corner of their view frame, where a positive x goes
--   to the right and a positive y to the bottom of the view.
data (Num a) => Point2 a
Point :: !a -> !a -> Point2 a

-- | x component of a point.
[pointX] :: Point2 a -> !a

-- | y component of a point.
[pointY] :: Point2 a -> !a

-- | Construct a point.
point :: (Num a) => a -> a -> Point2 a

-- | Shorter function to construct a point.
pt :: (Num a) => a -> a -> Point2 a

-- | Point at the origin.
pointZero :: (Num a) => Point2 a

-- | A <a>null</a> point is not a legal point (x and y are -1) and can be
--   used for some wxWidgets functions to select a default point.
pointNull :: (Num a) => Point2 a

-- | A <tt>Size</tt> has a width and height.
data (Num a) => Size2D a
Size :: !a -> !a -> Size2D a

-- | the width of a size
[sizeW] :: Size2D a -> !a

-- | the height of a size
[sizeH] :: Size2D a -> !a

-- | Short function to construct a size
sz :: (Num a) => a -> a -> Size2D a

-- | A <a>null</a> size is not a legal size (width and height are -1) and
--   can be used for some wxWidgets functions to select a default size.
sizeNull :: (Num a) => Size2D a

-- | A vector with an x and y delta.
data (Num a) => Vector2 a
Vector :: !a -> !a -> Vector2 a

-- | delta-x component of a vector
[vecX] :: Vector2 a -> !a

-- | delta-y component of a vector
[vecY] :: Vector2 a -> !a

-- | Construct a vector.
vector :: (Num a) => a -> a -> Vector2 a

-- | Short function to construct a vector.
vec :: (Num a) => a -> a -> Vector2 a

-- | A zero vector
vecZero :: (Num a) => Vector2 a

-- | A <a>null</a> vector has a delta x and y of -1 and can be used for
--   some wxWidgets functions to select a default vector.
vecNull :: (Num a) => Vector2 a

-- | A rectangle is defined by the left x coordinate, the top y coordinate,
--   the width and the height.
data (Num a) => Rect2D a
Rect :: !a -> !a -> !a -> !a -> Rect2D a
[rectLeft] :: Rect2D a -> !a
[rectTop] :: Rect2D a -> !a
[rectWidth] :: Rect2D a -> !a
[rectHeight] :: Rect2D a -> !a

-- | Create a rectangle at a certain (upper-left) point with a certain
--   size.
rect :: (Num a) => Point2 a -> Size2D a -> Rect2D a

-- | Construct a (positive) rectangle between two (arbitrary) points.
rectBetween :: (Num a, Ord a) => Point2 a -> Point2 a -> Rect2D a

-- | Create a rectangle of a certain size with the upper-left corner at
--   (<a>pt</a> 0 0).
rectFromSize :: (Num a) => Size2D a -> Rect2D a

-- | An empty rectangle at (0,0).
rectZero :: (Num a) => Rect2D a

-- | An <a>null</a> rectangle is not a valid rectangle (<tt>Rect -1 -1 -1
--   -1</tt>) but can used for some wxWidgets functions to select a default
--   rectangle. (i.e. <tt>frameCreate</tt>).
rectNull :: (Num a) => Rect2D a

-- | Get the size of a rectangle.
rectSize :: (Num a) => Rect2D a -> Size2D a

-- | An abstract data type to define colors.
newtype Color
Color :: Word -> Color

-- | Create a color from a red/green/blue triple.
rgb :: (Integral a) => a -> a -> a -> Color

-- | Create a color from a red/green/blue triple.
colorRGB :: (Integral a) => a -> a -> a -> Color

-- | Create a color from a red/green/blue/alpha quadruple.
rgba :: (Integral a) => a -> a -> a -> a -> Color

-- | Create a color from a red/green/blue/alpha quadruple.
colorRGBA :: (Integral a) => a -> a -> a -> a -> Color

-- | Returns a red color component
colorRed :: (Num a) => Color -> a

-- | Returns a green color component
colorGreen :: (Num a) => Color -> a

-- | Returns a blue color component
colorBlue :: (Num a) => Color -> a

-- | Returns a alpha channel component
colorAlpha :: (Num a) => Color -> a

-- | Return an <a>Int</a> where the three least significant bytes contain
--   the red, green, and blue component of a color.
intFromColor :: Color -> Int

-- | Set the color according to an rgb integer. (see
--   <tt>rgbIntFromColor</tt>).
colorFromInt :: Int -> Color

-- | Return an <a>Num</a> class's numeric representation where the three
--   least significant the red, green, and blue component of a color.
fromColor :: (Num a) => Color -> a

-- | Set the color according to <a>Integral</a> class's numeric
--   representation. (see <tt>rgbaIntFromColor</tt>).
toColor :: (Integral a) => a -> Color

-- | deprecated: use <a>colorIsOk</a> instead.

-- | <i>Deprecated: Use colorIsOk instead</i>
colorOk :: Color -> Bool

-- | Check of a color is valid (<tt>Colour::IsOk</tt>)
colorIsOk :: Color -> Bool

-- | Temporarily store a list of storable values in memory (like
--   <a>with</a>, but for multiple elements).
withArray :: Storable a => [a] -> (Ptr a -> IO b) -> IO b

-- | Identifies tree items. Note: Replaces the <tt>TreeItemId</tt> object
--   and takes automatically care of allocation issues.
data TreeItem

-- | Invalid tree item.
treeItemInvalid :: TreeItem

-- | Is a tree item ok? (i.e. not invalid).
treeItemIsOk :: TreeItem -> Bool

-- | A C string is a reference to an array of C characters terminated by
--   NUL.
type CString = Ptr CChar

-- | Marshal a Haskell string into a NUL terminated C string using
--   temporary storage.
--   
--   <ul>
--   <li>the Haskell string may <i>not</i> contain any NUL characters</li>
--   <li>the memory is freed when the subcomputation terminates (either
--   normally or via an exception), so the pointer to the temporary storage
--   must <i>not</i> be used after this.</li>
--   </ul>
withCString :: String -> (CString -> IO a) -> IO a

-- | A C wide string is a reference to an array of C wide characters
--   terminated by NUL.
type CWString = Ptr CWchar

-- | Marshal a Haskell string into a NUL terminated C wide string using
--   temporary storage.
--   
--   <ul>
--   <li>the Haskell string may <i>not</i> contain any NUL characters</li>
--   <li>the memory is freed when the subcomputation terminates (either
--   normally or via an exception), so the pointer to the temporary storage
--   must <i>not</i> be used after this.</li>
--   </ul>
withCWString :: String -> (CWString -> IO a) -> IO a

-- | Haskell type representing the C <tt>int</tt> type.
newtype CInt :: *
CInt :: Int32 -> CInt

-- | A signed integral type that can be losslessly converted to and from
--   <tt>Ptr</tt>. This type is also compatible with the C99 type
--   <tt>intptr_t</tt>, and can be marshalled to and from that type safely.
data IntPtr :: *

-- | A <a>Word</a> is an unsigned integral type, with the same size as
--   <a>Int</a>.
data Word :: *

-- | 8-bit unsigned integer type
data Word8 :: *

-- | 64-bit signed integer type
data Int64 :: *

-- | Haskell type representing the C <tt>double</tt> type.
newtype CDouble :: *
CDouble :: Double -> CDouble

-- | Haskell type representing the C <tt>char</tt> type.
data CChar :: *

-- | Haskell type representing the C <tt>wchar_t</tt> type.
newtype CWchar :: *
CWchar :: Int32 -> CWchar

-- | A value of type <tt><a>Ptr</a> a</tt> represents a pointer to an
--   object, or an array of objects, which may be marshalled to or from
--   Haskell values of type <tt>a</tt>.
--   
--   The type <tt>a</tt> will often be an instance of class <a>Storable</a>
--   which provides the marshalling operations. However this is not
--   essential, and you can provide your own operations to access the
--   pointer. For example you might write small foreign functions to get or
--   set the fields of a C <tt>struct</tt>.
data Ptr a :: * -> *

-- | Null pointer, use with care.
ptrNull :: Ptr a

-- | Test for null.
ptrIsNull :: Ptr a -> Bool

-- | Cast a pointer type, use with care.
ptrCast :: Ptr a -> Ptr b

-- | The type <a>ForeignPtr</a> represents references to objects that are
--   maintained in a foreign language, i.e., that are not part of the data
--   structures usually managed by the Haskell storage manager. The
--   essential difference between <a>ForeignPtr</a>s and vanilla memory
--   references of type <tt>Ptr a</tt> is that the former may be associated
--   with <i>finalizers</i>. A finalizer is a routine that is invoked when
--   the Haskell storage manager detects that - within the Haskell heap and
--   stack - there are no more references left that are pointing to the
--   <a>ForeignPtr</a>. Typically, the finalizer will, then, invoke
--   routines in the foreign language that free the resources bound by the
--   foreign object.
--   
--   The <a>ForeignPtr</a> is parameterised in the same way as <a>Ptr</a>.
--   The type argument of <a>ForeignPtr</a> should normally be an instance
--   of class <a>Storable</a>.
data ForeignPtr a :: * -> *

-- | A value of type <tt><a>FunPtr</a> a</tt> is a pointer to a function
--   callable from foreign code. The type <tt>a</tt> will normally be a
--   <i>foreign type</i>, a function type with zero or more arguments where
--   
--   <ul>
--   <li>the argument types are <i>marshallable foreign types</i>, i.e.
--   <a>Char</a>, <a>Int</a>, <a>Double</a>, <a>Float</a>, <a>Bool</a>,
--   <a>Int8</a>, <a>Int16</a>, <a>Int32</a>, <a>Int64</a>, <a>Word8</a>,
--   <a>Word16</a>, <a>Word32</a>, <a>Word64</a>, <tt><a>Ptr</a> a</tt>,
--   <tt><a>FunPtr</a> a</tt>, <tt><a>StablePtr</a> a</tt> or a renaming of
--   any of these using <tt>newtype</tt>.</li>
--   <li>the return type is either a marshallable foreign type or has the
--   form <tt><a>IO</a> t</tt> where <tt>t</tt> is a marshallable foreign
--   type or <tt>()</tt>.</li>
--   </ul>
--   
--   A value of type <tt><a>FunPtr</a> a</tt> may be a pointer to a foreign
--   function, either returned by another foreign function or imported with
--   a a static address import like
--   
--   <pre>
--   foreign import ccall "stdlib.h &amp;free"
--     p_free :: FunPtr (Ptr a -&gt; IO ())
--   </pre>
--   
--   or a pointer to a Haskell function created using a <i>wrapper</i> stub
--   declared to produce a <a>FunPtr</a> of the correct type. For example:
--   
--   <pre>
--   type Compare = Int -&gt; Int -&gt; Bool
--   foreign import ccall "wrapper"
--     mkCompare :: Compare -&gt; IO (FunPtr Compare)
--   </pre>
--   
--   Calls to wrapper stubs like <tt>mkCompare</tt> allocate storage, which
--   should be released with <a>freeHaskellFunPtr</a> when no longer
--   required.
--   
--   To convert <a>FunPtr</a> values to corresponding Haskell functions,
--   one can define a <i>dynamic</i> stub for the specific foreign type,
--   e.g.
--   
--   <pre>
--   type IntFunction = CInt -&gt; IO ()
--   foreign import ccall "dynamic"
--     mkFun :: FunPtr IntFunction -&gt; IntFunction
--   </pre>
data FunPtr a :: * -> *
instance GHC.Classes.Eq Graphics.UI.WXCore.WxcTypes.Color
instance GHC.Read.Read Graphics.UI.WXCore.WxcTypes.TreeItem
instance GHC.Show.Show Graphics.UI.WXCore.WxcTypes.TreeItem
instance GHC.Classes.Eq Graphics.UI.WXCore.WxcTypes.TreeItem
instance (GHC.Read.Read a, GHC.Num.Num a) => GHC.Read.Read (Graphics.UI.WXCore.WxcTypes.Rect2D a)
instance (GHC.Show.Show a, GHC.Num.Num a) => GHC.Show.Show (Graphics.UI.WXCore.WxcTypes.Rect2D a)
instance (GHC.Classes.Eq a, GHC.Num.Num a) => GHC.Classes.Eq (Graphics.UI.WXCore.WxcTypes.Rect2D a)
instance (GHC.Read.Read a, GHC.Num.Num a) => GHC.Read.Read (Graphics.UI.WXCore.WxcTypes.Vector2 a)
instance (GHC.Show.Show a, GHC.Num.Num a) => GHC.Show.Show (Graphics.UI.WXCore.WxcTypes.Vector2 a)
instance (GHC.Classes.Eq a, GHC.Num.Num a) => GHC.Classes.Eq (Graphics.UI.WXCore.WxcTypes.Vector2 a)
instance (GHC.Show.Show a, GHC.Num.Num a) => GHC.Show.Show (Graphics.UI.WXCore.WxcTypes.Size2D a)
instance (GHC.Classes.Eq a, GHC.Num.Num a) => GHC.Classes.Eq (Graphics.UI.WXCore.WxcTypes.Size2D a)
instance (GHC.Read.Read a, GHC.Num.Num a) => GHC.Read.Read (Graphics.UI.WXCore.WxcTypes.Point2 a)
instance (GHC.Show.Show a, GHC.Num.Num a) => GHC.Show.Show (Graphics.UI.WXCore.WxcTypes.Point2 a)
instance (GHC.Classes.Eq a, GHC.Num.Num a) => GHC.Classes.Eq (Graphics.UI.WXCore.WxcTypes.Point2 a)
instance (GHC.Num.Num a, GHC.Classes.Ord a) => GHC.Classes.Ord (Graphics.UI.WXCore.WxcTypes.Point2 a)
instance GHC.Arr.Ix (Graphics.UI.WXCore.WxcTypes.Point2 GHC.Types.Int)
instance GHC.Show.Show Graphics.UI.WXCore.WxcTypes.Color


-- | Haskell class definitions for the wxWidgets C library
--   (<tt>wxc.dll</tt>).
--   
--   Do not edit this file manually! This file was automatically generated
--   by wxDirect.
--   
--   From the files:
--   
--   <ul>
--   <li><pre>wxc.h</pre></li>
--   </ul>
--   
--   And contains 2015 methods for 150 classes.
module Graphics.UI.WXCore.WxcClassesAL

-- | usage: (<tt>bitmapDataObjectCreate bmp</tt>).
bitmapDataObjectCreate :: Bitmap a -> IO (BitmapDataObject ())

-- | usage: (<tt>bitmapDataObjectCreateEmpty</tt>).
bitmapDataObjectCreateEmpty :: IO (BitmapDataObject ())

-- | usage: (<tt>bitmapDataObjectDelete obj</tt>).
bitmapDataObjectDelete :: BitmapDataObject a -> IO ()

-- | usage: (<tt>bitmapDataObjectGetBitmap obj</tt>).
bitmapDataObjectGetBitmap :: BitmapDataObject a -> IO (Bitmap ())

-- | usage: (<tt>bitmapDataObjectSetBitmap obj bmp</tt>).
bitmapDataObjectSetBitmap :: BitmapDataObject a -> Bitmap b -> IO ()

-- | usage: (<tt>cFree ptr</tt>).
cFree :: Ptr a -> IO ()

-- | usage: (<tt>colorPickerCtrlCreate parent id colour xywh style</tt>).
colorPickerCtrlCreate :: Window a -> Id -> Color -> Rect -> Int -> IO (ColourPickerCtrl ())

-- | usage: (<tt>colorPickerCtrlGetColour self</tt>).
colorPickerCtrlGetColour :: ColourPickerCtrl a -> IO (Color)

-- | usage: (<tt>colorPickerCtrlSetColour self colour</tt>).
colorPickerCtrlSetColour :: ColourPickerCtrl a -> Color -> IO ()

-- | usage: (<tt>cursorCreateFromImage image</tt>).
cursorCreateFromImage :: Image a -> IO (Cursor ())

-- | usage: (<tt>cursorCreateFromStock id</tt>).
cursorCreateFromStock :: Id -> IO (Cursor ())

-- | usage: (<tt>cursorCreateLoad name wxtype widthheight</tt>).
cursorCreateLoad :: String -> Int -> Size -> IO (Cursor ())

-- | usage: (<tt>dragIcon icon xy</tt>).
dragIcon :: Icon a -> Point -> IO (DragImage ())

-- | usage: (<tt>dragListItem treeCtrl id</tt>).
dragListItem :: ListCtrl a -> Id -> IO (DragImage ())

-- | usage: (<tt>dragString test xy</tt>).
dragString :: String -> Point -> IO (DragImage ())

-- | usage: (<tt>dragTreeItem treeCtrl id</tt>).
dragTreeItem :: TreeCtrl a -> TreeItem -> IO (DragImage ())

-- | usage: (<tt>dropSourceCreate wxdata win copy move none</tt>).
dropSourceCreate :: DataObject a -> Window b -> Ptr c -> Ptr d -> Ptr e -> IO (DropSource ())

-- | usage: (<tt>dropSourceDelete obj</tt>).
dropSourceDelete :: DropSource a -> IO ()

-- | usage: (<tt>dropSourceDoDragDrop obj move</tt>).
dropSourceDoDragDrop :: DropSource a -> Int -> IO Int

-- | usage: (<tt>fileDataObjectAddFile obj fle</tt>).
fileDataObjectAddFile :: FileDataObject a -> String -> IO ()

-- | usage: (<tt>fileDataObjectCreate cntlst</tt>).
fileDataObjectCreate :: [String] -> IO (FileDataObject ())

-- | usage: (<tt>fileDataObjectDelete obj</tt>).
fileDataObjectDelete :: FileDataObject a -> IO ()

-- | usage: (<tt>fileDataObjectGetFilenames obj</tt>).
fileDataObjectGetFilenames :: FileDataObject a -> IO [String]

-- | usage: (<tt>gcdcCreate dc</tt>).
gcdcCreate :: WindowDC a -> IO (GCDC ())

-- | usage: (<tt>gcdcCreateFromMemory dc</tt>).
gcdcCreateFromMemory :: MemoryDC a -> IO (GCDC ())

-- | usage: (<tt>gcdcCreateFromPrinter dc</tt>).
gcdcCreateFromPrinter :: PrinterDC a -> IO (GCDC ())

-- | usage: (<tt>gcdcDelete self</tt>).
gcdcDelete :: GCDC a -> IO ()

-- | usage: (<tt>gcdcGetGraphicsContext self</tt>).
gcdcGetGraphicsContext :: GCDC a -> IO (GraphicsContext ())

-- | usage: (<tt>gcdcSetGraphicsContext self gc</tt>).
gcdcSetGraphicsContext :: GCDC a -> GraphicsContext b -> IO ()

-- | usage: (<tt>genericDragIcon icon</tt>).
genericDragIcon :: Icon a -> IO (GenericDragImage ())

-- | usage: (<tt>genericDragListItem treeCtrl id</tt>).
genericDragListItem :: ListCtrl a -> Id -> IO (GenericDragImage ())

-- | usage: (<tt>genericDragString test</tt>).
genericDragString :: String -> IO (GenericDragImage ())

-- | usage: (<tt>genericDragTreeItem treeCtrl id</tt>).
genericDragTreeItem :: TreeCtrl a -> TreeItem -> IO (GenericDragImage ())

-- | usage: (<tt>getApplicationDir</tt>).
getApplicationDir :: IO (String)

-- | usage: (<tt>getApplicationPath</tt>).
getApplicationPath :: IO (String)

-- | usage: (<tt>getColourFromUser parent colInit</tt>).
getColourFromUser :: Window a -> Color -> IO (Color)

-- | usage: (<tt>getELJLocale</tt>).
getELJLocale :: IO (WXCLocale ())

-- | usage: (<tt>getELJTranslation sz</tt>).
getELJTranslation :: String -> IO (Ptr ())

-- | usage: (<tt>getFontFromUser parent fontInit</tt>).
getFontFromUser :: Window a -> Font b -> IO (Font ())

-- | usage: (<tt>getNumberFromUser message prompt caption value min max
--   parent xy</tt>).
getNumberFromUser :: String -> String -> String -> Int -> Int -> Int -> Window g -> Point -> IO Int

-- | usage: (<tt>getPasswordFromUser message caption defaultText
--   parent</tt>).
getPasswordFromUser :: String -> String -> String -> Window d -> IO String

-- | usage: (<tt>getTextFromUser message caption defaultText parent xy
--   center</tt>).
getTextFromUser :: String -> String -> String -> Window d -> Point -> Bool -> IO String

-- | Check if a preprocessor macro is defined. For example,
--   <tt>wxIsDefined("<b>WXGTK</b>")</tt> or
--   <tt>wxIsDefined("wxUSE_GIF")</tt>. *
isDefined :: String -> IO Bool

-- | usage: (<tt>kill pid signal</tt>).
kill :: Int -> Int -> IO Int

-- | usage: (<tt>logDebug msg</tt>).
logDebug :: String -> IO ()

-- | usage: (<tt>logError msg</tt>).
logError :: String -> IO ()

-- | usage: (<tt>logErrorMsg msg</tt>).
logErrorMsg :: String -> IO ()

-- | usage: (<tt>logFatalError msg</tt>).
logFatalError :: String -> IO ()

-- | usage: (<tt>logFatalErrorMsg msg</tt>).
logFatalErrorMsg :: String -> IO ()

-- | usage: (<tt>logMessage msg</tt>).
logMessage :: String -> IO ()

-- | usage: (<tt>logMessageMsg msg</tt>).
logMessageMsg :: String -> IO ()

-- | usage: (<tt>logStatus msg</tt>).
logStatus :: String -> IO ()

-- | usage: (<tt>logSysError msg</tt>).
logSysError :: String -> IO ()

-- | usage: (<tt>logTrace mask msg</tt>).
logTrace :: String -> String -> IO ()

-- | usage: (<tt>logVerbose msg</tt>).
logVerbose :: String -> IO ()

-- | usage: (<tt>logWarning msg</tt>).
logWarning :: String -> IO ()

-- | usage: (<tt>logWarningMsg msg</tt>).
logWarningMsg :: String -> IO ()

-- | usage: (<tt>acceleratorEntryCreate flags keyCode cmd</tt>).
acceleratorEntryCreate :: Int -> Int -> Int -> IO (AcceleratorEntry ())

-- | usage: (<tt>acceleratorEntryDelete obj</tt>).
acceleratorEntryDelete :: AcceleratorEntry a -> IO ()

-- | usage: (<tt>acceleratorEntryGetCommand obj</tt>).
acceleratorEntryGetCommand :: AcceleratorEntry a -> IO Int

-- | usage: (<tt>acceleratorEntryGetFlags obj</tt>).
acceleratorEntryGetFlags :: AcceleratorEntry a -> IO Int

-- | usage: (<tt>acceleratorEntryGetKeyCode obj</tt>).
acceleratorEntryGetKeyCode :: AcceleratorEntry a -> IO Int

-- | usage: (<tt>acceleratorEntrySet obj flags keyCode cmd</tt>).
acceleratorEntrySet :: AcceleratorEntry a -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>acceleratorTableCreate n entries</tt>).
acceleratorTableCreate :: Int -> Ptr b -> IO (AcceleratorTable ())

-- | usage: (<tt>acceleratorTableDelete obj</tt>).
acceleratorTableDelete :: AcceleratorTable a -> IO ()

-- | usage: (<tt>activateEventCopyObject obj obj</tt>).
activateEventCopyObject :: ActivateEvent a -> Ptr b -> IO ()

-- | usage: (<tt>activateEventGetActive obj</tt>).
activateEventGetActive :: ActivateEvent a -> IO Bool

-- | usage: (<tt>auiDefaultTabArtClone obj</tt>).
auiDefaultTabArtClone :: AuiDefaultTabArt a -> IO (AuiTabArt ())

-- | usage: (<tt>auiDefaultTabArtCreate</tt>).
auiDefaultTabArtCreate :: IO (AuiDefaultTabArt ())

-- | usage: (<tt>auiDefaultTabArtDrawBackground obj dc wnd rect</tt>).
auiDefaultTabArtDrawBackground :: AuiDefaultTabArt a -> DC b -> Window c -> Rect -> IO ()

-- | usage: (<tt>auiDefaultTabArtDrawButton obj dc wnd inRect bitmapId
--   buttonState orientation outRect</tt>).
auiDefaultTabArtDrawButton :: AuiDefaultTabArt a -> DC b -> Window c -> Rect -> Int -> Int -> Int -> Rect -> IO ()

-- | usage: (<tt>auiDefaultTabArtDrawTab obj dc wnd pane inRect
--   closeButtonState outTabRect outButtonRect xExtent</tt>).
auiDefaultTabArtDrawTab :: AuiDefaultTabArt a -> DC b -> Window c -> AuiNotebookPage d -> Rect -> Int -> Rect -> Rect -> Ptr CInt -> IO ()

-- | usage: (<tt>auiDefaultTabArtGetBestTabCtrlSize obj wnd pages
--   widthheight</tt>).
auiDefaultTabArtGetBestTabCtrlSize :: AuiDefaultTabArt a -> Window b -> AuiNotebookPageArray c -> Size -> IO Int

-- | usage: (<tt>auiDefaultTabArtGetIndentSize obj</tt>).
auiDefaultTabArtGetIndentSize :: AuiDefaultTabArt a -> IO Int

-- | usage: (<tt>auiDefaultTabArtGetTabSize obj dc wnd caption bitmap
--   active closeButtonState xExtent</tt>).
auiDefaultTabArtGetTabSize :: AuiDefaultTabArt a -> DC b -> Window c -> String -> Bitmap e -> Bool -> Int -> Ptr CInt -> IO (Size)

-- | usage: (<tt>auiDefaultTabArtSetActiveColour obj colour</tt>).
auiDefaultTabArtSetActiveColour :: AuiDefaultTabArt a -> Color -> IO ()

-- | usage: (<tt>auiDefaultTabArtSetColour obj colour</tt>).
auiDefaultTabArtSetColour :: AuiDefaultTabArt a -> Color -> IO ()

-- | usage: (<tt>auiDefaultTabArtSetFlags obj flags</tt>).
auiDefaultTabArtSetFlags :: AuiDefaultTabArt a -> Int -> IO ()

-- | usage: (<tt>auiDefaultTabArtSetMeasuringFont obj font</tt>).
auiDefaultTabArtSetMeasuringFont :: AuiDefaultTabArt a -> Font b -> IO ()

-- | usage: (<tt>auiDefaultTabArtSetNormalFont obj font</tt>).
auiDefaultTabArtSetNormalFont :: AuiDefaultTabArt a -> Font b -> IO ()

-- | usage: (<tt>auiDefaultTabArtSetSelectedFont obj font</tt>).
auiDefaultTabArtSetSelectedFont :: AuiDefaultTabArt a -> Font b -> IO ()

-- | usage: (<tt>auiDefaultTabArtSetSizingInfo obj widthheight
--   tabCount</tt>).
auiDefaultTabArtSetSizingInfo :: AuiDefaultTabArt a -> Size -> Int -> IO ()

-- | usage: (<tt>auiDefaultTabArtShowDropDown obj wnd items
--   activeIdx</tt>).
auiDefaultTabArtShowDropDown :: AuiDefaultTabArt a -> Window b -> AuiNotebookPageArray c -> Int -> IO Int

-- | usage: (<tt>auiDefaultToolBarArtClone obj</tt>).
auiDefaultToolBarArtClone :: AuiDefaultToolBarArt a -> IO (AuiToolBarArt ())

-- | usage: (<tt>auiDefaultToolBarArtCreate</tt>).
auiDefaultToolBarArtCreate :: IO (AuiDefaultToolBarArt ())

-- | usage: (<tt>auiDefaultToolBarArtDrawBackground obj dc wnd rect</tt>).
auiDefaultToolBarArtDrawBackground :: AuiDefaultToolBarArt a -> DC b -> Window c -> Rect -> IO ()

-- | usage: (<tt>auiDefaultToolBarArtDrawButton obj dc wnd item rect</tt>).
auiDefaultToolBarArtDrawButton :: AuiDefaultToolBarArt a -> DC b -> Window c -> AuiToolBarItem d -> Rect -> IO ()

-- | usage: (<tt>auiDefaultToolBarArtDrawControlLabel obj dc wnd item
--   rect</tt>).
auiDefaultToolBarArtDrawControlLabel :: AuiDefaultToolBarArt a -> DC b -> Window c -> AuiToolBarItem d -> Rect -> IO ()

-- | usage: (<tt>auiDefaultToolBarArtDrawDropDownButton obj dc wnd item
--   rect</tt>).
auiDefaultToolBarArtDrawDropDownButton :: AuiDefaultToolBarArt a -> DC b -> Window c -> AuiToolBarItem d -> Rect -> IO ()

-- | usage: (<tt>auiDefaultToolBarArtDrawGripper obj dc wnd rect</tt>).
auiDefaultToolBarArtDrawGripper :: AuiDefaultToolBarArt a -> DC b -> Window c -> Rect -> IO ()

-- | usage: (<tt>auiDefaultToolBarArtDrawLabel obj dc wnd item rect</tt>).
auiDefaultToolBarArtDrawLabel :: AuiDefaultToolBarArt a -> DC b -> Window c -> AuiToolBarItem d -> Rect -> IO ()

-- | usage: (<tt>auiDefaultToolBarArtDrawOverflowButton obj dc wnd rect
--   state</tt>).
auiDefaultToolBarArtDrawOverflowButton :: AuiDefaultToolBarArt a -> DC b -> Window c -> Rect -> Int -> IO ()

-- | usage: (<tt>auiDefaultToolBarArtDrawPlainBackground obj dc wnd
--   rect</tt>).
auiDefaultToolBarArtDrawPlainBackground :: AuiDefaultToolBarArt a -> DC b -> Window c -> Rect -> IO ()

-- | usage: (<tt>auiDefaultToolBarArtDrawSeparator obj dc wnd rect</tt>).
auiDefaultToolBarArtDrawSeparator :: AuiDefaultToolBarArt a -> DC b -> Window c -> Rect -> IO ()

-- | usage: (<tt>auiDefaultToolBarArtGetElementSize obj element</tt>).
auiDefaultToolBarArtGetElementSize :: AuiDefaultToolBarArt a -> Int -> IO Int

-- | usage: (<tt>auiDefaultToolBarArtGetFlags obj</tt>).
auiDefaultToolBarArtGetFlags :: AuiDefaultToolBarArt a -> IO Int

-- | usage: (<tt>auiDefaultToolBarArtGetFont obj</tt>).
auiDefaultToolBarArtGetFont :: AuiDefaultToolBarArt a -> IO (Font ())

-- | usage: (<tt>auiDefaultToolBarArtGetLabelSize obj dc wnd item</tt>).
auiDefaultToolBarArtGetLabelSize :: AuiDefaultToolBarArt a -> DC b -> Window c -> AuiToolBarItem d -> IO (Size)

-- | usage: (<tt>auiDefaultToolBarArtGetTextOrientation obj</tt>).
auiDefaultToolBarArtGetTextOrientation :: AuiDefaultToolBarArt a -> IO Int

-- | usage: (<tt>auiDefaultToolBarArtGetToolSize obj dc wnd item</tt>).
auiDefaultToolBarArtGetToolSize :: AuiDefaultToolBarArt a -> DC b -> Window c -> AuiToolBarItem d -> IO (Size)

-- | usage: (<tt>auiDefaultToolBarArtSetElementSize obj elementid
--   size</tt>).
auiDefaultToolBarArtSetElementSize :: AuiDefaultToolBarArt a -> Int -> Int -> IO ()

-- | usage: (<tt>auiDefaultToolBarArtSetFlags obj flags</tt>).
auiDefaultToolBarArtSetFlags :: AuiDefaultToolBarArt a -> Int -> IO ()

-- | usage: (<tt>auiDefaultToolBarArtSetFont obj font</tt>).
auiDefaultToolBarArtSetFont :: AuiDefaultToolBarArt a -> Font b -> IO ()

-- | usage: (<tt>auiDefaultToolBarArtSetTextOrientation obj
--   orientation</tt>).
auiDefaultToolBarArtSetTextOrientation :: AuiDefaultToolBarArt a -> Int -> IO ()

-- | usage: (<tt>auiDefaultToolBarArtShowDropDown obj wnd items</tt>).
auiDefaultToolBarArtShowDropDown :: AuiDefaultToolBarArt a -> Window b -> AuiToolBarItemArray c -> IO Int

-- | usage: (<tt>auiDockArtDrawBackground obj dc window orientation
--   rect</tt>).
auiDockArtDrawBackground :: AuiDockArt a -> DC b -> Window c -> Int -> Rect -> IO ()

-- | usage: (<tt>auiDockArtDrawBorder obj dc window rect pane</tt>).
auiDockArtDrawBorder :: AuiDockArt a -> DC b -> Window c -> Rect -> AuiPaneInfo e -> IO ()

-- | usage: (<tt>auiDockArtDrawCaption obj dc window text rect pane</tt>).
auiDockArtDrawCaption :: AuiDockArt a -> DC b -> Window c -> String -> Rect -> AuiPaneInfo f -> IO ()

-- | usage: (<tt>auiDockArtDrawGripper obj dc window rect pane</tt>).
auiDockArtDrawGripper :: AuiDockArt a -> DC b -> Window c -> Rect -> AuiPaneInfo e -> IO ()

-- | usage: (<tt>auiDockArtDrawPaneButton obj dc window button buttonstate
--   rect pane</tt>).
auiDockArtDrawPaneButton :: AuiDockArt a -> DC b -> Window c -> Int -> Int -> Rect -> AuiPaneInfo g -> IO ()

-- | usage: (<tt>auiDockArtDrawSash obj dc window orientation rect</tt>).
auiDockArtDrawSash :: AuiDockArt a -> DC b -> Window c -> Int -> Rect -> IO ()

-- | usage: (<tt>auiDockArtGetColour obj id</tt>).
auiDockArtGetColour :: AuiDockArt a -> Id -> IO (Color)

-- | usage: (<tt>auiDockArtGetFont obj id</tt>).
auiDockArtGetFont :: AuiDockArt a -> Id -> IO (Font ())

-- | usage: (<tt>auiDockArtGetMetric obj id</tt>).
auiDockArtGetMetric :: AuiDockArt a -> Id -> IO Int

-- | usage: (<tt>auiDockArtSetColour obj id colour</tt>).
auiDockArtSetColour :: AuiDockArt a -> Id -> Color -> IO ()

-- | usage: (<tt>auiDockArtSetFont obj id font</tt>).
auiDockArtSetFont :: AuiDockArt a -> Id -> Font c -> IO ()

-- | usage: (<tt>auiDockArtSetMetric obj id newval</tt>).
auiDockArtSetMetric :: AuiDockArt a -> Id -> Int -> IO ()

-- | usage: (<tt>auiManagerAddPane obj window direction caption</tt>).
auiManagerAddPane :: AuiManager a -> Window b -> Int -> String -> IO Bool

-- | usage: (<tt>auiManagerAddPaneByPaneInfo obj window paneinfo</tt>).
auiManagerAddPaneByPaneInfo :: AuiManager a -> Window b -> AuiPaneInfo c -> IO Bool

-- | usage: (<tt>auiManagerAddPaneByPaneInfoAndDropPosition obj window
--   paneinfo xy</tt>).
auiManagerAddPaneByPaneInfoAndDropPosition :: AuiManager a -> Window b -> AuiPaneInfo c -> Point -> IO Bool

-- | usage: (<tt>auiManagerCreate managedwnd flags</tt>).
auiManagerCreate :: Window a -> Int -> IO (AuiManager ())

-- | usage: (<tt>auiManagerDelete obj</tt>).
auiManagerDelete :: AuiManager a -> IO ()

-- | usage: (<tt>auiManagerDetachPane obj window</tt>).
auiManagerDetachPane :: AuiManager a -> Window b -> IO Bool

-- | usage: (<tt>auiManagerGetAllPanes obj</tt>).
auiManagerGetAllPanes :: AuiManager a -> IO (AuiPaneInfoArray ())

-- | usage: (<tt>auiManagerGetArtProvider obj</tt>).
auiManagerGetArtProvider :: AuiManager a -> IO (AuiDockArt ())

-- | usage: (<tt>auiManagerGetDockSizeConstraint obj widthpct
--   heightpct</tt>).
auiManagerGetDockSizeConstraint :: AuiManager a -> Ptr Double -> Ptr Double -> IO ()

-- | usage: (<tt>auiManagerGetFlags obj</tt>).
auiManagerGetFlags :: AuiManager a -> IO Int

-- | usage: (<tt>auiManagerGetManagedWindow obj</tt>).
auiManagerGetManagedWindow :: AuiManager a -> IO (Window ())

-- | usage: (<tt>auiManagerGetManager window</tt>).
auiManagerGetManager :: Window a -> IO (AuiManager ())

-- | usage: (<tt>auiManagerGetPaneByName obj name</tt>).
auiManagerGetPaneByName :: AuiManager a -> String -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiManagerGetPaneByWindow obj window</tt>).
auiManagerGetPaneByWindow :: AuiManager a -> Window b -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiManagerHideHint obj</tt>).
auiManagerHideHint :: AuiManager a -> IO ()

-- | usage: (<tt>auiManagerInsertPane obj window insertlocation
--   insertlevel</tt>).
auiManagerInsertPane :: AuiManager a -> Window b -> AuiPaneInfo c -> Int -> IO Bool

-- | usage: (<tt>auiManagerLoadPaneInfo obj panepart pane</tt>).
auiManagerLoadPaneInfo :: AuiManager a -> String -> AuiPaneInfo c -> IO ()

-- | usage: (<tt>auiManagerLoadPerspective obj perspective update</tt>).
auiManagerLoadPerspective :: AuiManager a -> String -> Bool -> IO Bool

-- | usage: (<tt>auiManagerSavePaneInfo obj pane</tt>).
auiManagerSavePaneInfo :: AuiManager a -> AuiPaneInfo b -> IO (String)

-- | usage: (<tt>auiManagerSavePerspective obj</tt>).
auiManagerSavePerspective :: AuiManager a -> IO (String)

-- | usage: (<tt>auiManagerSetArtProvider obj artprovider</tt>).
auiManagerSetArtProvider :: AuiManager a -> AuiDockArt b -> IO ()

-- | usage: (<tt>auiManagerSetDockSizeConstraint obj widthpct
--   heightpct</tt>).
auiManagerSetDockSizeConstraint :: AuiManager a -> Double -> Double -> IO ()

-- | usage: (<tt>auiManagerSetFlags obj flags</tt>).
auiManagerSetFlags :: AuiManager a -> Int -> IO ()

-- | usage: (<tt>auiManagerSetManagedWindow obj managedwnd</tt>).
auiManagerSetManagedWindow :: AuiManager a -> Window b -> IO ()

-- | usage: (<tt>auiManagerShowHint obj rect</tt>).
auiManagerShowHint :: AuiManager a -> Rect -> IO ()

-- | usage: (<tt>auiManagerUnInit obj</tt>).
auiManagerUnInit :: AuiManager a -> IO ()

-- | usage: (<tt>auiManagerUpdate obj</tt>).
auiManagerUpdate :: AuiManager a -> IO ()

-- | usage: (<tt>auiManagerEventCanVeto obj</tt>).
auiManagerEventCanVeto :: AuiManagerEvent a -> IO Bool

-- | usage: (<tt>auiManagerEventCreate wxtype</tt>).
auiManagerEventCreate :: Int -> IO (AuiManagerEvent ())

-- | usage: (<tt>auiManagerEventGetButton obj</tt>).
auiManagerEventGetButton :: AuiManagerEvent a -> IO Int

-- | usage: (<tt>auiManagerEventGetDC obj</tt>).
auiManagerEventGetDC :: AuiManagerEvent a -> IO (DC ())

-- | usage: (<tt>auiManagerEventGetManager obj</tt>).
auiManagerEventGetManager :: AuiManagerEvent a -> IO (AuiManager ())

-- | usage: (<tt>auiManagerEventGetPane obj</tt>).
auiManagerEventGetPane :: AuiManagerEvent a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiManagerEventGetVeto obj</tt>).
auiManagerEventGetVeto :: AuiManagerEvent a -> IO Bool

-- | usage: (<tt>auiManagerEventSetButton obj button</tt>).
auiManagerEventSetButton :: AuiManagerEvent a -> Int -> IO ()

-- | usage: (<tt>auiManagerEventSetCanVeto obj canveto</tt>).
auiManagerEventSetCanVeto :: AuiManagerEvent a -> Bool -> IO ()

-- | usage: (<tt>auiManagerEventSetDC obj pdc</tt>).
auiManagerEventSetDC :: AuiManagerEvent a -> DC b -> IO ()

-- | usage: (<tt>auiManagerEventSetManager obj manager</tt>).
auiManagerEventSetManager :: AuiManagerEvent a -> AuiManager b -> IO ()

-- | usage: (<tt>auiManagerEventSetPane obj pane</tt>).
auiManagerEventSetPane :: AuiManagerEvent a -> AuiPaneInfo b -> IO ()

-- | usage: (<tt>auiManagerEventVeto obj veto</tt>).
auiManagerEventVeto :: AuiManagerEvent a -> Bool -> IO ()

-- | usage: (<tt>auiNotebookAddPage obj page text select imageId</tt>).
auiNotebookAddPage :: AuiNotebook a -> Window b -> String -> Bool -> Int -> IO Bool

-- | usage: (<tt>auiNotebookAddPageWithBitmap obj page caption select
--   bitmap</tt>).
auiNotebookAddPageWithBitmap :: AuiNotebook a -> Window b -> String -> Bool -> Bitmap e -> IO Bool

-- | usage: (<tt>auiNotebookAdvanceSelection obj forward</tt>).
auiNotebookAdvanceSelection :: AuiNotebook a -> Bool -> IO ()

-- | usage: (<tt>auiNotebookChangeSelection obj n</tt>).
auiNotebookChangeSelection :: AuiNotebook a -> Int -> IO Int

-- | usage: (<tt>auiNotebookCreate parent id xy widthheight style</tt>).
auiNotebookCreate :: Window a -> Id -> Point -> Size -> Int -> IO (AuiNotebook ())

-- | usage: (<tt>auiNotebookCreateDefault</tt>).
auiNotebookCreateDefault :: IO (AuiNotebook ())

-- | usage: (<tt>auiNotebookCreateFromDefault obj parent id xy widthheight
--   style</tt>).
auiNotebookCreateFromDefault :: AuiNotebook a -> Window b -> Id -> Point -> Size -> Int -> IO Bool

-- | usage: (<tt>auiNotebookDeleteAllPages obj</tt>).
auiNotebookDeleteAllPages :: AuiNotebook a -> IO Bool

-- | usage: (<tt>auiNotebookDeletePage obj page</tt>).
auiNotebookDeletePage :: AuiNotebook a -> Int -> IO Bool

-- | usage: (<tt>auiNotebookGetArtProvider obj</tt>).
auiNotebookGetArtProvider :: AuiNotebook a -> IO (AuiTabArt ())

-- | usage: (<tt>auiNotebookGetCurrentPage obj</tt>).
auiNotebookGetCurrentPage :: AuiNotebook a -> IO (Window ())

-- | usage: (<tt>auiNotebookGetHeightForPageHeight obj pageHeight</tt>).
auiNotebookGetHeightForPageHeight :: AuiNotebook a -> Int -> IO Int

-- | usage: (<tt>auiNotebookGetPage obj pageidx</tt>).
auiNotebookGetPage :: AuiNotebook a -> Int -> IO (Window ())

-- | usage: (<tt>auiNotebookGetPageBitmap obj page</tt>).
auiNotebookGetPageBitmap :: AuiNotebook a -> Int -> IO (Bitmap ())

-- | usage: (<tt>auiNotebookGetPageCount obj</tt>).
auiNotebookGetPageCount :: AuiNotebook a -> IO Int

-- | usage: (<tt>auiNotebookGetPageIndex obj pagewnd</tt>).
auiNotebookGetPageIndex :: AuiNotebook a -> Window b -> IO Int

-- | usage: (<tt>auiNotebookGetPageText obj page</tt>).
auiNotebookGetPageText :: AuiNotebook a -> Int -> IO (String)

-- | usage: (<tt>auiNotebookGetPageToolTip obj pageIdx</tt>).
auiNotebookGetPageToolTip :: AuiNotebook a -> Int -> IO (String)

-- | usage: (<tt>auiNotebookGetSelection obj</tt>).
auiNotebookGetSelection :: AuiNotebook a -> IO Int

-- | usage: (<tt>auiNotebookGetTabCtrlHeight obj</tt>).
auiNotebookGetTabCtrlHeight :: AuiNotebook a -> IO Int

-- | usage: (<tt>auiNotebookInsertPage obj index page text select
--   imageId</tt>).
auiNotebookInsertPage :: AuiNotebook a -> Int -> Window c -> String -> Bool -> Int -> IO Bool

-- | usage: (<tt>auiNotebookInsertPageWithBitmap obj pageidx page caption
--   select bitmap</tt>).
auiNotebookInsertPageWithBitmap :: AuiNotebook a -> Int -> Window c -> String -> Bool -> Bitmap f -> IO Bool

-- | usage: (<tt>auiNotebookRemovePage obj page</tt>).
auiNotebookRemovePage :: AuiNotebook a -> Int -> IO Bool

-- | usage: (<tt>auiNotebookSetArtProvider obj art</tt>).
auiNotebookSetArtProvider :: AuiNotebook a -> AuiTabArt b -> IO ()

-- | usage: (<tt>auiNotebookSetFont obj font</tt>).
auiNotebookSetFont :: AuiNotebook a -> Font b -> IO Bool

-- | usage: (<tt>auiNotebookSetMeasuringFont obj font</tt>).
auiNotebookSetMeasuringFont :: AuiNotebook a -> Font b -> IO ()

-- | usage: (<tt>auiNotebookSetNormalFont obj font</tt>).
auiNotebookSetNormalFont :: AuiNotebook a -> Font b -> IO ()

-- | usage: (<tt>auiNotebookSetPageBitmap obj page bitmap</tt>).
auiNotebookSetPageBitmap :: AuiNotebook a -> Int -> Bitmap c -> IO Bool

-- | usage: (<tt>auiNotebookSetPageImage obj n imageId</tt>).
auiNotebookSetPageImage :: AuiNotebook a -> Int -> Int -> IO Bool

-- | usage: (<tt>auiNotebookSetPageText obj page text</tt>).
auiNotebookSetPageText :: AuiNotebook a -> Int -> String -> IO Bool

-- | usage: (<tt>auiNotebookSetPageToolTip obj page text</tt>).
auiNotebookSetPageToolTip :: AuiNotebook a -> Int -> String -> IO Bool

-- | usage: (<tt>auiNotebookSetSelectedFont obj font</tt>).
auiNotebookSetSelectedFont :: AuiNotebook a -> Font b -> IO ()

-- | usage: (<tt>auiNotebookSetSelection obj newpage</tt>).
auiNotebookSetSelection :: AuiNotebook a -> Int -> IO Int

-- | usage: (<tt>auiNotebookSetTabCtrlHeight obj height</tt>).
auiNotebookSetTabCtrlHeight :: AuiNotebook a -> Int -> IO ()

-- | usage: (<tt>auiNotebookSetUniformBitmapSize obj widthheight</tt>).
auiNotebookSetUniformBitmapSize :: AuiNotebook a -> Size -> IO ()

-- | usage: (<tt>auiNotebookShowWindowMenu obj</tt>).
auiNotebookShowWindowMenu :: AuiNotebook a -> IO Bool

-- | usage: (<tt>auiNotebookSplit obj page direction</tt>).
auiNotebookSplit :: AuiNotebook a -> Int -> Int -> IO ()

-- | usage: (<tt>auiNotebookEventCreate commandtype winid</tt>).
auiNotebookEventCreate :: Int -> Int -> IO (AuiNotebookEvent ())

-- | usage: (<tt>auiNotebookEventGetDragSource obj</tt>).
auiNotebookEventGetDragSource :: AuiNotebookEvent a -> IO (AuiNotebook ())

-- | usage: (<tt>auiNotebookPageActive obj</tt>).
auiNotebookPageActive :: AuiNotebookPage a -> IO Bool

-- | usage: (<tt>auiNotebookPageBitmap obj</tt>).
auiNotebookPageBitmap :: AuiNotebookPage a -> IO (Bitmap ())

-- | usage: (<tt>auiNotebookPageCaption obj</tt>).
auiNotebookPageCaption :: AuiNotebookPage a -> IO (String)

-- | usage: (<tt>auiNotebookPageRect obj</tt>).
auiNotebookPageRect :: AuiNotebookPage a -> IO (Rect)

-- | usage: (<tt>auiNotebookPageTooltip obj</tt>).
auiNotebookPageTooltip :: AuiNotebookPage a -> IO (String)

-- | usage: (<tt>auiNotebookPageWindow obj</tt>).
auiNotebookPageWindow :: AuiNotebookPage a -> IO (Window ())

-- | usage: (<tt>auiNotebookPageArrayCreate</tt>).
auiNotebookPageArrayCreate :: IO (AuiNotebookPageArray ())

-- | usage: (<tt>auiNotebookPageArrayDelete obj</tt>).
auiNotebookPageArrayDelete :: AuiNotebookPageArray a -> IO ()

-- | usage: (<tt>auiNotebookPageArrayGetCount obj</tt>).
auiNotebookPageArrayGetCount :: AuiNotebookPageArray a -> IO Int

-- | usage: (<tt>auiNotebookPageArrayItem obj idx</tt>).
auiNotebookPageArrayItem :: AuiNotebookPageArray a -> Int -> IO (AuiNotebookPage ())

-- | usage: (<tt>auiPaneInfoBestSize obj widthheight</tt>).
auiPaneInfoBestSize :: AuiPaneInfo a -> Size -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoBestSizeXY obj xy</tt>).
auiPaneInfoBestSizeXY :: AuiPaneInfo a -> Point -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoBottom obj</tt>).
auiPaneInfoBottom :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoBottomDockable obj b</tt>).
auiPaneInfoBottomDockable :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoCaption obj c</tt>).
auiPaneInfoCaption :: AuiPaneInfo a -> String -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoCaptionVisible obj visible</tt>).
auiPaneInfoCaptionVisible :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoCenter obj</tt>).
auiPaneInfoCenter :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoCenterPane obj</tt>).
auiPaneInfoCenterPane :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoCentre obj</tt>).
auiPaneInfoCentre :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoCentrePane obj</tt>).
auiPaneInfoCentrePane :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoCloseButton obj visible</tt>).
auiPaneInfoCloseButton :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoCopy obj c</tt>).
auiPaneInfoCopy :: AuiPaneInfo a -> AuiPaneInfo b -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoCreate c</tt>).
auiPaneInfoCreate :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoCreateDefault</tt>).
auiPaneInfoCreateDefault :: IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoDefaultPane obj</tt>).
auiPaneInfoDefaultPane :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoDestroyOnClose obj b</tt>).
auiPaneInfoDestroyOnClose :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoDirection obj direction</tt>).
auiPaneInfoDirection :: AuiPaneInfo a -> Int -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoDock obj</tt>).
auiPaneInfoDock :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoDockFixed obj b</tt>).
auiPaneInfoDockFixed :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoDockable obj b</tt>).
auiPaneInfoDockable :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoFixed obj</tt>).
auiPaneInfoFixed :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoFloat obj</tt>).
auiPaneInfoFloat :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoFloatable obj b</tt>).
auiPaneInfoFloatable :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoFloatingPosition obj xy</tt>).
auiPaneInfoFloatingPosition :: AuiPaneInfo a -> Point -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoFloatingPositionXY obj xy</tt>).
auiPaneInfoFloatingPositionXY :: AuiPaneInfo a -> Point -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoFloatingSize obj widthheight</tt>).
auiPaneInfoFloatingSize :: AuiPaneInfo a -> Size -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoFloatingSizeXY obj xy</tt>).
auiPaneInfoFloatingSizeXY :: AuiPaneInfo a -> Point -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoGripper obj visible</tt>).
auiPaneInfoGripper :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoGripperTop obj attop</tt>).
auiPaneInfoGripperTop :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoHasBorder obj</tt>).
auiPaneInfoHasBorder :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoHasCaption obj</tt>).
auiPaneInfoHasCaption :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoHasCloseButton obj</tt>).
auiPaneInfoHasCloseButton :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoHasFlag obj flag</tt>).
auiPaneInfoHasFlag :: AuiPaneInfo a -> Int -> IO Bool

-- | usage: (<tt>auiPaneInfoHasGripper obj</tt>).
auiPaneInfoHasGripper :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoHasGripperTop obj</tt>).
auiPaneInfoHasGripperTop :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoHasMaximizeButton obj</tt>).
auiPaneInfoHasMaximizeButton :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoHasMinimizeButton obj</tt>).
auiPaneInfoHasMinimizeButton :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoHasPinButton obj</tt>).
auiPaneInfoHasPinButton :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoHide obj</tt>).
auiPaneInfoHide :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoIcon obj b</tt>).
auiPaneInfoIcon :: AuiPaneInfo a -> Bitmap b -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoIsBottomDockable obj</tt>).
auiPaneInfoIsBottomDockable :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoIsDockable obj</tt>).
auiPaneInfoIsDockable :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoIsDocked obj</tt>).
auiPaneInfoIsDocked :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoIsFixed obj</tt>).
auiPaneInfoIsFixed :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoIsFloatable obj</tt>).
auiPaneInfoIsFloatable :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoIsFloating obj</tt>).
auiPaneInfoIsFloating :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoIsLeftDockable obj</tt>).
auiPaneInfoIsLeftDockable :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoIsMovable obj</tt>).
auiPaneInfoIsMovable :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoIsOk obj</tt>).
auiPaneInfoIsOk :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoIsResizable obj</tt>).
auiPaneInfoIsResizable :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoIsRightDockable obj</tt>).
auiPaneInfoIsRightDockable :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoIsShown obj</tt>).
auiPaneInfoIsShown :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoIsToolbar obj</tt>).
auiPaneInfoIsToolbar :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoIsTopDockable obj</tt>).
auiPaneInfoIsTopDockable :: AuiPaneInfo a -> IO Bool

-- | usage: (<tt>auiPaneInfoLayer obj layer</tt>).
auiPaneInfoLayer :: AuiPaneInfo a -> Int -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoLeft obj</tt>).
auiPaneInfoLeft :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoLeftDockable obj b</tt>).
auiPaneInfoLeftDockable :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoMaxSize obj widthheight</tt>).
auiPaneInfoMaxSize :: AuiPaneInfo a -> Size -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoMaxSizeXY obj xy</tt>).
auiPaneInfoMaxSizeXY :: AuiPaneInfo a -> Point -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoMaximizeButton obj visible</tt>).
auiPaneInfoMaximizeButton :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoMinSize obj widthheight</tt>).
auiPaneInfoMinSize :: AuiPaneInfo a -> Size -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoMinSizeXY obj xy</tt>).
auiPaneInfoMinSizeXY :: AuiPaneInfo a -> Point -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoMinimizeButton obj visible</tt>).
auiPaneInfoMinimizeButton :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoMovable obj b</tt>).
auiPaneInfoMovable :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoName obj n</tt>).
auiPaneInfoName :: AuiPaneInfo a -> String -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoPaneBorder obj visible</tt>).
auiPaneInfoPaneBorder :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoPinButton obj visible</tt>).
auiPaneInfoPinButton :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoPosition obj pos</tt>).
auiPaneInfoPosition :: AuiPaneInfo a -> Int -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoResizable obj resizable</tt>).
auiPaneInfoResizable :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoRight obj</tt>).
auiPaneInfoRight :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoRightDockable obj b</tt>).
auiPaneInfoRightDockable :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoRow obj row</tt>).
auiPaneInfoRow :: AuiPaneInfo a -> Int -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoSafeSet obj source</tt>).
auiPaneInfoSafeSet :: AuiPaneInfo a -> AuiPaneInfo b -> IO ()

-- | usage: (<tt>auiPaneInfoSetFlag obj flag optionstate</tt>).
auiPaneInfoSetFlag :: AuiPaneInfo a -> Int -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoShow obj show</tt>).
auiPaneInfoShow :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoToolbarPane obj</tt>).
auiPaneInfoToolbarPane :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoTop obj</tt>).
auiPaneInfoTop :: AuiPaneInfo a -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoTopDockable obj b</tt>).
auiPaneInfoTopDockable :: AuiPaneInfo a -> Bool -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoWindow obj w</tt>).
auiPaneInfoWindow :: AuiPaneInfo a -> Window b -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiPaneInfoArrayCreate</tt>).
auiPaneInfoArrayCreate :: IO (AuiPaneInfoArray ())

-- | usage: (<tt>auiPaneInfoArrayDelete obj</tt>).
auiPaneInfoArrayDelete :: AuiPaneInfoArray a -> IO ()

-- | usage: (<tt>auiPaneInfoArrayGetCount obj</tt>).
auiPaneInfoArrayGetCount :: AuiPaneInfoArray a -> IO Int

-- | usage: (<tt>auiPaneInfoArrayItem obj idx</tt>).
auiPaneInfoArrayItem :: AuiPaneInfoArray a -> Int -> IO (AuiPaneInfo ())

-- | usage: (<tt>auiSimpleTabArtClone obj</tt>).
auiSimpleTabArtClone :: AuiSimpleTabArt a -> IO (AuiTabArt ())

-- | usage: (<tt>auiSimpleTabArtCreate</tt>).
auiSimpleTabArtCreate :: IO (AuiSimpleTabArt ())

-- | usage: (<tt>auiSimpleTabArtDrawBackground obj dc wnd rect</tt>).
auiSimpleTabArtDrawBackground :: AuiSimpleTabArt a -> DC b -> Window c -> Rect -> IO ()

-- | usage: (<tt>auiSimpleTabArtDrawButton obj dc wnd inRect bitmapId
--   buttonState orientation outRect</tt>).
auiSimpleTabArtDrawButton :: AuiSimpleTabArt a -> DC b -> Window c -> Rect -> Int -> Int -> Int -> Rect -> IO ()

-- | usage: (<tt>auiSimpleTabArtDrawTab obj dc wnd pane inRect
--   closeButtonState outTabRect outButtonRect xExtent</tt>).
auiSimpleTabArtDrawTab :: AuiSimpleTabArt a -> DC b -> Window c -> AuiNotebookPage d -> Rect -> Int -> Rect -> Rect -> Ptr CInt -> IO ()

-- | usage: (<tt>auiSimpleTabArtGetBestTabCtrlSize obj wnd pages
--   widthheight</tt>).
auiSimpleTabArtGetBestTabCtrlSize :: AuiSimpleTabArt a -> Window b -> AuiNotebookPageArray c -> Size -> IO Int

-- | usage: (<tt>auiSimpleTabArtGetIndentSize obj</tt>).
auiSimpleTabArtGetIndentSize :: AuiSimpleTabArt a -> IO Int

-- | usage: (<tt>auiSimpleTabArtGetTabSize obj dc wnd caption bitmap active
--   closeButtonState xExtent</tt>).
auiSimpleTabArtGetTabSize :: AuiSimpleTabArt a -> DC b -> Window c -> String -> Bitmap e -> Bool -> Int -> Ptr CInt -> IO (Size)

-- | usage: (<tt>auiSimpleTabArtSetActiveColour obj colour</tt>).
auiSimpleTabArtSetActiveColour :: AuiSimpleTabArt a -> Color -> IO ()

-- | usage: (<tt>auiSimpleTabArtSetColour obj colour</tt>).
auiSimpleTabArtSetColour :: AuiSimpleTabArt a -> Color -> IO ()

-- | usage: (<tt>auiSimpleTabArtSetFlags obj flags</tt>).
auiSimpleTabArtSetFlags :: AuiSimpleTabArt a -> Int -> IO ()

-- | usage: (<tt>auiSimpleTabArtSetMeasuringFont obj font</tt>).
auiSimpleTabArtSetMeasuringFont :: AuiSimpleTabArt a -> Font b -> IO ()

-- | usage: (<tt>auiSimpleTabArtSetNormalFont obj font</tt>).
auiSimpleTabArtSetNormalFont :: AuiSimpleTabArt a -> Font b -> IO ()

-- | usage: (<tt>auiSimpleTabArtSetSelectedFont obj font</tt>).
auiSimpleTabArtSetSelectedFont :: AuiSimpleTabArt a -> Font b -> IO ()

-- | usage: (<tt>auiSimpleTabArtSetSizingInfo obj widthheight
--   tabCount</tt>).
auiSimpleTabArtSetSizingInfo :: AuiSimpleTabArt a -> Size -> Int -> IO ()

-- | usage: (<tt>auiSimpleTabArtShowDropDown obj wnd items activeIdx</tt>).
auiSimpleTabArtShowDropDown :: AuiSimpleTabArt a -> Window b -> AuiNotebookPageArray c -> Int -> IO Int

-- | usage: (<tt>auiTabArtClone obj</tt>).
auiTabArtClone :: AuiTabArt a -> IO (AuiTabArt ())

-- | usage: (<tt>auiTabArtDrawBackground obj dc wnd rect</tt>).
auiTabArtDrawBackground :: AuiTabArt a -> DC b -> Window c -> Rect -> IO ()

-- | usage: (<tt>auiTabArtDrawButton obj dc wnd inrect bitmapid buttonstate
--   orientation outrect</tt>).
auiTabArtDrawButton :: AuiTabArt a -> DC b -> Window c -> Rect -> Int -> Int -> Int -> Rect -> IO ()

-- | usage: (<tt>auiTabArtDrawTab obj dc wnd page rect closebuttonstate
--   outtabrect outbuttonrect xextent</tt>).
auiTabArtDrawTab :: AuiTabArt a -> DC b -> Window c -> AuiNotebookPage d -> Rect -> Int -> Rect -> Rect -> Ptr CInt -> IO ()

-- | usage: (<tt>auiTabArtGetBestTabCtrlSize obj wnd pages
--   widthheight</tt>).
auiTabArtGetBestTabCtrlSize :: AuiTabArt a -> Window b -> AuiNotebookPageArray c -> Size -> IO Int

-- | usage: (<tt>auiTabArtGetIndentSize obj</tt>).
auiTabArtGetIndentSize :: AuiTabArt a -> IO Int

-- | usage: (<tt>auiTabArtGetTabSize obj dc wnd caption bitmap active
--   closebuttonstate xextent</tt>).
auiTabArtGetTabSize :: AuiTabArt a -> DC b -> Window c -> String -> Bitmap e -> Bool -> Int -> Ptr CInt -> IO (Size)

-- | usage: (<tt>auiTabArtSetActiveColour obj colour</tt>).
auiTabArtSetActiveColour :: AuiTabArt a -> Color -> IO ()

-- | usage: (<tt>auiTabArtSetColour obj colour</tt>).
auiTabArtSetColour :: AuiTabArt a -> Color -> IO ()

-- | usage: (<tt>auiTabArtSetFlags obj flags</tt>).
auiTabArtSetFlags :: AuiTabArt a -> Int -> IO ()

-- | usage: (<tt>auiTabArtSetMeasuringFont obj font</tt>).
auiTabArtSetMeasuringFont :: AuiTabArt a -> Font b -> IO ()

-- | usage: (<tt>auiTabArtSetNormalFont obj font</tt>).
auiTabArtSetNormalFont :: AuiTabArt a -> Font b -> IO ()

-- | usage: (<tt>auiTabArtSetSelectedFont obj font</tt>).
auiTabArtSetSelectedFont :: AuiTabArt a -> Font b -> IO ()

-- | usage: (<tt>auiTabArtSetSizingInfo obj widthheight tabcount</tt>).
auiTabArtSetSizingInfo :: AuiTabArt a -> Size -> Int -> IO ()

-- | usage: (<tt>auiTabContainerAddButton obj id location normalBitmap
--   disabledBitmap</tt>).
auiTabContainerAddButton :: AuiTabContainer a -> Id -> Int -> Bitmap d -> Bitmap e -> IO ()

-- | usage: (<tt>auiTabContainerAddPage obj page info</tt>).
auiTabContainerAddPage :: AuiTabContainer a -> Window b -> AuiNotebookPage c -> IO Bool

-- | usage: (<tt>auiTabContainerCreate</tt>).
auiTabContainerCreate :: IO (AuiTabContainer ())

-- | usage: (<tt>auiTabContainerDoShowHide obj</tt>).
auiTabContainerDoShowHide :: AuiTabContainer a -> IO ()

-- | usage: (<tt>auiTabContainerGetActivePage obj</tt>).
auiTabContainerGetActivePage :: AuiTabContainer a -> IO Int

-- | usage: (<tt>auiTabContainerGetArtProvider obj</tt>).
auiTabContainerGetArtProvider :: AuiTabContainer a -> IO (AuiTabArt ())

-- | usage: (<tt>auiTabContainerGetFlags obj</tt>).
auiTabContainerGetFlags :: AuiTabContainer a -> IO Int

-- | usage: (<tt>auiTabContainerGetIdxFromWindow obj page</tt>).
auiTabContainerGetIdxFromWindow :: AuiTabContainer a -> Window b -> IO Int

-- | usage: (<tt>auiTabContainerGetPage obj idx</tt>).
auiTabContainerGetPage :: AuiTabContainer a -> Int -> IO (AuiNotebookPage ())

-- | usage: (<tt>auiTabContainerGetPageCount obj</tt>).
auiTabContainerGetPageCount :: AuiTabContainer a -> IO Int

-- | usage: (<tt>auiTabContainerGetPages obj</tt>).
auiTabContainerGetPages :: AuiTabContainer a -> IO (AuiNotebookPageArray ())

-- | usage: (<tt>auiTabContainerGetTabOffset obj</tt>).
auiTabContainerGetTabOffset :: AuiTabContainer a -> IO Int

-- | usage: (<tt>auiTabContainerGetWindowFromIdx obj idx</tt>).
auiTabContainerGetWindowFromIdx :: AuiTabContainer a -> Int -> IO (Window ())

-- | usage: (<tt>auiTabContainerInsertPage obj page info idx</tt>).
auiTabContainerInsertPage :: AuiTabContainer a -> Window b -> AuiNotebookPage c -> Int -> IO Bool

-- | usage: (<tt>auiTabContainerIsTabVisible obj tabPage tabOffset dc
--   wnd</tt>).
auiTabContainerIsTabVisible :: AuiTabContainer a -> Int -> Int -> DC d -> Window e -> IO Bool

-- | usage: (<tt>auiTabContainerMakeTabVisible obj tabPage win</tt>).
auiTabContainerMakeTabVisible :: AuiTabContainer a -> Int -> Window c -> IO ()

-- | usage: (<tt>auiTabContainerMovePage obj page newIdx</tt>).
auiTabContainerMovePage :: AuiTabContainer a -> Window b -> Int -> IO Bool

-- | usage: (<tt>auiTabContainerRemoveButton obj id</tt>).
auiTabContainerRemoveButton :: AuiTabContainer a -> Id -> IO ()

-- | usage: (<tt>auiTabContainerRemovePage obj page</tt>).
auiTabContainerRemovePage :: AuiTabContainer a -> Window b -> IO Bool

-- | usage: (<tt>auiTabContainerSetActiveColour obj colour</tt>).
auiTabContainerSetActiveColour :: AuiTabContainer a -> Color -> IO ()

-- | usage: (<tt>auiTabContainerSetActivePage obj page</tt>).
auiTabContainerSetActivePage :: AuiTabContainer a -> Int -> IO Bool

-- | usage: (<tt>auiTabContainerSetActivePageByWindow obj page</tt>).
auiTabContainerSetActivePageByWindow :: AuiTabContainer a -> Window b -> IO Bool

-- | usage: (<tt>auiTabContainerSetArtProvider obj art</tt>).
auiTabContainerSetArtProvider :: AuiTabContainer a -> AuiTabArt b -> IO ()

-- | usage: (<tt>auiTabContainerSetColour obj colour</tt>).
auiTabContainerSetColour :: AuiTabContainer a -> Color -> IO ()

-- | usage: (<tt>auiTabContainerSetFlags obj flags</tt>).
auiTabContainerSetFlags :: AuiTabContainer a -> Int -> IO ()

-- | usage: (<tt>auiTabContainerSetMeasuringFont obj measuringFont</tt>).
auiTabContainerSetMeasuringFont :: AuiTabContainer a -> Font b -> IO ()

-- | usage: (<tt>auiTabContainerSetNoneActive obj</tt>).
auiTabContainerSetNoneActive :: AuiTabContainer a -> IO ()

-- | usage: (<tt>auiTabContainerSetNormalFont obj normalFont</tt>).
auiTabContainerSetNormalFont :: AuiTabContainer a -> Font b -> IO ()

-- | usage: (<tt>auiTabContainerSetRect obj rect</tt>).
auiTabContainerSetRect :: AuiTabContainer a -> Rect -> IO ()

-- | usage: (<tt>auiTabContainerSetSelectedFont obj selectedFont</tt>).
auiTabContainerSetSelectedFont :: AuiTabContainer a -> Font b -> IO ()

-- | usage: (<tt>auiTabContainerSetTabOffset obj offset</tt>).
auiTabContainerSetTabOffset :: AuiTabContainer a -> Int -> IO ()

-- | usage: (<tt>auiTabContainerButtonBitmap obj</tt>).
auiTabContainerButtonBitmap :: AuiTabContainerButton a -> IO (Bitmap ())

-- | usage: (<tt>auiTabContainerButtonCurState obj</tt>).
auiTabContainerButtonCurState :: AuiTabContainerButton a -> IO Int

-- | usage: (<tt>auiTabContainerButtonDisBitmap obj</tt>).
auiTabContainerButtonDisBitmap :: AuiTabContainerButton a -> IO (Bitmap ())

-- | usage: (<tt>auiTabContainerButtonId obj</tt>).
auiTabContainerButtonId :: AuiTabContainerButton a -> IO Int

-- | usage: (<tt>auiTabContainerButtonLocation obj</tt>).
auiTabContainerButtonLocation :: AuiTabContainerButton a -> IO Int

-- | usage: (<tt>auiTabContainerButtonRect obj</tt>).
auiTabContainerButtonRect :: AuiTabContainerButton a -> IO (Rect)

-- | usage: (<tt>auiTabCtrlAddButton obj id location normalBitmap
--   disabledBitmap</tt>).
auiTabCtrlAddButton :: AuiTabCtrl a -> Id -> Int -> Bitmap d -> Bitmap e -> IO ()

-- | usage: (<tt>auiTabCtrlAddPage obj page info</tt>).
auiTabCtrlAddPage :: AuiTabCtrl a -> Window b -> AuiNotebookPage c -> IO Bool

-- | usage: (<tt>auiTabCtrlDoShowHide obj</tt>).
auiTabCtrlDoShowHide :: AuiTabCtrl a -> IO ()

-- | usage: (<tt>auiTabCtrlGetActivePage obj</tt>).
auiTabCtrlGetActivePage :: AuiTabCtrl a -> IO Int

-- | usage: (<tt>auiTabCtrlGetArtProvider obj</tt>).
auiTabCtrlGetArtProvider :: AuiTabCtrl a -> IO (AuiTabArt ())

-- | usage: (<tt>auiTabCtrlGetFlags obj</tt>).
auiTabCtrlGetFlags :: AuiTabCtrl a -> IO Int

-- | usage: (<tt>auiTabCtrlGetIdxFromWindow obj page</tt>).
auiTabCtrlGetIdxFromWindow :: AuiTabCtrl a -> Window b -> IO Int

-- | usage: (<tt>auiTabCtrlGetPage obj idx</tt>).
auiTabCtrlGetPage :: AuiTabCtrl a -> Int -> IO (AuiNotebookPage ())

-- | usage: (<tt>auiTabCtrlGetPageCount obj</tt>).
auiTabCtrlGetPageCount :: AuiTabCtrl a -> IO Int

-- | usage: (<tt>auiTabCtrlGetPages obj</tt>).
auiTabCtrlGetPages :: AuiTabCtrl a -> IO (AuiNotebookPageArray ())

-- | usage: (<tt>auiTabCtrlGetTabOffset obj</tt>).
auiTabCtrlGetTabOffset :: AuiTabCtrl a -> IO Int

-- | usage: (<tt>auiTabCtrlGetWindowFromIdx obj idx</tt>).
auiTabCtrlGetWindowFromIdx :: AuiTabCtrl a -> Int -> IO (Window ())

-- | usage: (<tt>auiTabCtrlInsertPage obj page info idx</tt>).
auiTabCtrlInsertPage :: AuiTabCtrl a -> Window b -> AuiNotebookPage c -> Int -> IO Bool

-- | usage: (<tt>auiTabCtrlIsTabVisible obj tabPage tabOffset dc wnd</tt>).
auiTabCtrlIsTabVisible :: AuiTabCtrl a -> Int -> Int -> DC d -> Window e -> IO Bool

-- | usage: (<tt>auiTabCtrlMakeTabVisible obj tabPage win</tt>).
auiTabCtrlMakeTabVisible :: AuiTabCtrl a -> Int -> Window c -> IO ()

-- | usage: (<tt>auiTabCtrlMovePage obj page newIdx</tt>).
auiTabCtrlMovePage :: AuiTabCtrl a -> Window b -> Int -> IO Bool

-- | usage: (<tt>auiTabCtrlRemoveButton obj id</tt>).
auiTabCtrlRemoveButton :: AuiTabCtrl a -> Id -> IO ()

-- | usage: (<tt>auiTabCtrlRemovePage obj page</tt>).
auiTabCtrlRemovePage :: AuiTabCtrl a -> Window b -> IO Bool

-- | usage: (<tt>auiTabCtrlSetActiveColour obj colour</tt>).
auiTabCtrlSetActiveColour :: AuiTabCtrl a -> Color -> IO ()

-- | usage: (<tt>auiTabCtrlSetActivePage obj page</tt>).
auiTabCtrlSetActivePage :: AuiTabCtrl a -> Int -> IO Bool

-- | usage: (<tt>auiTabCtrlSetActivePageByWindow obj page</tt>).
auiTabCtrlSetActivePageByWindow :: AuiTabCtrl a -> Window b -> IO Bool

-- | usage: (<tt>auiTabCtrlSetArtProvider obj art</tt>).
auiTabCtrlSetArtProvider :: AuiTabCtrl a -> AuiTabArt b -> IO ()

-- | usage: (<tt>auiTabCtrlSetColour obj colour</tt>).
auiTabCtrlSetColour :: AuiTabCtrl a -> Color -> IO ()

-- | usage: (<tt>auiTabCtrlSetFlags obj flags</tt>).
auiTabCtrlSetFlags :: AuiTabCtrl a -> Int -> IO ()

-- | usage: (<tt>auiTabCtrlSetMeasuringFont obj measuringFont</tt>).
auiTabCtrlSetMeasuringFont :: AuiTabCtrl a -> Font b -> IO ()

-- | usage: (<tt>auiTabCtrlSetNoneActive obj</tt>).
auiTabCtrlSetNoneActive :: AuiTabCtrl a -> IO ()

-- | usage: (<tt>auiTabCtrlSetNormalFont obj normalFont</tt>).
auiTabCtrlSetNormalFont :: AuiTabCtrl a -> Font b -> IO ()

-- | usage: (<tt>auiTabCtrlSetRect obj rect</tt>).
auiTabCtrlSetRect :: AuiTabCtrl a -> Rect -> IO ()

-- | usage: (<tt>auiTabCtrlSetSelectedFont obj selectedFont</tt>).
auiTabCtrlSetSelectedFont :: AuiTabCtrl a -> Font b -> IO ()

-- | usage: (<tt>auiTabCtrlSetTabOffset obj offset</tt>).
auiTabCtrlSetTabOffset :: AuiTabCtrl a -> Int -> IO ()

-- | usage: (<tt>auiToolBarAddControl obj control label</tt>).
auiToolBarAddControl :: AuiToolBar a -> Control b -> String -> IO (AuiToolBarItem ())

-- | usage: (<tt>auiToolBarAddLabel obj toolid label width</tt>).
auiToolBarAddLabel :: AuiToolBar a -> Int -> String -> Int -> IO (AuiToolBarItem ())

-- | usage: (<tt>auiToolBarAddSeparator obj</tt>).
auiToolBarAddSeparator :: AuiToolBar a -> IO (AuiToolBarItem ())

-- | usage: (<tt>auiToolBarAddSpacer obj pixels</tt>).
auiToolBarAddSpacer :: AuiToolBar a -> Int -> IO (AuiToolBarItem ())

-- | usage: (<tt>auiToolBarAddStretchSpacer obj proportion</tt>).
auiToolBarAddStretchSpacer :: AuiToolBar a -> Int -> IO (AuiToolBarItem ())

-- | usage: (<tt>auiToolBarAddTool obj toolid label bitmap disabledbitmap
--   kind shorthelpstring longhelpstring clientdata</tt>).
auiToolBarAddTool :: AuiToolBar a -> Int -> String -> Bitmap d -> Bitmap e -> Int -> String -> String -> WxObject i -> IO (AuiToolBarItem ())

-- | usage: (<tt>auiToolBarAddToolByBitmap obj toolid bitmap disabledbitmap
--   toggle clientdata shorthelpstring longhelpstring</tt>).
auiToolBarAddToolByBitmap :: AuiToolBar a -> Int -> Bitmap c -> Bitmap d -> Bool -> WxObject f -> String -> String -> IO (AuiToolBarItem ())

-- | usage: (<tt>auiToolBarAddToolByLabel obj toolid label bitmap
--   shorthelpstring kind</tt>).
auiToolBarAddToolByLabel :: AuiToolBar a -> Int -> String -> Bitmap d -> String -> Int -> IO (AuiToolBarItem ())

-- | usage: (<tt>auiToolBarClear obj</tt>).
auiToolBarClear :: AuiToolBar a -> IO ()

-- | usage: (<tt>auiToolBarClearTools obj</tt>).
auiToolBarClearTools :: AuiToolBar a -> IO ()

-- | usage: (<tt>auiToolBarCreate parent id xy widthheight style</tt>).
auiToolBarCreate :: Window a -> Id -> Point -> Size -> Int -> IO (AuiToolBar ())

-- | usage: (<tt>auiToolBarCreateDefault</tt>).
auiToolBarCreateDefault :: IO (AuiToolBar ())

-- | usage: (<tt>auiToolBarCreateFromDefault obj parent id xy widthheight
--   style</tt>).
auiToolBarCreateFromDefault :: AuiToolBar a -> Window b -> Id -> Point -> Size -> Int -> IO Bool

-- | usage: (<tt>auiToolBarDelete obj</tt>).
auiToolBarDelete :: AuiToolBar a -> IO ()

-- | usage: (<tt>auiToolBarDeleteByIndex obj toolid</tt>).
auiToolBarDeleteByIndex :: AuiToolBar a -> Int -> IO Bool

-- | usage: (<tt>auiToolBarDeleteTool obj toolid</tt>).
auiToolBarDeleteTool :: AuiToolBar a -> Int -> IO Bool

-- | usage: (<tt>auiToolBarEnableTool obj toolid state</tt>).
auiToolBarEnableTool :: AuiToolBar a -> Int -> Bool -> IO ()

-- | usage: (<tt>auiToolBarFindControl obj windowid</tt>).
auiToolBarFindControl :: AuiToolBar a -> Int -> IO (Control ())

-- | usage: (<tt>auiToolBarFindTool obj toolid</tt>).
auiToolBarFindTool :: AuiToolBar a -> Int -> IO (AuiToolBarItem ())

-- | usage: (<tt>auiToolBarFindToolByIndex obj idx</tt>).
auiToolBarFindToolByIndex :: AuiToolBar a -> Int -> IO (AuiToolBarItem ())

-- | usage: (<tt>auiToolBarFindToolByPosition obj xy</tt>).
auiToolBarFindToolByPosition :: AuiToolBar a -> Point -> IO (AuiToolBarItem ())

-- | usage: (<tt>auiToolBarGetArtProvider obj</tt>).
auiToolBarGetArtProvider :: AuiToolBar a -> IO (AuiToolBarArt ())

-- | usage: (<tt>auiToolBarGetGripperVisible obj</tt>).
auiToolBarGetGripperVisible :: AuiToolBar a -> IO Bool

-- | usage: (<tt>auiToolBarGetHintSize obj dockdirection</tt>).
auiToolBarGetHintSize :: AuiToolBar a -> Int -> IO (Size)

-- | usage: (<tt>auiToolBarGetOverflowVisible obj</tt>).
auiToolBarGetOverflowVisible :: AuiToolBar a -> IO Bool

-- | usage: (<tt>auiToolBarGetToolBarFits obj</tt>).
auiToolBarGetToolBarFits :: AuiToolBar a -> IO Bool

-- | usage: (<tt>auiToolBarGetToolBitmap obj toolid</tt>).
auiToolBarGetToolBitmap :: AuiToolBar a -> Int -> IO (Bitmap ())

-- | usage: (<tt>auiToolBarGetToolBitmapSize obj</tt>).
auiToolBarGetToolBitmapSize :: AuiToolBar a -> IO (Size)

-- | usage: (<tt>auiToolBarGetToolBorderPadding obj</tt>).
auiToolBarGetToolBorderPadding :: AuiToolBar a -> IO Int

-- | usage: (<tt>auiToolBarGetToolCount obj</tt>).
auiToolBarGetToolCount :: AuiToolBar a -> IO Int

-- | usage: (<tt>auiToolBarGetToolDropDown obj toolid</tt>).
auiToolBarGetToolDropDown :: AuiToolBar a -> Int -> IO Bool

-- | usage: (<tt>auiToolBarGetToolEnabled obj toolid</tt>).
auiToolBarGetToolEnabled :: AuiToolBar a -> Int -> IO Bool

-- | usage: (<tt>auiToolBarGetToolFits obj toolid</tt>).
auiToolBarGetToolFits :: AuiToolBar a -> Int -> IO Bool

-- | usage: (<tt>auiToolBarGetToolFitsByIndex obj toolid</tt>).
auiToolBarGetToolFitsByIndex :: AuiToolBar a -> Int -> IO Bool

-- | usage: (<tt>auiToolBarGetToolIndex obj toolid</tt>).
auiToolBarGetToolIndex :: AuiToolBar a -> Int -> IO Int

-- | usage: (<tt>auiToolBarGetToolLabel obj toolid</tt>).
auiToolBarGetToolLabel :: AuiToolBar a -> Int -> IO (String)

-- | usage: (<tt>auiToolBarGetToolLongHelp obj toolid</tt>).
auiToolBarGetToolLongHelp :: AuiToolBar a -> Int -> IO (String)

-- | usage: (<tt>auiToolBarGetToolPacking obj</tt>).
auiToolBarGetToolPacking :: AuiToolBar a -> IO Int

-- | usage: (<tt>auiToolBarGetToolPos obj toolid</tt>).
auiToolBarGetToolPos :: AuiToolBar a -> Int -> IO Int

-- | usage: (<tt>auiToolBarGetToolProportion obj toolid</tt>).
auiToolBarGetToolProportion :: AuiToolBar a -> Int -> IO Int

-- | usage: (<tt>auiToolBarGetToolRect obj toolid</tt>).
auiToolBarGetToolRect :: AuiToolBar a -> Int -> IO (Rect)

-- | usage: (<tt>auiToolBarGetToolSeparation obj</tt>).
auiToolBarGetToolSeparation :: AuiToolBar a -> IO Int

-- | usage: (<tt>auiToolBarGetToolShortHelp obj toolid</tt>).
auiToolBarGetToolShortHelp :: AuiToolBar a -> Int -> IO (String)

-- | usage: (<tt>auiToolBarGetToolSticky obj toolid</tt>).
auiToolBarGetToolSticky :: AuiToolBar a -> Int -> IO Bool

-- | usage: (<tt>auiToolBarGetToolTextOrientation obj</tt>).
auiToolBarGetToolTextOrientation :: AuiToolBar a -> IO Int

-- | usage: (<tt>auiToolBarGetToolToggled obj toolid</tt>).
auiToolBarGetToolToggled :: AuiToolBar a -> Int -> IO Bool

-- | usage: (<tt>auiToolBarGetWindowStyleFlag obj</tt>).
auiToolBarGetWindowStyleFlag :: AuiToolBar a -> IO Int

-- | usage: (<tt>auiToolBarIsPaneValid obj pane</tt>).
auiToolBarIsPaneValid :: AuiToolBar a -> AuiPaneInfo b -> IO Bool

-- | usage: (<tt>auiToolBarRealize obj</tt>).
auiToolBarRealize :: AuiToolBar a -> IO Bool

-- | usage: (<tt>auiToolBarSetArtProvider obj art</tt>).
auiToolBarSetArtProvider :: AuiToolBar a -> AuiToolBarArt b -> IO ()

-- | usage: (<tt>auiToolBarSetCustomOverflowItems obj prepend append</tt>).
auiToolBarSetCustomOverflowItems :: AuiToolBar a -> AuiToolBarItemArray b -> AuiToolBarItemArray c -> IO ()

-- | usage: (<tt>auiToolBarSetFont obj font</tt>).
auiToolBarSetFont :: AuiToolBar a -> Font b -> IO Bool

-- | usage: (<tt>auiToolBarSetGripperVisible obj visible</tt>).
auiToolBarSetGripperVisible :: AuiToolBar a -> Bool -> IO ()

-- | usage: (<tt>auiToolBarSetMargins obj widthheight</tt>).
auiToolBarSetMargins :: AuiToolBar a -> Size -> IO ()

-- | usage: (<tt>auiToolBarSetMarginsDetailed obj left right top
--   bottom</tt>).
auiToolBarSetMarginsDetailed :: AuiToolBar a -> Int -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>auiToolBarSetMarginsXY obj xy</tt>).
auiToolBarSetMarginsXY :: AuiToolBar a -> Point -> IO ()

-- | usage: (<tt>auiToolBarSetOverflowVisible obj visible</tt>).
auiToolBarSetOverflowVisible :: AuiToolBar a -> Bool -> IO ()

-- | usage: (<tt>auiToolBarSetToolBitmap obj toolid bitmap</tt>).
auiToolBarSetToolBitmap :: AuiToolBar a -> Int -> Bitmap c -> IO ()

-- | usage: (<tt>auiToolBarSetToolBitmapSize obj widthheight</tt>).
auiToolBarSetToolBitmapSize :: AuiToolBar a -> Size -> IO ()

-- | usage: (<tt>auiToolBarSetToolBorderPadding obj padding</tt>).
auiToolBarSetToolBorderPadding :: AuiToolBar a -> Int -> IO ()

-- | usage: (<tt>auiToolBarSetToolDropDown obj toolid dropdown</tt>).
auiToolBarSetToolDropDown :: AuiToolBar a -> Int -> Bool -> IO ()

-- | usage: (<tt>auiToolBarSetToolLabel obj toolid label</tt>).
auiToolBarSetToolLabel :: AuiToolBar a -> Int -> String -> IO ()

-- | usage: (<tt>auiToolBarSetToolLongHelp obj toolid helpstring</tt>).
auiToolBarSetToolLongHelp :: AuiToolBar a -> Int -> String -> IO ()

-- | usage: (<tt>auiToolBarSetToolPacking obj packing</tt>).
auiToolBarSetToolPacking :: AuiToolBar a -> Int -> IO ()

-- | usage: (<tt>auiToolBarSetToolProportion obj toolid proportion</tt>).
auiToolBarSetToolProportion :: AuiToolBar a -> Int -> Int -> IO ()

-- | usage: (<tt>auiToolBarSetToolSeparation obj separation</tt>).
auiToolBarSetToolSeparation :: AuiToolBar a -> Int -> IO ()

-- | usage: (<tt>auiToolBarSetToolShortHelp obj toolid helpstring</tt>).
auiToolBarSetToolShortHelp :: AuiToolBar a -> Int -> String -> IO ()

-- | usage: (<tt>auiToolBarSetToolSticky obj toolid sticky</tt>).
auiToolBarSetToolSticky :: AuiToolBar a -> Int -> Bool -> IO ()

-- | usage: (<tt>auiToolBarSetToolTextOrientation obj orientation</tt>).
auiToolBarSetToolTextOrientation :: AuiToolBar a -> Int -> IO ()

-- | usage: (<tt>auiToolBarSetWindowStyleFlag obj style</tt>).
auiToolBarSetWindowStyleFlag :: AuiToolBar a -> Int -> IO ()

-- | usage: (<tt>auiToolBarToggleTool obj toolid state</tt>).
auiToolBarToggleTool :: AuiToolBar a -> Int -> Bool -> IO ()

-- | usage: (<tt>auiToolBarArtClone obj</tt>).
auiToolBarArtClone :: AuiToolBarArt a -> IO (AuiToolBarArt ())

-- | usage: (<tt>auiToolBarArtDrawBackground obj dc wnd rect</tt>).
auiToolBarArtDrawBackground :: AuiToolBarArt a -> DC b -> Window c -> Rect -> IO ()

-- | usage: (<tt>auiToolBarArtDrawButton obj dc wnd item rect</tt>).
auiToolBarArtDrawButton :: AuiToolBarArt a -> DC b -> Window c -> AuiToolBarItem d -> Rect -> IO ()

-- | usage: (<tt>auiToolBarArtDrawControlLabel obj dc wnd item rect</tt>).
auiToolBarArtDrawControlLabel :: AuiToolBarArt a -> DC b -> Window c -> AuiToolBarItem d -> Rect -> IO ()

-- | usage: (<tt>auiToolBarArtDrawDropDownButton obj dc wnd item
--   rect</tt>).
auiToolBarArtDrawDropDownButton :: AuiToolBarArt a -> DC b -> Window c -> AuiToolBarItem d -> Rect -> IO ()

-- | usage: (<tt>auiToolBarArtDrawGripper obj dc wnd rect</tt>).
auiToolBarArtDrawGripper :: AuiToolBarArt a -> DC b -> Window c -> Rect -> IO ()

-- | usage: (<tt>auiToolBarArtDrawLabel obj dc wnd item rect</tt>).
auiToolBarArtDrawLabel :: AuiToolBarArt a -> DC b -> Window c -> AuiToolBarItem d -> Rect -> IO ()

-- | usage: (<tt>auiToolBarArtDrawOverflowButton obj dc wnd rect
--   state</tt>).
auiToolBarArtDrawOverflowButton :: AuiToolBarArt a -> DC b -> Window c -> Rect -> Int -> IO ()

-- | usage: (<tt>auiToolBarArtDrawPlainBackground obj dc wnd rect</tt>).
auiToolBarArtDrawPlainBackground :: AuiToolBarArt a -> DC b -> Window c -> Rect -> IO ()

-- | usage: (<tt>auiToolBarArtDrawSeparator obj dc wnd rect</tt>).
auiToolBarArtDrawSeparator :: AuiToolBarArt a -> DC b -> Window c -> Rect -> IO ()

-- | usage: (<tt>auiToolBarArtGetElementSize obj elementid</tt>).
auiToolBarArtGetElementSize :: AuiToolBarArt a -> Int -> IO Int

-- | usage: (<tt>auiToolBarArtGetFlags obj</tt>).
auiToolBarArtGetFlags :: AuiToolBarArt a -> IO Int

-- | usage: (<tt>auiToolBarArtGetFont obj</tt>).
auiToolBarArtGetFont :: AuiToolBarArt a -> IO (Font ())

-- | usage: (<tt>auiToolBarArtGetLabelSize obj dc wnd item</tt>).
auiToolBarArtGetLabelSize :: AuiToolBarArt a -> DC b -> Window c -> AuiToolBarItem d -> IO (Size)

-- | usage: (<tt>auiToolBarArtGetTextOrientation obj</tt>).
auiToolBarArtGetTextOrientation :: AuiToolBarArt a -> IO Int

-- | usage: (<tt>auiToolBarArtGetToolSize obj dc wnd item</tt>).
auiToolBarArtGetToolSize :: AuiToolBarArt a -> DC b -> Window c -> AuiToolBarItem d -> IO (Size)

-- | usage: (<tt>auiToolBarArtSetElementSize obj elementid size</tt>).
auiToolBarArtSetElementSize :: AuiToolBarArt a -> Int -> Int -> IO ()

-- | usage: (<tt>auiToolBarArtSetFlags obj flags</tt>).
auiToolBarArtSetFlags :: AuiToolBarArt a -> Int -> IO ()

-- | usage: (<tt>auiToolBarArtSetFont obj font</tt>).
auiToolBarArtSetFont :: AuiToolBarArt a -> Font b -> IO ()

-- | usage: (<tt>auiToolBarArtSetTextOrientation obj orientation</tt>).
auiToolBarArtSetTextOrientation :: AuiToolBarArt a -> Int -> IO ()

-- | usage: (<tt>auiToolBarArtShowDropDown obj wnd items</tt>).
auiToolBarArtShowDropDown :: AuiToolBarArt a -> Window b -> AuiToolBarItemArray c -> IO Int

-- | usage: (<tt>auiToolBarEventGetClickPoint obj</tt>).
auiToolBarEventGetClickPoint :: AuiToolBarEvent a -> IO (Point)

-- | usage: (<tt>auiToolBarEventGetItemRect obj</tt>).
auiToolBarEventGetItemRect :: AuiToolBarEvent a -> IO (Rect)

-- | usage: (<tt>auiToolBarEventGetToolId obj</tt>).
auiToolBarEventGetToolId :: AuiToolBarEvent a -> IO Int

-- | usage: (<tt>auiToolBarEventIsDropDownClicked obj</tt>).
auiToolBarEventIsDropDownClicked :: AuiToolBarEvent a -> IO Bool

-- | usage: (<tt>auiToolBarItemAssign obj c</tt>).
auiToolBarItemAssign :: AuiToolBarItem a -> AuiToolBarItem b -> IO ()

-- | usage: (<tt>auiToolBarItemCopy obj c</tt>).
auiToolBarItemCopy :: AuiToolBarItem a -> AuiToolBarItem b -> IO (AuiToolBarItem ())

-- | usage: (<tt>auiToolBarItemCreate c</tt>).
auiToolBarItemCreate :: AuiToolBarItem a -> IO (AuiToolBarItem ())

-- | usage: (<tt>auiToolBarItemCreateDefault</tt>).
auiToolBarItemCreateDefault :: IO (AuiToolBarItem ())

-- | usage: (<tt>auiToolBarItemGetAlignment obj</tt>).
auiToolBarItemGetAlignment :: AuiToolBarItem a -> IO Int

-- | usage: (<tt>auiToolBarItemGetBitmap obj</tt>).
auiToolBarItemGetBitmap :: AuiToolBarItem a -> IO (Bitmap ())

-- | usage: (<tt>auiToolBarItemGetDisabledBitmap obj</tt>).
auiToolBarItemGetDisabledBitmap :: AuiToolBarItem a -> IO (Bitmap ())

-- | usage: (<tt>auiToolBarItemGetHoverBitmap obj</tt>).
auiToolBarItemGetHoverBitmap :: AuiToolBarItem a -> IO (Bitmap ())

-- | usage: (<tt>auiToolBarItemGetId obj</tt>).
auiToolBarItemGetId :: AuiToolBarItem a -> IO Int

-- | usage: (<tt>auiToolBarItemGetKind obj</tt>).
auiToolBarItemGetKind :: AuiToolBarItem a -> IO Int

-- | usage: (<tt>auiToolBarItemGetLabel obj</tt>).
auiToolBarItemGetLabel :: AuiToolBarItem a -> IO (String)

-- | usage: (<tt>auiToolBarItemGetLongHelp obj</tt>).
auiToolBarItemGetLongHelp :: AuiToolBarItem a -> IO (String)

-- | usage: (<tt>auiToolBarItemGetMinSize obj</tt>).
auiToolBarItemGetMinSize :: AuiToolBarItem a -> IO (Size)

-- | usage: (<tt>auiToolBarItemGetProportion obj</tt>).
auiToolBarItemGetProportion :: AuiToolBarItem a -> IO Int

-- | usage: (<tt>auiToolBarItemGetShortHelp obj</tt>).
auiToolBarItemGetShortHelp :: AuiToolBarItem a -> IO (String)

-- | usage: (<tt>auiToolBarItemGetSizerItem obj</tt>).
auiToolBarItemGetSizerItem :: AuiToolBarItem a -> IO (SizerItem ())

-- | usage: (<tt>auiToolBarItemGetSpacerPixels obj</tt>).
auiToolBarItemGetSpacerPixels :: AuiToolBarItem a -> IO Int

-- | usage: (<tt>auiToolBarItemGetState obj</tt>).
auiToolBarItemGetState :: AuiToolBarItem a -> IO Int

-- | usage: (<tt>auiToolBarItemGetUserData obj</tt>).
auiToolBarItemGetUserData :: AuiToolBarItem a -> IO Int

-- | usage: (<tt>auiToolBarItemGetWindow obj</tt>).
auiToolBarItemGetWindow :: AuiToolBarItem a -> IO (Window ())

-- | usage: (<tt>auiToolBarItemHasDropDown obj</tt>).
auiToolBarItemHasDropDown :: AuiToolBarItem a -> IO Bool

-- | usage: (<tt>auiToolBarItemIsActive obj</tt>).
auiToolBarItemIsActive :: AuiToolBarItem a -> IO Bool

-- | usage: (<tt>auiToolBarItemIsSticky obj</tt>).
auiToolBarItemIsSticky :: AuiToolBarItem a -> IO Bool

-- | usage: (<tt>auiToolBarItemSetActive obj b</tt>).
auiToolBarItemSetActive :: AuiToolBarItem a -> Bool -> IO ()

-- | usage: (<tt>auiToolBarItemSetAlignment obj l</tt>).
auiToolBarItemSetAlignment :: AuiToolBarItem a -> Int -> IO ()

-- | usage: (<tt>auiToolBarItemSetBitmap obj bmp</tt>).
auiToolBarItemSetBitmap :: AuiToolBarItem a -> Bitmap b -> IO ()

-- | usage: (<tt>auiToolBarItemSetDisabledBitmap obj bmp</tt>).
auiToolBarItemSetDisabledBitmap :: AuiToolBarItem a -> Bitmap b -> IO ()

-- | usage: (<tt>auiToolBarItemSetHasDropDown obj b</tt>).
auiToolBarItemSetHasDropDown :: AuiToolBarItem a -> Bool -> IO ()

-- | usage: (<tt>auiToolBarItemSetHoverBitmap obj bmp</tt>).
auiToolBarItemSetHoverBitmap :: AuiToolBarItem a -> Bitmap b -> IO ()

-- | usage: (<tt>auiToolBarItemSetId obj newid</tt>).
auiToolBarItemSetId :: AuiToolBarItem a -> Int -> IO ()

-- | usage: (<tt>auiToolBarItemSetKind obj newkind</tt>).
auiToolBarItemSetKind :: AuiToolBarItem a -> Int -> IO ()

-- | usage: (<tt>auiToolBarItemSetLabel obj s</tt>).
auiToolBarItemSetLabel :: AuiToolBarItem a -> String -> IO ()

-- | usage: (<tt>auiToolBarItemSetLongHelp obj s</tt>).
auiToolBarItemSetLongHelp :: AuiToolBarItem a -> String -> IO ()

-- | usage: (<tt>auiToolBarItemSetMinSize obj widthheight</tt>).
auiToolBarItemSetMinSize :: AuiToolBarItem a -> Size -> IO ()

-- | usage: (<tt>auiToolBarItemSetProportion obj p</tt>).
auiToolBarItemSetProportion :: AuiToolBarItem a -> Int -> IO ()

-- | usage: (<tt>auiToolBarItemSetShortHelp obj s</tt>).
auiToolBarItemSetShortHelp :: AuiToolBarItem a -> String -> IO ()

-- | usage: (<tt>auiToolBarItemSetSizerItem obj s</tt>).
auiToolBarItemSetSizerItem :: AuiToolBarItem a -> SizerItem b -> IO ()

-- | usage: (<tt>auiToolBarItemSetSpacerPixels obj s</tt>).
auiToolBarItemSetSpacerPixels :: AuiToolBarItem a -> Int -> IO ()

-- | usage: (<tt>auiToolBarItemSetState obj newstate</tt>).
auiToolBarItemSetState :: AuiToolBarItem a -> Int -> IO ()

-- | usage: (<tt>auiToolBarItemSetSticky obj b</tt>).
auiToolBarItemSetSticky :: AuiToolBarItem a -> Bool -> IO ()

-- | usage: (<tt>auiToolBarItemSetUserData obj l</tt>).
auiToolBarItemSetUserData :: AuiToolBarItem a -> Int -> IO ()

-- | usage: (<tt>auiToolBarItemSetWindow obj w</tt>).
auiToolBarItemSetWindow :: AuiToolBarItem a -> Window b -> IO ()

-- | usage: (<tt>auiToolBarItemArrayCreate</tt>).
auiToolBarItemArrayCreate :: IO (AuiToolBarItemArray ())

-- | usage: (<tt>auiToolBarItemArrayDelete obj</tt>).
auiToolBarItemArrayDelete :: AuiToolBarItemArray a -> IO ()

-- | usage: (<tt>auiToolBarItemArrayGetCount obj</tt>).
auiToolBarItemArrayGetCount :: AuiToolBarItemArray a -> IO Int

-- | usage: (<tt>auiToolBarItemArrayItem obj idx</tt>).
auiToolBarItemArrayItem :: AuiToolBarItemArray a -> Int -> IO (AuiToolBarItem ())

-- | usage: (<tt>autoBufferedPaintDCCreate window</tt>).
autoBufferedPaintDCCreate :: Window a -> IO (AutoBufferedPaintDC ())

-- | usage: (<tt>autoBufferedPaintDCDelete self</tt>).
autoBufferedPaintDCDelete :: AutoBufferedPaintDC a -> IO ()

-- | usage: (<tt>bitmapAddHandler handler</tt>).
bitmapAddHandler :: EvtHandler a -> IO ()

-- | usage: (<tt>bitmapCleanUpHandlers</tt>).
bitmapCleanUpHandlers :: IO ()

-- | usage: (<tt>bitmapCreate wxdata wxtype widthheight depth</tt>).
bitmapCreate :: Ptr a -> Int -> Size -> Int -> IO (Bitmap ())

-- | usage: (<tt>bitmapCreateDefault</tt>).
bitmapCreateDefault :: IO (Bitmap ())

-- | usage: (<tt>bitmapCreateEmpty widthheight depth</tt>).
bitmapCreateEmpty :: Size -> Int -> IO (Bitmap ())

-- | usage: (<tt>bitmapCreateFromImage image depth</tt>).
bitmapCreateFromImage :: Image a -> Int -> IO (Bitmap ())

-- | usage: (<tt>bitmapCreateFromXPM wxdata</tt>).
bitmapCreateFromXPM :: Bitmap a -> IO (Bitmap ())

-- | usage: (<tt>bitmapCreateLoad name wxtype</tt>).
bitmapCreateLoad :: String -> Int -> IO (Bitmap ())

-- | usage: (<tt>bitmapDelete obj</tt>).
bitmapDelete :: Bitmap a -> IO ()

-- | usage: (<tt>bitmapFindHandlerByExtension extension wxtype</tt>).
bitmapFindHandlerByExtension :: Bitmap a -> Int -> IO (Ptr ())

-- | usage: (<tt>bitmapFindHandlerByName name</tt>).
bitmapFindHandlerByName :: String -> IO (Ptr ())

-- | usage: (<tt>bitmapFindHandlerByType wxtype</tt>).
bitmapFindHandlerByType :: Int -> IO (Ptr ())

-- | usage: (<tt>bitmapGetDepth obj</tt>).
bitmapGetDepth :: Bitmap a -> IO Int

-- | usage: (<tt>bitmapGetHeight obj</tt>).
bitmapGetHeight :: Bitmap a -> IO Int

-- | usage: (<tt>bitmapGetMask obj</tt>).
bitmapGetMask :: Bitmap a -> IO (Mask ())

-- | usage: (<tt>bitmapGetSubBitmap obj xywh</tt>).
bitmapGetSubBitmap :: Bitmap a -> Rect -> IO (Bitmap ())

-- | usage: (<tt>bitmapGetWidth obj</tt>).
bitmapGetWidth :: Bitmap a -> IO Int

-- | usage: (<tt>bitmapInitStandardHandlers</tt>).
bitmapInitStandardHandlers :: IO ()

-- | usage: (<tt>bitmapInsertHandler handler</tt>).
bitmapInsertHandler :: EvtHandler a -> IO ()

-- | usage: (<tt>bitmapIsOk obj</tt>).
bitmapIsOk :: Bitmap a -> IO Bool

-- | usage: (<tt>bitmapIsStatic self</tt>).
bitmapIsStatic :: Bitmap a -> IO Bool

-- | usage: (<tt>bitmapLoadFile obj name wxtype</tt>).
bitmapLoadFile :: Bitmap a -> String -> Int -> IO Int

-- | usage: (<tt>bitmapRemoveHandler name</tt>).
bitmapRemoveHandler :: String -> IO Bool

-- | usage: (<tt>bitmapSafeDelete self</tt>).
bitmapSafeDelete :: Bitmap a -> IO ()

-- | usage: (<tt>bitmapSaveFile obj name wxtype cmap</tt>).
bitmapSaveFile :: Bitmap a -> String -> Int -> Palette d -> IO Int

-- | usage: (<tt>bitmapSetDepth obj d</tt>).
bitmapSetDepth :: Bitmap a -> Int -> IO ()

-- | usage: (<tt>bitmapSetHeight obj h</tt>).
bitmapSetHeight :: Bitmap a -> Int -> IO ()

-- | usage: (<tt>bitmapSetMask obj mask</tt>).
bitmapSetMask :: Bitmap a -> Mask b -> IO ()

-- | usage: (<tt>bitmapSetWidth obj w</tt>).
bitmapSetWidth :: Bitmap a -> Int -> IO ()

-- | usage: (<tt>bitmapButtonCreate prt id bmp lfttopwdthgt stl</tt>).
bitmapButtonCreate :: Window a -> Id -> Bitmap c -> Rect -> Style -> IO (BitmapButton ())

-- | usage: (<tt>bitmapButtonGetBitmapDisabled obj</tt>).
bitmapButtonGetBitmapDisabled :: BitmapButton a -> IO (Bitmap ())

-- | usage: (<tt>bitmapButtonGetBitmapFocus obj</tt>).
bitmapButtonGetBitmapFocus :: BitmapButton a -> IO (Bitmap ())

-- | usage: (<tt>bitmapButtonGetBitmapLabel obj</tt>).
bitmapButtonGetBitmapLabel :: BitmapButton a -> IO (Bitmap ())

-- | usage: (<tt>bitmapButtonGetBitmapSelected obj</tt>).
bitmapButtonGetBitmapSelected :: BitmapButton a -> IO (Bitmap ())

-- | usage: (<tt>bitmapButtonGetMarginX obj</tt>).
bitmapButtonGetMarginX :: BitmapButton a -> IO Int

-- | usage: (<tt>bitmapButtonGetMarginY obj</tt>).
bitmapButtonGetMarginY :: BitmapButton a -> IO Int

-- | usage: (<tt>bitmapButtonSetBitmapDisabled obj disabled</tt>).
bitmapButtonSetBitmapDisabled :: BitmapButton a -> Bitmap b -> IO ()

-- | usage: (<tt>bitmapButtonSetBitmapFocus obj focus</tt>).
bitmapButtonSetBitmapFocus :: BitmapButton a -> Bitmap b -> IO ()

-- | usage: (<tt>bitmapButtonSetBitmapLabel obj bitmap</tt>).
bitmapButtonSetBitmapLabel :: BitmapButton a -> Bitmap b -> IO ()

-- | usage: (<tt>bitmapButtonSetBitmapSelected obj sel</tt>).
bitmapButtonSetBitmapSelected :: BitmapButton a -> Bitmap b -> IO ()

-- | usage: (<tt>bitmapButtonSetMargins obj xy</tt>).
bitmapButtonSetMargins :: BitmapButton a -> Point -> IO ()

-- | usage: (<tt>bitmapToggleButtonCreate parent id bmp xywh style</tt>).
bitmapToggleButtonCreate :: Window a -> Id -> Bitmap c -> Rect -> Int -> IO (BitmapToggleButton ())

-- | usage: (<tt>bitmapToggleButtonEnable obj enable</tt>).
bitmapToggleButtonEnable :: BitmapToggleButton a -> Bool -> IO Bool

-- | usage: (<tt>bitmapToggleButtonGetValue obj</tt>).
bitmapToggleButtonGetValue :: BitmapToggleButton a -> IO Bool

-- | usage: (<tt>bitmapToggleButtonSetBitmapLabel obj bmp</tt>).
bitmapToggleButtonSetBitmapLabel :: BitmapToggleButton a -> Bitmap b -> IO ()

-- | usage: (<tt>bitmapToggleButtonSetValue obj state</tt>).
bitmapToggleButtonSetValue :: BitmapToggleButton a -> Bool -> IO ()

-- | usage: (<tt>bookCtrlBaseAddPage obj page text select imageId</tt>).
bookCtrlBaseAddPage :: BookCtrlBase a -> Window b -> String -> Bool -> Int -> IO Bool

-- | usage: (<tt>bookCtrlBaseAdvanceSelection obj forward</tt>).
bookCtrlBaseAdvanceSelection :: BookCtrlBase a -> Bool -> IO ()

-- | usage: (<tt>bookCtrlBaseAssignImageList obj imageList</tt>).
bookCtrlBaseAssignImageList :: BookCtrlBase a -> ImageList b -> IO ()

-- | usage: (<tt>bookCtrlBaseChangeSelection obj page</tt>).
bookCtrlBaseChangeSelection :: BookCtrlBase a -> Int -> IO Int

-- | usage: (<tt>bookCtrlBaseCreateFromDefault obj parent winid xy
--   widthheight style name</tt>).
bookCtrlBaseCreateFromDefault :: BookCtrlBase a -> Window b -> Int -> Point -> Size -> Int -> String -> IO Bool

-- | usage: (<tt>bookCtrlBaseDeleteAllPages obj</tt>).
bookCtrlBaseDeleteAllPages :: BookCtrlBase a -> IO Bool

-- | usage: (<tt>bookCtrlBaseDeletePage obj page</tt>).
bookCtrlBaseDeletePage :: BookCtrlBase a -> Int -> IO Bool

-- | usage: (<tt>bookCtrlBaseFindPage obj page</tt>).
bookCtrlBaseFindPage :: BookCtrlBase a -> Window b -> IO Int

-- | usage: (<tt>bookCtrlBaseGetCurrentPage obj</tt>).
bookCtrlBaseGetCurrentPage :: BookCtrlBase a -> IO (Window ())

-- | usage: (<tt>bookCtrlBaseGetImageList obj</tt>).
bookCtrlBaseGetImageList :: BookCtrlBase a -> IO (ImageList ())

-- | usage: (<tt>bookCtrlBaseGetPage obj page</tt>).
bookCtrlBaseGetPage :: BookCtrlBase a -> Int -> IO (Window ())

-- | usage: (<tt>bookCtrlBaseGetPageCount obj</tt>).
bookCtrlBaseGetPageCount :: BookCtrlBase a -> IO Int

-- | usage: (<tt>bookCtrlBaseGetPageImage obj nPage</tt>).
bookCtrlBaseGetPageImage :: BookCtrlBase a -> Int -> IO Int

-- | usage: (<tt>bookCtrlBaseGetPageText obj nPage</tt>).
bookCtrlBaseGetPageText :: BookCtrlBase a -> Int -> IO (String)

-- | usage: (<tt>bookCtrlBaseGetSelection obj</tt>).
bookCtrlBaseGetSelection :: BookCtrlBase a -> IO Int

-- | usage: (<tt>bookCtrlBaseHitTest obj xy flags</tt>).
bookCtrlBaseHitTest :: BookCtrlBase a -> Point -> Ptr CInt -> IO Int

-- | usage: (<tt>bookCtrlBaseInsertPage obj index page text select
--   imageId</tt>).
bookCtrlBaseInsertPage :: BookCtrlBase a -> Int -> Window c -> String -> Bool -> Int -> IO Bool

-- | usage: (<tt>bookCtrlBaseRemovePage obj page</tt>).
bookCtrlBaseRemovePage :: BookCtrlBase a -> Int -> IO Bool

-- | usage: (<tt>bookCtrlBaseSetImageList obj imageList</tt>).
bookCtrlBaseSetImageList :: BookCtrlBase a -> ImageList b -> IO ()

-- | usage: (<tt>bookCtrlBaseSetPageImage obj page image</tt>).
bookCtrlBaseSetPageImage :: BookCtrlBase a -> Int -> Int -> IO Bool

-- | usage: (<tt>bookCtrlBaseSetPageSize obj widthheight</tt>).
bookCtrlBaseSetPageSize :: BookCtrlBase a -> Size -> IO ()

-- | usage: (<tt>bookCtrlBaseSetPageText obj page text</tt>).
bookCtrlBaseSetPageText :: BookCtrlBase a -> Int -> String -> IO Bool

-- | usage: (<tt>bookCtrlBaseSetSelection obj page</tt>).
bookCtrlBaseSetSelection :: BookCtrlBase a -> Int -> IO Int

-- | usage: (<tt>bookCtrlEventCreate commandType winid nSel nOldSel</tt>).
bookCtrlEventCreate :: Int -> Int -> Int -> Int -> IO (BookCtrlEvent ())

-- | usage: (<tt>bookCtrlEventGetOldSelection obj</tt>).
bookCtrlEventGetOldSelection :: BookCtrlEvent a -> IO Int

-- | usage: (<tt>bookCtrlEventGetSelection obj</tt>).
bookCtrlEventGetSelection :: BookCtrlEvent a -> IO Int

-- | usage: (<tt>boolPropertyCreate label name value</tt>).
boolPropertyCreate :: String -> String -> Bool -> IO (BoolProperty ())

-- | usage: (<tt>boxSizerCalcMin obj</tt>).
boxSizerCalcMin :: BoxSizer a -> IO (Size)

-- | usage: (<tt>boxSizerCreate orient</tt>).
boxSizerCreate :: Int -> IO (BoxSizer ())

-- | usage: (<tt>boxSizerGetOrientation obj</tt>).
boxSizerGetOrientation :: BoxSizer a -> IO Int

-- | usage: (<tt>boxSizerRecalcSizes obj</tt>).
boxSizerRecalcSizes :: BoxSizer a -> IO ()

-- | usage: (<tt>brushAssign obj brush</tt>).
brushAssign :: Brush a -> Brush b -> IO ()

-- | usage: (<tt>brushCreateDefault</tt>).
brushCreateDefault :: IO (Brush ())

-- | usage: (<tt>brushCreateFromBitmap bitmap</tt>).
brushCreateFromBitmap :: Bitmap a -> IO (Brush ())

-- | usage: (<tt>brushCreateFromColour col style</tt>).
brushCreateFromColour :: Color -> Int -> IO (Brush ())

-- | usage: (<tt>brushCreateFromStock id</tt>).
brushCreateFromStock :: Id -> IO (Brush ())

-- | usage: (<tt>brushDelete obj</tt>).
brushDelete :: Brush a -> IO ()

-- | usage: (<tt>brushGetColour obj</tt>).
brushGetColour :: Brush a -> IO (Color)

-- | usage: (<tt>brushGetStipple obj</tt>).
brushGetStipple :: Brush a -> IO (Bitmap ())

-- | usage: (<tt>brushGetStyle obj</tt>).
brushGetStyle :: Brush a -> IO Int

-- | usage: (<tt>brushIsEqual obj brush</tt>).
brushIsEqual :: Brush a -> Brush b -> IO Bool

-- | usage: (<tt>brushIsOk obj</tt>).
brushIsOk :: Brush a -> IO Bool

-- | usage: (<tt>brushIsStatic self</tt>).
brushIsStatic :: Brush a -> IO Bool

-- | usage: (<tt>brushSafeDelete self</tt>).
brushSafeDelete :: Brush a -> IO ()

-- | usage: (<tt>brushSetColour obj col</tt>).
brushSetColour :: Brush a -> Color -> IO ()

-- | usage: (<tt>brushSetColourSingle obj r g b</tt>).
brushSetColourSingle :: Brush a -> Char -> Char -> Char -> IO ()

-- | usage: (<tt>brushSetStipple obj stipple</tt>).
brushSetStipple :: Brush a -> Bitmap b -> IO ()

-- | usage: (<tt>brushSetStyle obj style</tt>).
brushSetStyle :: Brush a -> Int -> IO ()

-- | usage: (<tt>bufferedDCCreateByDCAndBitmap dc bitmap style</tt>).
bufferedDCCreateByDCAndBitmap :: DC a -> Bitmap b -> Int -> IO (BufferedDC ())

-- | usage: (<tt>bufferedDCCreateByDCAndSize dc widthhight style</tt>).
bufferedDCCreateByDCAndSize :: DC a -> Size -> Int -> IO (BufferedDC ())

-- | usage: (<tt>bufferedDCDelete self</tt>).
bufferedDCDelete :: BufferedDC a -> IO ()

-- | usage: (<tt>bufferedPaintDCCreate window style</tt>).
bufferedPaintDCCreate :: Window a -> Int -> IO (BufferedPaintDC ())

-- | usage: (<tt>bufferedPaintDCCreateWithBitmap window bitmap style</tt>).
bufferedPaintDCCreateWithBitmap :: Window a -> Bitmap b -> Int -> IO (BufferedPaintDC ())

-- | usage: (<tt>bufferedPaintDCDelete self</tt>).
bufferedPaintDCDelete :: BufferedPaintDC a -> IO ()

-- | usage: (<tt>busyCursorCreate</tt>).
busyCursorCreate :: IO (BusyCursor ())

-- | usage: (<tt>busyCursorCreateWithCursor cur</tt>).
busyCursorCreateWithCursor :: BusyCursor a -> IO (Ptr ())

-- | usage: (<tt>busyCursorDelete obj</tt>).
busyCursorDelete :: BusyCursor a -> IO ()

-- | usage: (<tt>busyInfoCreate txt</tt>).
busyInfoCreate :: String -> IO (BusyInfo ())

-- | usage: (<tt>busyInfoDelete obj</tt>).
busyInfoDelete :: BusyInfo a -> IO ()

-- | usage: (<tt>buttonCreate prt id txt lfttopwdthgt stl</tt>).
buttonCreate :: Window a -> Id -> String -> Rect -> Style -> IO (Button ())

-- | usage: (<tt>buttonSetBackgroundColour obj colour</tt>).
buttonSetBackgroundColour :: Button a -> Color -> IO Int

-- | usage: (<tt>buttonSetDefault obj</tt>).
buttonSetDefault :: Button a -> IO ()

-- | usage: (<tt>calculateLayoutEventCreate id</tt>).
calculateLayoutEventCreate :: Id -> IO (CalculateLayoutEvent ())

-- | usage: (<tt>calculateLayoutEventGetFlags obj</tt>).
calculateLayoutEventGetFlags :: CalculateLayoutEvent a -> IO Int

-- | usage: (<tt>calculateLayoutEventGetRect obj</tt>).
calculateLayoutEventGetRect :: CalculateLayoutEvent a -> IO (Rect)

-- | usage: (<tt>calculateLayoutEventSetFlags obj flags</tt>).
calculateLayoutEventSetFlags :: CalculateLayoutEvent a -> Int -> IO ()

-- | usage: (<tt>calculateLayoutEventSetRect obj xywh</tt>).
calculateLayoutEventSetRect :: CalculateLayoutEvent a -> Rect -> IO ()

-- | usage: (<tt>calendarCtrlCreate prt id dat lfttopwdthgt stl</tt>).
calendarCtrlCreate :: Window a -> Id -> DateTime c -> Rect -> Style -> IO (CalendarCtrl ())

-- | usage: (<tt>calendarCtrlEnableHolidayDisplay obj display</tt>).
calendarCtrlEnableHolidayDisplay :: CalendarCtrl a -> Int -> IO ()

-- | usage: (<tt>calendarCtrlEnableMonthChange obj enable</tt>).
calendarCtrlEnableMonthChange :: CalendarCtrl a -> Bool -> IO ()

-- | usage: (<tt>calendarCtrlGetAttr obj day</tt>).
calendarCtrlGetAttr :: CalendarCtrl a -> Int -> IO (Ptr ())

-- | usage: (<tt>calendarCtrlGetDate obj date</tt>).
calendarCtrlGetDate :: CalendarCtrl a -> Ptr b -> IO ()

-- | usage: (<tt>calendarCtrlGetHeaderColourBg obj</tt>).
calendarCtrlGetHeaderColourBg :: CalendarCtrl a -> IO (Color)

-- | usage: (<tt>calendarCtrlGetHeaderColourFg obj</tt>).
calendarCtrlGetHeaderColourFg :: CalendarCtrl a -> IO (Color)

-- | usage: (<tt>calendarCtrlGetHighlightColourBg obj</tt>).
calendarCtrlGetHighlightColourBg :: CalendarCtrl a -> IO (Color)

-- | usage: (<tt>calendarCtrlGetHighlightColourFg obj</tt>).
calendarCtrlGetHighlightColourFg :: CalendarCtrl a -> IO (Color)

-- | usage: (<tt>calendarCtrlGetHolidayColourBg obj</tt>).
calendarCtrlGetHolidayColourBg :: CalendarCtrl a -> IO (Color)

-- | usage: (<tt>calendarCtrlGetHolidayColourFg obj</tt>).
calendarCtrlGetHolidayColourFg :: CalendarCtrl a -> IO (Color)

-- | usage: (<tt>calendarCtrlHitTest obj xy date wd</tt>).
calendarCtrlHitTest :: CalendarCtrl a -> Point -> Ptr c -> Ptr d -> IO Int

-- | usage: (<tt>calendarCtrlResetAttr obj day</tt>).
calendarCtrlResetAttr :: CalendarCtrl a -> Int -> IO ()

-- | usage: (<tt>calendarCtrlSetAttr obj day attr</tt>).
calendarCtrlSetAttr :: CalendarCtrl a -> Int -> Ptr c -> IO ()

-- | usage: (<tt>calendarCtrlSetDate obj date</tt>).
calendarCtrlSetDate :: CalendarCtrl a -> Ptr b -> IO ()

-- | usage: (<tt>calendarCtrlSetHeaderColours obj colFg colBg</tt>).
calendarCtrlSetHeaderColours :: CalendarCtrl a -> Ptr b -> Ptr c -> IO ()

-- | usage: (<tt>calendarCtrlSetHighlightColours obj colFg colBg</tt>).
calendarCtrlSetHighlightColours :: CalendarCtrl a -> Ptr b -> Ptr c -> IO ()

-- | usage: (<tt>calendarCtrlSetHoliday obj day</tt>).
calendarCtrlSetHoliday :: CalendarCtrl a -> Int -> IO ()

-- | usage: (<tt>calendarCtrlSetHolidayColours obj colFg colBg</tt>).
calendarCtrlSetHolidayColours :: CalendarCtrl a -> Ptr b -> Ptr c -> IO ()

-- | usage: (<tt>calendarDateAttrCreate ctxt cbck cbrd fnt brd</tt>).
calendarDateAttrCreate :: Ptr a -> Ptr b -> Ptr c -> Ptr d -> Int -> IO (CalendarDateAttr ())

-- | usage: (<tt>calendarDateAttrCreateDefault</tt>).
calendarDateAttrCreateDefault :: IO (CalendarDateAttr ())

-- | usage: (<tt>calendarDateAttrDelete obj</tt>).
calendarDateAttrDelete :: CalendarDateAttr a -> IO ()

-- | usage: (<tt>calendarDateAttrGetBackgroundColour obj</tt>).
calendarDateAttrGetBackgroundColour :: CalendarDateAttr a -> IO (Color)

-- | usage: (<tt>calendarDateAttrGetBorder obj</tt>).
calendarDateAttrGetBorder :: CalendarDateAttr a -> IO Int

-- | usage: (<tt>calendarDateAttrGetBorderColour obj</tt>).
calendarDateAttrGetBorderColour :: CalendarDateAttr a -> IO (Color)

-- | usage: (<tt>calendarDateAttrGetFont obj</tt>).
calendarDateAttrGetFont :: CalendarDateAttr a -> IO (Font ())

-- | usage: (<tt>calendarDateAttrGetTextColour obj</tt>).
calendarDateAttrGetTextColour :: CalendarDateAttr a -> IO (Color)

-- | usage: (<tt>calendarDateAttrHasBackgroundColour obj</tt>).
calendarDateAttrHasBackgroundColour :: CalendarDateAttr a -> IO Bool

-- | usage: (<tt>calendarDateAttrHasBorder obj</tt>).
calendarDateAttrHasBorder :: CalendarDateAttr a -> IO Bool

-- | usage: (<tt>calendarDateAttrHasBorderColour obj</tt>).
calendarDateAttrHasBorderColour :: CalendarDateAttr a -> IO Bool

-- | usage: (<tt>calendarDateAttrHasFont obj</tt>).
calendarDateAttrHasFont :: CalendarDateAttr a -> IO Bool

-- | usage: (<tt>calendarDateAttrHasTextColour obj</tt>).
calendarDateAttrHasTextColour :: CalendarDateAttr a -> IO Bool

-- | usage: (<tt>calendarDateAttrIsHoliday obj</tt>).
calendarDateAttrIsHoliday :: CalendarDateAttr a -> IO Bool

-- | usage: (<tt>calendarDateAttrSetBackgroundColour obj col</tt>).
calendarDateAttrSetBackgroundColour :: CalendarDateAttr a -> Color -> IO ()

-- | usage: (<tt>calendarDateAttrSetBorder obj border</tt>).
calendarDateAttrSetBorder :: CalendarDateAttr a -> Int -> IO ()

-- | usage: (<tt>calendarDateAttrSetBorderColour obj col</tt>).
calendarDateAttrSetBorderColour :: CalendarDateAttr a -> Color -> IO ()

-- | usage: (<tt>calendarDateAttrSetFont obj font</tt>).
calendarDateAttrSetFont :: CalendarDateAttr a -> Font b -> IO ()

-- | usage: (<tt>calendarDateAttrSetHoliday obj holiday</tt>).
calendarDateAttrSetHoliday :: CalendarDateAttr a -> Int -> IO ()

-- | usage: (<tt>calendarDateAttrSetTextColour obj col</tt>).
calendarDateAttrSetTextColour :: CalendarDateAttr a -> Color -> IO ()

-- | usage: (<tt>calendarEventGetDate obj dte</tt>).
calendarEventGetDate :: CalendarEvent a -> Ptr b -> IO ()

-- | usage: (<tt>calendarEventGetWeekDay obj</tt>).
calendarEventGetWeekDay :: CalendarEvent a -> IO Int

-- | usage: (<tt>caretCreate wnd wth hgt</tt>).
caretCreate :: Window a -> Int -> Int -> IO (Caret ())

-- | usage: (<tt>caretGetBlinkTime</tt>).
caretGetBlinkTime :: IO Int

-- | usage: (<tt>caretGetPosition obj</tt>).
caretGetPosition :: Caret a -> IO (Point)

-- | usage: (<tt>caretGetSize obj</tt>).
caretGetSize :: Caret a -> IO (Size)

-- | usage: (<tt>caretGetWindow obj</tt>).
caretGetWindow :: Caret a -> IO (Window ())

-- | usage: (<tt>caretHide obj</tt>).
caretHide :: Caret a -> IO ()

-- | usage: (<tt>caretIsOk obj</tt>).
caretIsOk :: Caret a -> IO Bool

-- | usage: (<tt>caretIsVisible obj</tt>).
caretIsVisible :: Caret a -> IO Bool

-- | usage: (<tt>caretMove obj xy</tt>).
caretMove :: Caret a -> Point -> IO ()

-- | usage: (<tt>caretSetBlinkTime milliseconds</tt>).
caretSetBlinkTime :: Int -> IO ()

-- | usage: (<tt>caretSetSize obj widthheight</tt>).
caretSetSize :: Caret a -> Size -> IO ()

-- | usage: (<tt>caretShow obj</tt>).
caretShow :: Caret a -> IO ()

-- | usage: (<tt>checkBoxCreate prt id txt lfttopwdthgt stl</tt>).
checkBoxCreate :: Window a -> Id -> String -> Rect -> Style -> IO (CheckBox ())

-- | usage: (<tt>checkBoxDelete obj</tt>).
checkBoxDelete :: CheckBox a -> IO ()

-- | usage: (<tt>checkBoxGetValue obj</tt>).
checkBoxGetValue :: CheckBox a -> IO Bool

-- | usage: (<tt>checkBoxSetValue obj value</tt>).
checkBoxSetValue :: CheckBox a -> Bool -> IO ()

-- | usage: (<tt>checkListBoxCheck obj item check</tt>).
checkListBoxCheck :: CheckListBox a -> Int -> Bool -> IO ()

-- | usage: (<tt>checkListBoxCreate prt id lfttopwdthgt nstr stl</tt>).
checkListBoxCreate :: Window a -> Id -> Rect -> [String] -> Style -> IO (CheckListBox ())

-- | usage: (<tt>checkListBoxDelete obj</tt>).
checkListBoxDelete :: CheckListBox a -> IO ()

-- | usage: (<tt>checkListBoxIsChecked obj item</tt>).
checkListBoxIsChecked :: CheckListBox a -> Int -> IO Bool

-- | usage: (<tt>choiceAppend obj item</tt>).
choiceAppend :: Choice a -> String -> IO ()

-- | usage: (<tt>choiceClear obj</tt>).
choiceClear :: Choice a -> IO ()

-- | usage: (<tt>choiceCreate prt id lfttopwdthgt nstr stl</tt>).
choiceCreate :: Window a -> Id -> Rect -> [String] -> Style -> IO (Choice ())

-- | usage: (<tt>choiceDelete obj n</tt>).
choiceDelete :: Choice a -> Int -> IO ()

-- | usage: (<tt>choiceFindString obj s</tt>).
choiceFindString :: Choice a -> String -> IO Int

-- | usage: (<tt>choiceGetCount obj</tt>).
choiceGetCount :: Choice a -> IO Int

-- | usage: (<tt>choiceGetSelection obj</tt>).
choiceGetSelection :: Choice a -> IO Int

-- | usage: (<tt>choiceGetString obj n</tt>).
choiceGetString :: Choice a -> Int -> IO (String)

-- | usage: (<tt>choiceSetSelection obj n</tt>).
choiceSetSelection :: Choice a -> Int -> IO ()

-- | usage: (<tt>choiceSetString obj n s</tt>).
choiceSetString :: Choice a -> Int -> String -> IO ()

-- | usage: (<tt>classInfoCreateClassByName inf</tt>).
classInfoCreateClassByName :: ClassInfo a -> IO (Ptr ())

-- | usage: (<tt>classInfoFindClass txt</tt>).
classInfoFindClass :: String -> IO (ClassInfo ())

-- | usage: (<tt>classInfoGetBaseClassName1 obj</tt>).
classInfoGetBaseClassName1 :: ClassInfo a -> IO (String)

-- | usage: (<tt>classInfoGetBaseClassName2 obj</tt>).
classInfoGetBaseClassName2 :: ClassInfo a -> IO (String)

-- | usage: (<tt>classInfoGetClassName inf</tt>).
classInfoGetClassName :: ClassInfo a -> IO (Ptr ())

-- | usage: (<tt>classInfoGetClassNameEx obj</tt>).
classInfoGetClassNameEx :: ClassInfo a -> IO (String)

-- | usage: (<tt>classInfoGetSize obj</tt>).
classInfoGetSize :: ClassInfo a -> IO Int

-- | usage: (<tt>classInfoIsKindOf obj name</tt>).
classInfoIsKindOf :: ClassInfo a -> String -> IO Bool

-- | usage: (<tt>classInfoIsKindOfEx obj classInfo</tt>).
classInfoIsKindOfEx :: ClassInfo a -> ClassInfo b -> IO Bool

-- | usage: (<tt>clientDCCreate win</tt>).
clientDCCreate :: Window a -> IO (ClientDC ())

-- | usage: (<tt>clientDCDelete obj</tt>).
clientDCDelete :: ClientDC a -> IO ()

-- | usage: (<tt>clipboardAddData obj wxdata</tt>).
clipboardAddData :: Clipboard a -> DataObject b -> IO Bool

-- | usage: (<tt>clipboardClear obj</tt>).
clipboardClear :: Clipboard a -> IO ()

-- | usage: (<tt>clipboardClose obj</tt>).
clipboardClose :: Clipboard a -> IO ()

-- | usage: (<tt>clipboardCreate</tt>).
clipboardCreate :: IO (Clipboard ())

-- | usage: (<tt>clipboardFlush obj</tt>).
clipboardFlush :: Clipboard a -> IO Bool

-- | usage: (<tt>clipboardGetData obj wxdata</tt>).
clipboardGetData :: Clipboard a -> DataObject b -> IO Bool

-- | usage: (<tt>clipboardIsOpened obj</tt>).
clipboardIsOpened :: Clipboard a -> IO Bool

-- | usage: (<tt>clipboardIsSupported obj format</tt>).
clipboardIsSupported :: Clipboard a -> DataFormat b -> IO Bool

-- | usage: (<tt>clipboardOpen obj</tt>).
clipboardOpen :: Clipboard a -> IO Bool

-- | usage: (<tt>clipboardSetData obj wxdata</tt>).
clipboardSetData :: Clipboard a -> DataObject b -> IO Bool

-- | usage: (<tt>clipboardUsePrimarySelection obj primary</tt>).
clipboardUsePrimarySelection :: Clipboard a -> Bool -> IO ()

-- | usage: (<tt>closeEventCanVeto obj</tt>).
closeEventCanVeto :: CloseEvent a -> IO Bool

-- | usage: (<tt>closeEventCopyObject obj obj</tt>).
closeEventCopyObject :: CloseEvent a -> WxObject b -> IO ()

-- | usage: (<tt>closeEventGetLoggingOff obj</tt>).
closeEventGetLoggingOff :: CloseEvent a -> IO Bool

-- | usage: (<tt>closeEventGetVeto obj</tt>).
closeEventGetVeto :: CloseEvent a -> IO Bool

-- | usage: (<tt>closeEventSetCanVeto obj canVeto</tt>).
closeEventSetCanVeto :: CloseEvent a -> Bool -> IO ()

-- | usage: (<tt>closeEventSetLoggingOff obj logOff</tt>).
closeEventSetLoggingOff :: CloseEvent a -> Bool -> IO ()

-- | usage: (<tt>closeEventVeto obj veto</tt>).
closeEventVeto :: CloseEvent a -> Bool -> IO ()

-- | usage: (<tt>closureCreate funCEvent wxdata</tt>).
closureCreate :: FunPtr (Ptr fun -> Ptr state -> Ptr (TEvent evt) -> IO ()) -> Ptr b -> IO (Closure ())

-- | usage: (<tt>closureGetData obj</tt>).
closureGetData :: Closure a -> IO (Ptr ())

-- | usage: (<tt>comboBoxAppend obj item</tt>).
comboBoxAppend :: ComboBox a -> String -> IO ()

-- | usage: (<tt>comboBoxAppendData obj item d</tt>).
comboBoxAppendData :: ComboBox a -> String -> Ptr c -> IO ()

-- | usage: (<tt>comboBoxClear obj</tt>).
comboBoxClear :: ComboBox a -> IO ()

-- | usage: (<tt>comboBoxCopy obj</tt>).
comboBoxCopy :: ComboBox a -> IO ()

-- | usage: (<tt>comboBoxCreate prt id txt lfttopwdthgt nstr stl</tt>).
comboBoxCreate :: Window a -> Id -> String -> Rect -> [String] -> Style -> IO (ComboBox ())

-- | usage: (<tt>comboBoxCut obj</tt>).
comboBoxCut :: ComboBox a -> IO ()

-- | usage: (<tt>comboBoxDelete obj n</tt>).
comboBoxDelete :: ComboBox a -> Int -> IO ()

-- | usage: (<tt>comboBoxFindString obj s</tt>).
comboBoxFindString :: ComboBox a -> String -> IO Int

-- | usage: (<tt>comboBoxGetClientData obj n</tt>).
comboBoxGetClientData :: ComboBox a -> Int -> IO (ClientData ())

-- | usage: (<tt>comboBoxGetCount obj</tt>).
comboBoxGetCount :: ComboBox a -> IO Int

-- | usage: (<tt>comboBoxGetInsertionPoint obj</tt>).
comboBoxGetInsertionPoint :: ComboBox a -> IO Int

-- | usage: (<tt>comboBoxGetLastPosition obj</tt>).
comboBoxGetLastPosition :: ComboBox a -> IO Int

-- | usage: (<tt>comboBoxGetSelection obj</tt>).
comboBoxGetSelection :: ComboBox a -> IO Int

-- | usage: (<tt>comboBoxGetString obj n</tt>).
comboBoxGetString :: ComboBox a -> Int -> IO (String)

-- | usage: (<tt>comboBoxGetStringSelection obj</tt>).
comboBoxGetStringSelection :: ComboBox a -> IO (String)

-- | usage: (<tt>comboBoxGetValue obj</tt>).
comboBoxGetValue :: ComboBox a -> IO (String)

-- | usage: (<tt>comboBoxPaste obj</tt>).
comboBoxPaste :: ComboBox a -> IO ()

-- | usage: (<tt>comboBoxRemove obj from to</tt>).
comboBoxRemove :: ComboBox a -> Int -> Int -> IO ()

-- | usage: (<tt>comboBoxReplace obj from to value</tt>).
comboBoxReplace :: ComboBox a -> Int -> Int -> String -> IO ()

-- | usage: (<tt>comboBoxSetClientData obj n clientData</tt>).
comboBoxSetClientData :: ComboBox a -> Int -> ClientData c -> IO ()

-- | usage: (<tt>comboBoxSetEditable obj editable</tt>).
comboBoxSetEditable :: ComboBox a -> Bool -> IO ()

-- | usage: (<tt>comboBoxSetInsertionPoint obj pos</tt>).
comboBoxSetInsertionPoint :: ComboBox a -> Int -> IO ()

-- | usage: (<tt>comboBoxSetInsertionPointEnd obj</tt>).
comboBoxSetInsertionPointEnd :: ComboBox a -> IO ()

-- | usage: (<tt>comboBoxSetSelection obj n</tt>).
comboBoxSetSelection :: ComboBox a -> Int -> IO ()

-- | usage: (<tt>comboBoxSetTextSelection obj from to</tt>).
comboBoxSetTextSelection :: ComboBox a -> Int -> Int -> IO ()

-- | usage: (<tt>comboBoxSetValue obj value</tt>).
comboBoxSetValue :: ComboBox a -> String -> IO ()

-- | usage: (<tt>commandEventCopyObject obj objectdest</tt>).
commandEventCopyObject :: CommandEvent a -> Ptr b -> IO ()

-- | usage: (<tt>commandEventCreate typ id</tt>).
commandEventCreate :: Int -> Id -> IO (CommandEvent ())

-- | usage: (<tt>commandEventDelete obj</tt>).
commandEventDelete :: CommandEvent a -> IO ()

-- | usage: (<tt>commandEventGetClientData obj</tt>).
commandEventGetClientData :: CommandEvent a -> IO (ClientData ())

-- | usage: (<tt>commandEventGetClientObject obj</tt>).
commandEventGetClientObject :: CommandEvent a -> IO (ClientData ())

-- | usage: (<tt>commandEventGetExtraLong obj</tt>).
commandEventGetExtraLong :: CommandEvent a -> IO Int

-- | usage: (<tt>commandEventGetInt obj</tt>).
commandEventGetInt :: CommandEvent a -> IO Int

-- | usage: (<tt>commandEventGetSelection obj</tt>).
commandEventGetSelection :: CommandEvent a -> IO Int

-- | usage: (<tt>commandEventGetString obj</tt>).
commandEventGetString :: CommandEvent a -> IO (String)

-- | usage: (<tt>commandEventIsChecked obj</tt>).
commandEventIsChecked :: CommandEvent a -> IO Bool

-- | usage: (<tt>commandEventIsSelection obj</tt>).
commandEventIsSelection :: CommandEvent a -> IO Bool

-- | usage: (<tt>commandEventSetClientData obj clientData</tt>).
commandEventSetClientData :: CommandEvent a -> ClientData b -> IO ()

-- | usage: (<tt>commandEventSetClientObject obj clientObject</tt>).
commandEventSetClientObject :: CommandEvent a -> ClientData b -> IO ()

-- | usage: (<tt>commandEventSetExtraLong obj extraLong</tt>).
commandEventSetExtraLong :: CommandEvent a -> Int -> IO ()

-- | usage: (<tt>commandEventSetInt obj i</tt>).
commandEventSetInt :: CommandEvent a -> Int -> IO ()

-- | usage: (<tt>commandEventSetString obj s</tt>).
commandEventSetString :: CommandEvent a -> String -> IO ()

-- | usage: (<tt>configBaseCreate</tt>).
configBaseCreate :: IO (ConfigBase ())

-- | usage: (<tt>configBaseDelete obj</tt>).
configBaseDelete :: ConfigBase a -> IO ()

-- | usage: (<tt>configBaseDeleteAll obj</tt>).
configBaseDeleteAll :: ConfigBase a -> IO Bool

-- | usage: (<tt>configBaseDeleteEntry obj key bDeleteGroupIfEmpty</tt>).
configBaseDeleteEntry :: ConfigBase a -> String -> Bool -> IO Bool

-- | usage: (<tt>configBaseDeleteGroup obj key</tt>).
configBaseDeleteGroup :: ConfigBase a -> String -> IO Bool

-- | usage: (<tt>configBaseExists obj strName</tt>).
configBaseExists :: ConfigBase a -> String -> IO Bool

-- | usage: (<tt>configBaseExpandEnvVars obj str</tt>).
configBaseExpandEnvVars :: ConfigBase a -> String -> IO (String)

-- | usage: (<tt>configBaseFlush obj bCurrentOnly</tt>).
configBaseFlush :: ConfigBase a -> Bool -> IO Bool

-- | usage: (<tt>configBaseGet</tt>).
configBaseGet :: IO (ConfigBase ())

-- | usage: (<tt>configBaseGetAppName obj</tt>).
configBaseGetAppName :: ConfigBase a -> IO (String)

-- | usage: (<tt>configBaseGetEntryType obj name</tt>).
configBaseGetEntryType :: ConfigBase a -> String -> IO Int

-- | usage: (<tt>configBaseGetFirstEntry obj lIndex</tt>).
configBaseGetFirstEntry :: ConfigBase a -> Ptr b -> IO (String)

-- | usage: (<tt>configBaseGetFirstGroup obj lIndex</tt>).
configBaseGetFirstGroup :: ConfigBase a -> Ptr b -> IO (String)

-- | usage: (<tt>configBaseGetNextEntry obj lIndex</tt>).
configBaseGetNextEntry :: ConfigBase a -> Ptr b -> IO (String)

-- | usage: (<tt>configBaseGetNextGroup obj lIndex</tt>).
configBaseGetNextGroup :: ConfigBase a -> Ptr b -> IO (String)

-- | usage: (<tt>configBaseGetNumberOfEntries obj bRecursive</tt>).
configBaseGetNumberOfEntries :: ConfigBase a -> Bool -> IO Int

-- | usage: (<tt>configBaseGetNumberOfGroups obj bRecursive</tt>).
configBaseGetNumberOfGroups :: ConfigBase a -> Bool -> IO Int

-- | usage: (<tt>configBaseGetPath obj</tt>).
configBaseGetPath :: ConfigBase a -> IO (String)

-- | usage: (<tt>configBaseGetStyle obj</tt>).
configBaseGetStyle :: ConfigBase a -> IO Int

-- | usage: (<tt>configBaseGetVendorName obj</tt>).
configBaseGetVendorName :: ConfigBase a -> IO (String)

-- | usage: (<tt>configBaseHasEntry obj strName</tt>).
configBaseHasEntry :: ConfigBase a -> String -> IO Bool

-- | usage: (<tt>configBaseHasGroup obj strName</tt>).
configBaseHasGroup :: ConfigBase a -> String -> IO Bool

-- | usage: (<tt>configBaseIsExpandingEnvVars obj</tt>).
configBaseIsExpandingEnvVars :: ConfigBase a -> IO Bool

-- | usage: (<tt>configBaseIsRecordingDefaults obj</tt>).
configBaseIsRecordingDefaults :: ConfigBase a -> IO Bool

-- | usage: (<tt>configBaseReadBool obj key defVal</tt>).
configBaseReadBool :: ConfigBase a -> String -> Bool -> IO Bool

-- | usage: (<tt>configBaseReadDouble obj key defVal</tt>).
configBaseReadDouble :: ConfigBase a -> String -> Double -> IO Double

-- | usage: (<tt>configBaseReadInteger obj key defVal</tt>).
configBaseReadInteger :: ConfigBase a -> String -> Int -> IO Int

-- | usage: (<tt>configBaseReadString obj key defVal</tt>).
configBaseReadString :: ConfigBase a -> String -> String -> IO (String)

-- | usage: (<tt>configBaseRenameEntry obj oldName newName</tt>).
configBaseRenameEntry :: ConfigBase a -> String -> String -> IO Bool

-- | usage: (<tt>configBaseRenameGroup obj oldName newName</tt>).
configBaseRenameGroup :: ConfigBase a -> String -> String -> IO Bool

-- | usage: (<tt>configBaseSet self</tt>).
configBaseSet :: ConfigBase a -> IO ()

-- | usage: (<tt>configBaseSetAppName obj appName</tt>).
configBaseSetAppName :: ConfigBase a -> String -> IO ()

-- | usage: (<tt>configBaseSetExpandEnvVars obj bDoIt</tt>).
configBaseSetExpandEnvVars :: ConfigBase a -> Bool -> IO ()

-- | usage: (<tt>configBaseSetPath obj strPath</tt>).
configBaseSetPath :: ConfigBase a -> String -> IO ()

-- | usage: (<tt>configBaseSetRecordDefaults obj bDoIt</tt>).
configBaseSetRecordDefaults :: ConfigBase a -> Bool -> IO ()

-- | usage: (<tt>configBaseSetStyle obj style</tt>).
configBaseSetStyle :: ConfigBase a -> Int -> IO ()

-- | usage: (<tt>configBaseSetVendorName obj vendorName</tt>).
configBaseSetVendorName :: ConfigBase a -> String -> IO ()

-- | usage: (<tt>configBaseWriteBool obj key value</tt>).
configBaseWriteBool :: ConfigBase a -> String -> Bool -> IO Bool

-- | usage: (<tt>configBaseWriteDouble obj key value</tt>).
configBaseWriteDouble :: ConfigBase a -> String -> Double -> IO Bool

-- | usage: (<tt>configBaseWriteInteger obj key value</tt>).
configBaseWriteInteger :: ConfigBase a -> String -> Int -> IO Bool

-- | usage: (<tt>configBaseWriteLong obj key value</tt>).
configBaseWriteLong :: ConfigBase a -> String -> Int -> IO Bool

-- | usage: (<tt>configBaseWriteString obj key value</tt>).
configBaseWriteString :: ConfigBase a -> String -> String -> IO Bool

-- | usage: (<tt>contextHelpBeginContextHelp obj win</tt>).
contextHelpBeginContextHelp :: ContextHelp a -> Window b -> IO Bool

-- | usage: (<tt>contextHelpCreate win beginHelp</tt>).
contextHelpCreate :: Window a -> Bool -> IO (ContextHelp ())

-- | usage: (<tt>contextHelpDelete obj</tt>).
contextHelpDelete :: ContextHelp a -> IO ()

-- | usage: (<tt>contextHelpEndContextHelp obj</tt>).
contextHelpEndContextHelp :: ContextHelp a -> IO Bool

-- | usage: (<tt>contextHelpButtonCreate parent id xywh style</tt>).
contextHelpButtonCreate :: Window a -> Id -> Rect -> Int -> IO (ContextHelpButton ())

-- | usage: (<tt>controlCommand obj event</tt>).
controlCommand :: Control a -> Event b -> IO ()

-- | usage: (<tt>controlGetLabel obj</tt>).
controlGetLabel :: Control a -> IO (String)

-- | usage: (<tt>controlSetLabel obj text</tt>).
controlSetLabel :: Control a -> String -> IO ()

-- | usage: (<tt>cursorDelete obj</tt>).
cursorDelete :: Cursor a -> IO ()

-- | usage: (<tt>cursorIsStatic self</tt>).
cursorIsStatic :: Cursor a -> IO Bool

-- | usage: (<tt>cursorSafeDelete self</tt>).
cursorSafeDelete :: Cursor a -> IO ()

-- | usage: (<tt>dcBlit obj xdestydestwidthheight source xsrcysrc rop
--   useMask</tt>).
dcBlit :: DC a -> Rect -> DC c -> Point -> Int -> Bool -> IO Bool

-- | usage: (<tt>dcCalcBoundingBox obj xy</tt>).
dcCalcBoundingBox :: DC a -> Point -> IO ()

-- | usage: (<tt>dcCanDrawBitmap obj</tt>).
dcCanDrawBitmap :: DC a -> IO Bool

-- | usage: (<tt>dcCanGetTextExtent obj</tt>).
dcCanGetTextExtent :: DC a -> IO Bool

-- | usage: (<tt>dcClear obj</tt>).
dcClear :: DC a -> IO ()

-- | usage: (<tt>dcComputeScaleAndOrigin obj</tt>).
dcComputeScaleAndOrigin :: DC a -> IO ()

-- | usage: (<tt>dcCrossHair obj xy</tt>).
dcCrossHair :: DC a -> Point -> IO ()

-- | usage: (<tt>dcDelete obj</tt>).
dcDelete :: DC a -> IO ()

-- | usage: (<tt>dcDestroyClippingRegion obj</tt>).
dcDestroyClippingRegion :: DC a -> IO ()

-- | usage: (<tt>dcDeviceToLogicalX obj x</tt>).
dcDeviceToLogicalX :: DC a -> Int -> IO Int

-- | usage: (<tt>dcDeviceToLogicalXRel obj x</tt>).
dcDeviceToLogicalXRel :: DC a -> Int -> IO Int

-- | usage: (<tt>dcDeviceToLogicalY obj y</tt>).
dcDeviceToLogicalY :: DC a -> Int -> IO Int

-- | usage: (<tt>dcDeviceToLogicalYRel obj y</tt>).
dcDeviceToLogicalYRel :: DC a -> Int -> IO Int

-- | usage: (<tt>dcDrawArc obj x1y1 x2y2 xcyc</tt>).
dcDrawArc :: DC a -> Point -> Point -> Point -> IO ()

-- | usage: (<tt>dcDrawBitmap obj bmp xy useMask</tt>).
dcDrawBitmap :: DC a -> Bitmap b -> Point -> Bool -> IO ()

-- | usage: (<tt>dcDrawCheckMark obj xywidthheight</tt>).
dcDrawCheckMark :: DC a -> Rect -> IO ()

-- | usage: (<tt>dcDrawCircle obj xy radius</tt>).
dcDrawCircle :: DC a -> Point -> Int -> IO ()

-- | usage: (<tt>dcDrawEllipse obj xywidthheight</tt>).
dcDrawEllipse :: DC a -> Rect -> IO ()

-- | usage: (<tt>dcDrawEllipticArc obj xywh sa ea</tt>).
dcDrawEllipticArc :: DC a -> Rect -> Double -> Double -> IO ()

-- | usage: (<tt>dcDrawIcon obj icon xy</tt>).
dcDrawIcon :: DC a -> Icon b -> Point -> IO ()

-- | usage: (<tt>dcDrawLabel obj str xywh align indexAccel</tt>).
dcDrawLabel :: DC a -> String -> Rect -> Int -> Int -> IO ()

-- | usage: (<tt>dcDrawLabelBitmap obj str bmp xywh align indexAccel</tt>).
dcDrawLabelBitmap :: DC a -> String -> Bitmap c -> Rect -> Int -> Int -> IO (Rect)

-- | usage: (<tt>dcDrawLine obj x1y1 x2y2</tt>).
dcDrawLine :: DC a -> Point -> Point -> IO ()

-- | usage: (<tt>dcDrawLines obj n x y xoffsetyoffset</tt>).
dcDrawLines :: DC a -> Int -> Ptr c -> Ptr d -> Point -> IO ()

-- | usage: (<tt>dcDrawPoint obj xy</tt>).
dcDrawPoint :: DC a -> Point -> IO ()

-- | usage: (<tt>dcDrawPolyPolygon obj n count x y xoffsetyoffset
--   fillStyle</tt>).
dcDrawPolyPolygon :: DC a -> Int -> Ptr c -> Ptr d -> Ptr e -> Point -> Int -> IO ()

-- | usage: (<tt>dcDrawPolygon obj n x y xoffsetyoffset fillStyle</tt>).
dcDrawPolygon :: DC a -> Int -> Ptr c -> Ptr d -> Point -> Int -> IO ()

-- | usage: (<tt>dcDrawRectangle obj xywidthheight</tt>).
dcDrawRectangle :: DC a -> Rect -> IO ()

-- | usage: (<tt>dcDrawRotatedText obj text xy angle</tt>).
dcDrawRotatedText :: DC a -> String -> Point -> Double -> IO ()

-- | usage: (<tt>dcDrawRoundedRectangle obj xywidthheight radius</tt>).
dcDrawRoundedRectangle :: DC a -> Rect -> Double -> IO ()

-- | usage: (<tt>dcDrawText obj text xy</tt>).
dcDrawText :: DC a -> String -> Point -> IO ()

-- | usage: (<tt>dcEndDoc obj</tt>).
dcEndDoc :: DC a -> IO ()

-- | usage: (<tt>dcEndPage obj</tt>).
dcEndPage :: DC a -> IO ()

-- | usage: (<tt>dcFloodFill obj xy col style</tt>).
dcFloodFill :: DC a -> Point -> Color -> Int -> IO ()

-- | usage: (<tt>dcGetBackground obj</tt>).
dcGetBackground :: DC a -> IO (Brush ())

-- | usage: (<tt>dcGetBackgroundMode obj</tt>).
dcGetBackgroundMode :: DC a -> IO Int

-- | usage: (<tt>dcGetBrush obj</tt>).
dcGetBrush :: DC a -> IO (Brush ())

-- | usage: (<tt>dcGetCharHeight obj</tt>).
dcGetCharHeight :: DC a -> IO Int

-- | usage: (<tt>dcGetCharWidth obj</tt>).
dcGetCharWidth :: DC a -> IO Int

-- | usage: (<tt>dcGetClippingBox obj</tt>).
dcGetClippingBox :: DC a -> IO Rect

-- | usage: (<tt>dcGetDepth obj</tt>).
dcGetDepth :: DC a -> IO Int

-- | usage: (<tt>dcGetDeviceOrigin obj</tt>).
dcGetDeviceOrigin :: DC a -> IO Point

-- | usage: (<tt>dcGetFont obj</tt>).
dcGetFont :: DC a -> IO (Font ())

-- | usage: (<tt>dcGetLogicalFunction obj</tt>).
dcGetLogicalFunction :: DC a -> IO Int

-- | usage: (<tt>dcGetLogicalOrigin obj</tt>).
dcGetLogicalOrigin :: DC a -> IO Point

-- | usage: (<tt>dcGetLogicalScale obj</tt>).
dcGetLogicalScale :: DC a -> IO (Size2D Double)

-- | usage: (<tt>dcGetMapMode obj</tt>).
dcGetMapMode :: DC a -> IO Int

-- | usage: (<tt>dcGetMultiLineTextExtent self string w h heightLine
--   theFont</tt>).
dcGetMultiLineTextExtent :: DC a -> String -> Ptr c -> Ptr d -> Ptr e -> Font f -> IO ()

-- | usage: (<tt>dcGetPPI obj</tt>).
dcGetPPI :: DC a -> IO (Size)

-- | usage: (<tt>dcGetPen obj</tt>).
dcGetPen :: DC a -> IO (Pen ())

-- | usage: (<tt>dcGetPixel obj xy col</tt>).
dcGetPixel :: DC a -> Point -> Color -> IO Bool

-- | usage: (<tt>dcGetPixel2 obj xy</tt>).
dcGetPixel2 :: DC a -> Point -> IO (Color)

-- | usage: (<tt>dcGetSize obj</tt>).
dcGetSize :: DC a -> IO (Size)

-- | usage: (<tt>dcGetSizeMM obj</tt>).
dcGetSizeMM :: DC a -> IO (Size)

-- | usage: (<tt>dcGetTextBackground obj</tt>).
dcGetTextBackground :: DC a -> IO (Color)

-- | usage: (<tt>dcGetTextExtent self string w h descent externalLeading
--   theFont</tt>).
dcGetTextExtent :: DC a -> String -> Ptr c -> Ptr d -> Ptr e -> Ptr f -> Font g -> IO ()

-- | usage: (<tt>dcGetTextForeground obj</tt>).
dcGetTextForeground :: DC a -> IO (Color)

-- | usage: (<tt>dcGetUserScale obj</tt>).
dcGetUserScale :: DC a -> IO (Size2D Double)

-- | usage: (<tt>dcGetUserScaleX dc</tt>).
dcGetUserScaleX :: DC a -> IO Double

-- | usage: (<tt>dcGetUserScaleY dc</tt>).
dcGetUserScaleY :: DC a -> IO Double

-- | usage: (<tt>dcIsOk obj</tt>).
dcIsOk :: DC a -> IO Bool

-- | usage: (<tt>dcLogicalToDeviceX obj x</tt>).
dcLogicalToDeviceX :: DC a -> Int -> IO Int

-- | usage: (<tt>dcLogicalToDeviceXRel obj x</tt>).
dcLogicalToDeviceXRel :: DC a -> Int -> IO Int

-- | usage: (<tt>dcLogicalToDeviceY obj y</tt>).
dcLogicalToDeviceY :: DC a -> Int -> IO Int

-- | usage: (<tt>dcLogicalToDeviceYRel obj y</tt>).
dcLogicalToDeviceYRel :: DC a -> Int -> IO Int

-- | usage: (<tt>dcMaxX obj</tt>).
dcMaxX :: DC a -> IO Int

-- | usage: (<tt>dcMaxY obj</tt>).
dcMaxY :: DC a -> IO Int

-- | usage: (<tt>dcMinX obj</tt>).
dcMinX :: DC a -> IO Int

-- | usage: (<tt>dcMinY obj</tt>).
dcMinY :: DC a -> IO Int

-- | usage: (<tt>dcResetBoundingBox obj</tt>).
dcResetBoundingBox :: DC a -> IO ()

-- | usage: (<tt>dcSetAxisOrientation obj xLeftRight yBottomUp</tt>).
dcSetAxisOrientation :: DC a -> Bool -> Bool -> IO ()

-- | usage: (<tt>dcSetBackground obj brush</tt>).
dcSetBackground :: DC a -> Brush b -> IO ()

-- | usage: (<tt>dcSetBackgroundMode obj mode</tt>).
dcSetBackgroundMode :: DC a -> Int -> IO ()

-- | usage: (<tt>dcSetBrush obj brush</tt>).
dcSetBrush :: DC a -> Brush b -> IO ()

-- | usage: (<tt>dcSetClippingRegion obj xywidthheight</tt>).
dcSetClippingRegion :: DC a -> Rect -> IO ()

-- | usage: (<tt>dcSetClippingRegionFromRegion obj region</tt>).
dcSetClippingRegionFromRegion :: DC a -> Region b -> IO ()

-- | usage: (<tt>dcSetDeviceClippingRegion obj region</tt>).
dcSetDeviceClippingRegion :: DC a -> Region b -> IO ()

-- | usage: (<tt>dcSetDeviceOrigin obj xy</tt>).
dcSetDeviceOrigin :: DC a -> Point -> IO ()

-- | usage: (<tt>dcSetFont obj font</tt>).
dcSetFont :: DC a -> Font b -> IO ()

-- | usage: (<tt>dcSetLogicalFunction obj function</tt>).
dcSetLogicalFunction :: DC a -> Int -> IO ()

-- | usage: (<tt>dcSetLogicalOrigin obj xy</tt>).
dcSetLogicalOrigin :: DC a -> Point -> IO ()

-- | usage: (<tt>dcSetLogicalScale obj x y</tt>).
dcSetLogicalScale :: DC a -> Double -> Double -> IO ()

-- | usage: (<tt>dcSetMapMode obj mode</tt>).
dcSetMapMode :: DC a -> Int -> IO ()

-- | usage: (<tt>dcSetPalette obj palette</tt>).
dcSetPalette :: DC a -> Palette b -> IO ()

-- | usage: (<tt>dcSetPen obj pen</tt>).
dcSetPen :: DC a -> Pen b -> IO ()

-- | usage: (<tt>dcSetTextBackground obj colour</tt>).
dcSetTextBackground :: DC a -> Color -> IO ()

-- | usage: (<tt>dcSetTextForeground obj colour</tt>).
dcSetTextForeground :: DC a -> Color -> IO ()

-- | usage: (<tt>dcSetUserScale obj x y</tt>).
dcSetUserScale :: DC a -> Double -> Double -> IO ()

-- | usage: (<tt>dcStartDoc obj msg</tt>).
dcStartDoc :: DC a -> String -> IO Bool

-- | usage: (<tt>dcStartPage obj</tt>).
dcStartPage :: DC a -> IO ()

-- | usage: (<tt>dataFormatCreateFromId name</tt>).
dataFormatCreateFromId :: String -> IO (DataFormat ())

-- | usage: (<tt>dataFormatCreateFromType typ</tt>).
dataFormatCreateFromType :: Int -> IO (DataFormat ())

-- | usage: (<tt>dataFormatDelete obj</tt>).
dataFormatDelete :: DataFormat a -> IO ()

-- | usage: (<tt>dataFormatGetId obj</tt>).
dataFormatGetId :: DataFormat a -> IO (String)

-- | usage: (<tt>dataFormatGetType obj</tt>).
dataFormatGetType :: DataFormat a -> IO Int

-- | usage: (<tt>dataFormatIsEqual obj other</tt>).
dataFormatIsEqual :: DataFormat a -> Ptr b -> IO Bool

-- | usage: (<tt>dataFormatSetId obj id</tt>).
dataFormatSetId :: DataFormat a -> Ptr b -> IO ()

-- | usage: (<tt>dataFormatSetType obj typ</tt>).
dataFormatSetType :: DataFormat a -> Int -> IO ()

-- | usage: (<tt>dataObjectCompositeAdd obj dat preferred</tt>).
dataObjectCompositeAdd :: DataObjectComposite a -> Ptr b -> Int -> IO ()

-- | usage: (<tt>dataObjectCompositeCreate</tt>).
dataObjectCompositeCreate :: IO (DataObjectComposite ())

-- | usage: (<tt>dataObjectCompositeDelete obj</tt>).
dataObjectCompositeDelete :: DataObjectComposite a -> IO ()

-- | usage: (<tt>datePropertyCreate label name value</tt>).
datePropertyCreate :: String -> String -> DateTime c -> IO (DateProperty ())

-- | usage: (<tt>dateTimeAddDate obj diff</tt>).
dateTimeAddDate :: DateTime a -> Ptr b -> IO (DateTime ())

-- | usage: (<tt>dateTimeAddDateValues obj yrs mnt wek day</tt>).
dateTimeAddDateValues :: DateTime a -> Int -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>dateTimeAddTime obj diff</tt>).
dateTimeAddTime :: DateTime a -> Ptr b -> IO (DateTime ())

-- | usage: (<tt>dateTimeAddTimeValues obj hrs min sec mls</tt>).
dateTimeAddTimeValues :: DateTime a -> Int -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>dateTimeConvertYearToBC year</tt>).
dateTimeConvertYearToBC :: Int -> IO Int

-- | usage: (<tt>dateTimeCreate</tt>).
dateTimeCreate :: IO (DateTime ())

-- | usage: (<tt>dateTimeDelete obj</tt>).
dateTimeDelete :: DateTime a -> IO ()

-- | usage: (<tt>dateTimeFormat obj format tz</tt>).
dateTimeFormat :: DateTime a -> Ptr b -> Int -> IO (String)

-- | usage: (<tt>dateTimeFormatDate obj</tt>).
dateTimeFormatDate :: DateTime a -> IO (String)

-- | usage: (<tt>dateTimeFormatISODate obj</tt>).
dateTimeFormatISODate :: DateTime a -> IO (String)

-- | usage: (<tt>dateTimeFormatISOTime obj</tt>).
dateTimeFormatISOTime :: DateTime a -> IO (String)

-- | usage: (<tt>dateTimeFormatTime obj</tt>).
dateTimeFormatTime :: DateTime a -> IO (String)

-- | usage: (<tt>dateTimeGetAmString</tt>).
dateTimeGetAmString :: IO (String)

-- | usage: (<tt>dateTimeGetBeginDST year country dt</tt>).
dateTimeGetBeginDST :: Int -> Int -> DateTime c -> IO ()

-- | usage: (<tt>dateTimeGetCentury year</tt>).
dateTimeGetCentury :: Int -> IO Int

-- | usage: (<tt>dateTimeGetCountry</tt>).
dateTimeGetCountry :: IO Int

-- | usage: (<tt>dateTimeGetCurrentMonth cal</tt>).
dateTimeGetCurrentMonth :: Int -> IO Int

-- | usage: (<tt>dateTimeGetCurrentYear cal</tt>).
dateTimeGetCurrentYear :: Int -> IO Int

-- | usage: (<tt>dateTimeGetDay obj tz</tt>).
dateTimeGetDay :: DateTime a -> Int -> IO Int

-- | usage: (<tt>dateTimeGetDayOfYear obj tz</tt>).
dateTimeGetDayOfYear :: DateTime a -> Int -> IO Int

-- | usage: (<tt>dateTimeGetEndDST year country dt</tt>).
dateTimeGetEndDST :: Int -> Int -> DateTime c -> IO ()

-- | usage: (<tt>dateTimeGetHour obj tz</tt>).
dateTimeGetHour :: DateTime a -> Int -> IO Int

-- | usage: (<tt>dateTimeGetLastMonthDay obj month year</tt>).
dateTimeGetLastMonthDay :: DateTime a -> Int -> Int -> IO (DateTime ())

-- | usage: (<tt>dateTimeGetLastWeekDay obj weekday month year</tt>).
dateTimeGetLastWeekDay :: DateTime a -> Int -> Int -> Int -> IO (DateTime ())

-- | usage: (<tt>dateTimeGetMillisecond obj tz</tt>).
dateTimeGetMillisecond :: DateTime a -> Int -> IO Int

-- | usage: (<tt>dateTimeGetMinute obj tz</tt>).
dateTimeGetMinute :: DateTime a -> Int -> IO Int

-- | usage: (<tt>dateTimeGetMonth obj tz</tt>).
dateTimeGetMonth :: DateTime a -> Int -> IO Int

-- | usage: (<tt>dateTimeGetMonthName month flags</tt>).
dateTimeGetMonthName :: Int -> Int -> IO (String)

-- | usage: (<tt>dateTimeGetNextWeekDay obj weekday</tt>).
dateTimeGetNextWeekDay :: DateTime a -> Int -> IO (DateTime ())

-- | usage: (<tt>dateTimeGetNumberOfDays year cal</tt>).
dateTimeGetNumberOfDays :: Int -> Int -> IO Int

-- | usage: (<tt>dateTimeGetNumberOfDaysMonth month year cal</tt>).
dateTimeGetNumberOfDaysMonth :: Int -> Int -> Int -> IO Int

-- | usage: (<tt>dateTimeGetPmString</tt>).
dateTimeGetPmString :: IO (String)

-- | usage: (<tt>dateTimeGetPrevWeekDay obj weekday</tt>).
dateTimeGetPrevWeekDay :: DateTime a -> Int -> IO (DateTime ())

-- | usage: (<tt>dateTimeGetSecond obj tz</tt>).
dateTimeGetSecond :: DateTime a -> Int -> IO Int

-- | usage: (<tt>dateTimeGetTicks obj</tt>).
dateTimeGetTicks :: DateTime a -> IO Int

-- | usage: (<tt>dateTimeGetTimeNow</tt>).
dateTimeGetTimeNow :: IO Int

-- | usage: (<tt>dateTimeGetValue obj hilong lolong</tt>).
dateTimeGetValue :: DateTime a -> Ptr b -> Ptr c -> IO ()

-- | usage: (<tt>dateTimeGetWeekDay obj weekday n month year</tt>).
dateTimeGetWeekDay :: DateTime a -> Int -> Int -> Int -> Int -> IO (DateTime ())

-- | usage: (<tt>dateTimeGetWeekDayInSameWeek obj weekday</tt>).
dateTimeGetWeekDayInSameWeek :: DateTime a -> Int -> IO (DateTime ())

-- | usage: (<tt>dateTimeGetWeekDayName weekday flags</tt>).
dateTimeGetWeekDayName :: Int -> Int -> IO (String)

-- | usage: (<tt>dateTimeGetWeekDayTZ obj tz</tt>).
dateTimeGetWeekDayTZ :: DateTime a -> Int -> IO Int

-- | usage: (<tt>dateTimeGetWeekOfMonth obj flags tz</tt>).
dateTimeGetWeekOfMonth :: DateTime a -> Int -> Int -> IO Int

-- | usage: (<tt>dateTimeGetWeekOfYear obj flags tz</tt>).
dateTimeGetWeekOfYear :: DateTime a -> Int -> Int -> IO Int

-- | usage: (<tt>dateTimeGetYear obj tz</tt>).
dateTimeGetYear :: DateTime a -> Int -> IO Int

-- | usage: (<tt>dateTimeIsBetween obj t1 t2</tt>).
dateTimeIsBetween :: DateTime a -> DateTime b -> DateTime c -> IO Bool

-- | usage: (<tt>dateTimeIsDST obj country</tt>).
dateTimeIsDST :: DateTime a -> Int -> IO Bool

-- | usage: (<tt>dateTimeIsDSTApplicable year country</tt>).
dateTimeIsDSTApplicable :: Int -> Int -> IO Bool

-- | usage: (<tt>dateTimeIsEarlierThan obj datetime</tt>).
dateTimeIsEarlierThan :: DateTime a -> Ptr b -> IO Bool

-- | usage: (<tt>dateTimeIsEqualTo obj datetime</tt>).
dateTimeIsEqualTo :: DateTime a -> Ptr b -> IO Bool

-- | usage: (<tt>dateTimeIsEqualUpTo obj dt ts</tt>).
dateTimeIsEqualUpTo :: DateTime a -> DateTime b -> Ptr c -> IO Bool

-- | usage: (<tt>dateTimeIsLaterThan obj datetime</tt>).
dateTimeIsLaterThan :: DateTime a -> Ptr b -> IO Bool

-- | usage: (<tt>dateTimeIsLeapYear year cal</tt>).
dateTimeIsLeapYear :: Int -> Int -> IO Bool

-- | usage: (<tt>dateTimeIsSameDate obj dt</tt>).
dateTimeIsSameDate :: DateTime a -> DateTime b -> IO Bool

-- | usage: (<tt>dateTimeIsSameTime obj dt</tt>).
dateTimeIsSameTime :: DateTime a -> DateTime b -> IO Bool

-- | usage: (<tt>dateTimeIsStrictlyBetween obj t1 t2</tt>).
dateTimeIsStrictlyBetween :: DateTime a -> DateTime b -> DateTime c -> IO Bool

-- | usage: (<tt>dateTimeIsValid obj</tt>).
dateTimeIsValid :: DateTime a -> IO Bool

-- | usage: (<tt>dateTimeIsWestEuropeanCountry country</tt>).
dateTimeIsWestEuropeanCountry :: Int -> IO Bool

-- | usage: (<tt>dateTimeIsWorkDay obj country</tt>).
dateTimeIsWorkDay :: DateTime a -> Int -> IO Bool

-- | usage: (<tt>dateTimeMakeGMT obj noDST</tt>).
dateTimeMakeGMT :: DateTime a -> Int -> IO ()

-- | usage: (<tt>dateTimeMakeTimezone obj tz noDST</tt>).
dateTimeMakeTimezone :: DateTime a -> Int -> Int -> IO ()

-- | usage: (<tt>dateTimeNow dt</tt>).
dateTimeNow :: DateTime a -> IO ()

-- | usage: (<tt>dateTimeParseDate obj date</tt>).
dateTimeParseDate :: DateTime a -> Ptr b -> IO (Ptr ())

-- | usage: (<tt>dateTimeParseDateTime obj datetime</tt>).
dateTimeParseDateTime :: DateTime a -> Ptr b -> IO (Ptr ())

-- | usage: (<tt>dateTimeParseFormat obj date format dateDef</tt>).
dateTimeParseFormat :: DateTime a -> Ptr b -> Ptr c -> Ptr d -> IO (Ptr ())

-- | usage: (<tt>dateTimeParseRfc822Date obj date</tt>).
dateTimeParseRfc822Date :: DateTime a -> Ptr b -> IO (Ptr ())

-- | usage: (<tt>dateTimeParseTime obj time</tt>).
dateTimeParseTime :: DateTime a -> Time b -> IO (Ptr ())

-- | usage: (<tt>dateTimeResetTime obj</tt>).
dateTimeResetTime :: DateTime a -> IO ()

-- | usage: (<tt>dateTimeSet obj day month year hour minute second
--   millisec</tt>).
dateTimeSet :: DateTime a -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>dateTimeSetCountry country</tt>).
dateTimeSetCountry :: Int -> IO ()

-- | usage: (<tt>dateTimeSetDay obj day</tt>).
dateTimeSetDay :: DateTime a -> Int -> IO ()

-- | usage: (<tt>dateTimeSetHour obj hour</tt>).
dateTimeSetHour :: DateTime a -> Int -> IO ()

-- | usage: (<tt>dateTimeSetMillisecond obj millisecond</tt>).
dateTimeSetMillisecond :: DateTime a -> Int -> IO ()

-- | usage: (<tt>dateTimeSetMinute obj minute</tt>).
dateTimeSetMinute :: DateTime a -> Int -> IO ()

-- | usage: (<tt>dateTimeSetMonth obj month</tt>).
dateTimeSetMonth :: DateTime a -> Int -> IO ()

-- | usage: (<tt>dateTimeSetSecond obj second</tt>).
dateTimeSetSecond :: DateTime a -> Int -> IO ()

-- | usage: (<tt>dateTimeSetTime obj hour minute second millisec</tt>).
dateTimeSetTime :: DateTime a -> Int -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>dateTimeSetToCurrent obj</tt>).
dateTimeSetToCurrent :: DateTime a -> IO ()

-- | usage: (<tt>dateTimeSetToLastMonthDay obj month year</tt>).
dateTimeSetToLastMonthDay :: DateTime a -> Int -> Int -> IO ()

-- | usage: (<tt>dateTimeSetToLastWeekDay obj weekday month year</tt>).
dateTimeSetToLastWeekDay :: DateTime a -> Int -> Int -> Int -> IO Bool

-- | usage: (<tt>dateTimeSetToNextWeekDay obj weekday</tt>).
dateTimeSetToNextWeekDay :: DateTime a -> Int -> IO ()

-- | usage: (<tt>dateTimeSetToPrevWeekDay obj weekday</tt>).
dateTimeSetToPrevWeekDay :: DateTime a -> Int -> IO ()

-- | usage: (<tt>dateTimeSetToWeekDay obj weekday n month year</tt>).
dateTimeSetToWeekDay :: DateTime a -> Int -> Int -> Int -> Int -> IO Bool

-- | usage: (<tt>dateTimeSetToWeekDayInSameWeek obj weekday</tt>).
dateTimeSetToWeekDayInSameWeek :: DateTime a -> Int -> IO ()

-- | usage: (<tt>dateTimeSetYear obj year</tt>).
dateTimeSetYear :: DateTime a -> Int -> IO ()

-- | usage: (<tt>dateTimeSubtractDate obj diff</tt>).
dateTimeSubtractDate :: DateTime a -> Ptr b -> IO (DateTime ())

-- | usage: (<tt>dateTimeSubtractTime obj diff</tt>).
dateTimeSubtractTime :: DateTime a -> Ptr b -> IO (DateTime ())

-- | usage: (<tt>dateTimeToGMT obj noDST</tt>).
dateTimeToGMT :: DateTime a -> Int -> IO ()

-- | usage: (<tt>dateTimeToTimezone obj tz noDST</tt>).
dateTimeToTimezone :: DateTime a -> Int -> Int -> IO ()

-- | usage: (<tt>dateTimeToday dt</tt>).
dateTimeToday :: DateTime a -> IO ()

-- | usage: (<tt>dateTimeUNow dt</tt>).
dateTimeUNow :: DateTime a -> IO ()

-- | usage: (<tt>dateTimewxDateTime hilong lolong</tt>).
dateTimewxDateTime :: Int -> Int -> IO (Ptr ())

-- | usage: (<tt>dialogCreate prt id txt lfttopwdthgt stl</tt>).
dialogCreate :: Window a -> Id -> String -> Rect -> Style -> IO (Dialog ())

-- | usage: (<tt>dialogEndModal obj retCode</tt>).
dialogEndModal :: Dialog a -> Int -> IO ()

-- | usage: (<tt>dialogGetReturnCode obj</tt>).
dialogGetReturnCode :: Dialog a -> IO Int

-- | usage: (<tt>dialogIsModal obj</tt>).
dialogIsModal :: Dialog a -> IO Bool

-- | usage: (<tt>dialogSetReturnCode obj returnCode</tt>).
dialogSetReturnCode :: Dialog a -> Int -> IO ()

-- | usage: (<tt>dialogShowModal obj</tt>).
dialogShowModal :: Dialog a -> IO Int

-- | usage: (<tt>dirDialogCreate prt msg dir lfttop stl</tt>).
dirDialogCreate :: Window a -> String -> String -> Point -> Style -> IO (DirDialog ())

-- | usage: (<tt>dirDialogGetMessage obj</tt>).
dirDialogGetMessage :: DirDialog a -> IO (String)

-- | usage: (<tt>dirDialogGetPath obj</tt>).
dirDialogGetPath :: DirDialog a -> IO (String)

-- | usage: (<tt>dirDialogGetStyle obj</tt>).
dirDialogGetStyle :: DirDialog a -> IO Int

-- | usage: (<tt>dirDialogSetMessage obj msg</tt>).
dirDialogSetMessage :: DirDialog a -> String -> IO ()

-- | usage: (<tt>dirDialogSetPath obj pth</tt>).
dirDialogSetPath :: DirDialog a -> String -> IO ()

-- | usage: (<tt>dirDialogSetStyle obj style</tt>).
dirDialogSetStyle :: DirDialog a -> Int -> IO ()

-- | usage: (<tt>dragImageBeginDrag self xy window boundingWindow</tt>).
dragImageBeginDrag :: DragImage a -> Point -> Window c -> Window d -> IO Bool

-- | usage: (<tt>dragImageBeginDragFullScreen self xposypos window
--   fullScreen rect</tt>).
dragImageBeginDragFullScreen :: DragImage a -> Point -> Window c -> Bool -> Rect -> IO Bool

-- | usage: (<tt>dragImageCreate image xy</tt>).
dragImageCreate :: Bitmap a -> Point -> IO (DragImage ())

-- | usage: (<tt>dragImageDelete self</tt>).
dragImageDelete :: DragImage a -> IO ()

-- | usage: (<tt>dragImageEndDrag self</tt>).
dragImageEndDrag :: DragImage a -> IO ()

-- | usage: (<tt>dragImageHide self</tt>).
dragImageHide :: DragImage a -> IO Bool

-- | usage: (<tt>dragImageMove self xy</tt>).
dragImageMove :: DragImage a -> Point -> IO Bool

-- | usage: (<tt>dragImageShow self</tt>).
dragImageShow :: DragImage a -> IO Bool

-- | usage: (<tt>drawControlCreate prt id lfttopwdthgt stl</tt>).
drawControlCreate :: Window a -> Id -> Rect -> Style -> IO (DrawControl ())

-- | usage: (<tt>drawWindowCreate prt id lfttopwdthgt stl</tt>).
drawWindowCreate :: Window a -> Id -> Rect -> Style -> IO (DrawWindow ())

-- | usage: (<tt>dropTargetGetData obj</tt>).
dropTargetGetData :: DropTarget a -> IO ()

-- | usage: (<tt>dropTargetSetDataObject obj dat</tt>).
dropTargetSetDataObject :: DropTarget a -> DataObject b -> IO ()

-- | usage: (<tt>encodingConverterConvert obj input output</tt>).
encodingConverterConvert :: EncodingConverter a -> Ptr b -> Ptr c -> IO ()

-- | usage: (<tt>encodingConverterCreate</tt>).
encodingConverterCreate :: IO (EncodingConverter ())

-- | usage: (<tt>encodingConverterDelete obj</tt>).
encodingConverterDelete :: EncodingConverter a -> IO ()

-- | usage: (<tt>encodingConverterGetAllEquivalents obj enc lst</tt>).
encodingConverterGetAllEquivalents :: EncodingConverter a -> Int -> List c -> IO Int

-- | usage: (<tt>encodingConverterGetPlatformEquivalents obj enc platform
--   lst</tt>).
encodingConverterGetPlatformEquivalents :: EncodingConverter a -> Int -> Int -> List d -> IO Int

-- | usage: (<tt>encodingConverterInit obj inputenc outputenc method</tt>).
encodingConverterInit :: EncodingConverter a -> Int -> Int -> Int -> IO Int

-- | usage: (<tt>eraseEventCopyObject obj obj</tt>).
eraseEventCopyObject :: EraseEvent a -> Ptr b -> IO ()

-- | usage: (<tt>eraseEventGetDC obj</tt>).
eraseEventGetDC :: EraseEvent a -> IO (DC ())

-- | usage: (<tt>eventCopyObject obj objectdest</tt>).
eventCopyObject :: Event a -> Ptr b -> IO ()

-- | usage: (<tt>eventGetEventObject obj</tt>).
eventGetEventObject :: Event a -> IO (WxObject ())

-- | usage: (<tt>eventGetEventType obj</tt>).
eventGetEventType :: Event a -> IO Int

-- | usage: (<tt>eventGetId obj</tt>).
eventGetId :: Event a -> IO Int

-- | usage: (<tt>eventGetSkipped obj</tt>).
eventGetSkipped :: Event a -> IO Bool

-- | usage: (<tt>eventGetTimestamp obj</tt>).
eventGetTimestamp :: Event a -> IO Int

-- | usage: (<tt>eventIsCommandEvent obj</tt>).
eventIsCommandEvent :: Event a -> IO Bool

-- | usage: (<tt>eventNewEventType</tt>).
eventNewEventType :: IO Int

-- | usage: (<tt>eventSetEventObject obj obj</tt>).
eventSetEventObject :: Event a -> WxObject b -> IO ()

-- | usage: (<tt>eventSetEventType obj typ</tt>).
eventSetEventType :: Event a -> Int -> IO ()

-- | usage: (<tt>eventSetId obj id</tt>).
eventSetId :: Event a -> Int -> IO ()

-- | usage: (<tt>eventSetTimestamp obj ts</tt>).
eventSetTimestamp :: Event a -> Int -> IO ()

-- | usage: (<tt>eventSkip obj</tt>).
eventSkip :: Event a -> IO ()

-- | usage: (<tt>evtHandlerAddPendingEvent obj event</tt>).
evtHandlerAddPendingEvent :: EvtHandler a -> Event b -> IO ()

-- | usage: (<tt>evtHandlerConnect obj first last wxtype wxdata</tt>).
evtHandlerConnect :: EvtHandler a -> Int -> Int -> Int -> Ptr e -> IO Int

-- | usage: (<tt>evtHandlerCreate</tt>).
evtHandlerCreate :: IO (EvtHandler ())

-- | usage: (<tt>evtHandlerDelete obj</tt>).
evtHandlerDelete :: EvtHandler a -> IO ()

-- | usage: (<tt>evtHandlerDisconnect obj first last wxtype id</tt>).
evtHandlerDisconnect :: EvtHandler a -> Int -> Int -> Int -> Id -> IO Int

-- | Get the client data in the form of a closure. Use
--   <a>closureGetData</a> to get to the actual data.*
evtHandlerGetClientClosure :: EvtHandler a -> IO (Closure ())

-- | usage: (<tt>evtHandlerGetClosure obj id wxtype</tt>).
evtHandlerGetClosure :: EvtHandler a -> Id -> Int -> IO (Closure ())

-- | usage: (<tt>evtHandlerGetEvtHandlerEnabled obj</tt>).
evtHandlerGetEvtHandlerEnabled :: EvtHandler a -> IO Bool

-- | usage: (<tt>evtHandlerGetNextHandler obj</tt>).
evtHandlerGetNextHandler :: EvtHandler a -> IO (EvtHandler ())

-- | usage: (<tt>evtHandlerGetPreviousHandler obj</tt>).
evtHandlerGetPreviousHandler :: EvtHandler a -> IO (EvtHandler ())

-- | usage: (<tt>evtHandlerProcessEvent obj event</tt>).
evtHandlerProcessEvent :: EvtHandler a -> Event b -> IO Bool

-- | usage: (<tt>evtHandlerProcessPendingEvents obj</tt>).
evtHandlerProcessPendingEvents :: EvtHandler a -> IO ()

-- | Set the client data as a closure. The closure data contains the data
--   while the function is called on deletion. *
evtHandlerSetClientClosure :: EvtHandler a -> Closure b -> IO ()

-- | usage: (<tt>evtHandlerSetEvtHandlerEnabled obj enabled</tt>).
evtHandlerSetEvtHandlerEnabled :: EvtHandler a -> Bool -> IO ()

-- | usage: (<tt>evtHandlerSetNextHandler obj handler</tt>).
evtHandlerSetNextHandler :: EvtHandler a -> EvtHandler b -> IO ()

-- | usage: (<tt>evtHandlerSetPreviousHandler obj handler</tt>).
evtHandlerSetPreviousHandler :: EvtHandler a -> EvtHandler b -> IO ()

-- | usage: (<tt>fileConfigCreate inp</tt>).
fileConfigCreate :: InputStream a -> IO (FileConfig ())

-- | usage: (<tt>fileDialogCreate prt msg dir fle wcd lfttop stl</tt>).
fileDialogCreate :: Window a -> String -> String -> String -> String -> Point -> Style -> IO (FileDialog ())

-- | usage: (<tt>fileDialogGetDirectory obj</tt>).
fileDialogGetDirectory :: FileDialog a -> IO (String)

-- | usage: (<tt>fileDialogGetFilename obj</tt>).
fileDialogGetFilename :: FileDialog a -> IO (String)

-- | usage: (<tt>fileDialogGetFilenames obj</tt>).
fileDialogGetFilenames :: FileDialog a -> IO [String]

-- | usage: (<tt>fileDialogGetFilterIndex obj</tt>).
fileDialogGetFilterIndex :: FileDialog a -> IO Int

-- | usage: (<tt>fileDialogGetMessage obj</tt>).
fileDialogGetMessage :: FileDialog a -> IO (String)

-- | usage: (<tt>fileDialogGetPath obj</tt>).
fileDialogGetPath :: FileDialog a -> IO (String)

-- | usage: (<tt>fileDialogGetPaths obj</tt>).
fileDialogGetPaths :: FileDialog a -> IO [String]

-- | usage: (<tt>fileDialogGetStyle obj</tt>).
fileDialogGetStyle :: FileDialog a -> IO Int

-- | usage: (<tt>fileDialogGetWildcard obj</tt>).
fileDialogGetWildcard :: FileDialog a -> IO (String)

-- | usage: (<tt>fileDialogSetDirectory obj dir</tt>).
fileDialogSetDirectory :: FileDialog a -> String -> IO ()

-- | usage: (<tt>fileDialogSetFilename obj name</tt>).
fileDialogSetFilename :: FileDialog a -> String -> IO ()

-- | usage: (<tt>fileDialogSetFilterIndex obj filterIndex</tt>).
fileDialogSetFilterIndex :: FileDialog a -> Int -> IO ()

-- | usage: (<tt>fileDialogSetMessage obj message</tt>).
fileDialogSetMessage :: FileDialog a -> String -> IO ()

-- | usage: (<tt>fileDialogSetPath obj path</tt>).
fileDialogSetPath :: FileDialog a -> String -> IO ()

-- | usage: (<tt>fileDialogSetStyle obj style</tt>).
fileDialogSetStyle :: FileDialog a -> Int -> IO ()

-- | usage: (<tt>fileDialogSetWildcard obj wildCard</tt>).
fileDialogSetWildcard :: FileDialog a -> String -> IO ()

-- | usage: (<tt>fileHistoryAddFileToHistory obj file</tt>).
fileHistoryAddFileToHistory :: FileHistory a -> String -> IO ()

-- | usage: (<tt>fileHistoryAddFilesToMenu obj menu</tt>).
fileHistoryAddFilesToMenu :: FileHistory a -> Menu b -> IO ()

-- | usage: (<tt>fileHistoryCreate maxFiles</tt>).
fileHistoryCreate :: Int -> IO (FileHistory ())

-- | usage: (<tt>fileHistoryDelete obj</tt>).
fileHistoryDelete :: FileHistory a -> IO ()

-- | usage: (<tt>fileHistoryGetCount obj</tt>).
fileHistoryGetCount :: FileHistory a -> IO Int

-- | usage: (<tt>fileHistoryGetHistoryFile obj i</tt>).
fileHistoryGetHistoryFile :: FileHistory a -> Int -> IO (String)

-- | usage: (<tt>fileHistoryGetMaxFiles obj</tt>).
fileHistoryGetMaxFiles :: FileHistory a -> IO Int

-- | usage: (<tt>fileHistoryGetMenus obj</tt>).
fileHistoryGetMenus :: FileHistory a -> IO [Menu ()]

-- | usage: (<tt>fileHistoryLoad obj config</tt>).
fileHistoryLoad :: FileHistory a -> ConfigBase b -> IO ()

-- | usage: (<tt>fileHistoryRemoveFileFromHistory obj i</tt>).
fileHistoryRemoveFileFromHistory :: FileHistory a -> Int -> IO ()

-- | usage: (<tt>fileHistoryRemoveMenu obj menu</tt>).
fileHistoryRemoveMenu :: FileHistory a -> Menu b -> IO ()

-- | usage: (<tt>fileHistorySave obj config</tt>).
fileHistorySave :: FileHistory a -> ConfigBase b -> IO ()

-- | usage: (<tt>fileHistoryUseMenu obj menu</tt>).
fileHistoryUseMenu :: FileHistory a -> Menu b -> IO ()

-- | usage: (<tt>fileInputStreamCreate ofileName</tt>).
fileInputStreamCreate :: String -> IO (FileInputStream ())

-- | usage: (<tt>fileInputStreamDelete self</tt>).
fileInputStreamDelete :: FileInputStream a -> IO ()

-- | usage: (<tt>fileInputStreamIsOk self</tt>).
fileInputStreamIsOk :: FileInputStream a -> IO Bool

-- | usage: (<tt>fileOutputStreamCreate ofileName</tt>).
fileOutputStreamCreate :: String -> IO (FileOutputStream ())

-- | usage: (<tt>fileOutputStreamDelete self</tt>).
fileOutputStreamDelete :: FileOutputStream a -> IO ()

-- | usage: (<tt>fileOutputStreamIsOk self</tt>).
fileOutputStreamIsOk :: FileOutputStream a -> IO Bool

-- | usage: (<tt>filePropertyCreate label name value</tt>).
filePropertyCreate :: String -> String -> String -> IO (FileProperty ())

-- | usage: (<tt>fileTypeDelete obj</tt>).
fileTypeDelete :: FileType a -> IO ()

-- | usage: (<tt>fileTypeExpandCommand obj cmd params</tt>).
fileTypeExpandCommand :: FileType a -> Ptr b -> Ptr c -> IO (String)

-- | usage: (<tt>fileTypeGetDescription obj</tt>).
fileTypeGetDescription :: FileType a -> IO (String)

-- | usage: (<tt>fileTypeGetExtensions obj lst</tt>).
fileTypeGetExtensions :: FileType a -> List b -> IO Int

-- | usage: (<tt>fileTypeGetIcon obj icon</tt>).
fileTypeGetIcon :: FileType a -> Icon b -> IO Int

-- | usage: (<tt>fileTypeGetMimeType obj</tt>).
fileTypeGetMimeType :: FileType a -> IO (String)

-- | usage: (<tt>fileTypeGetMimeTypes obj lst</tt>).
fileTypeGetMimeTypes :: FileType a -> List b -> IO Int

-- | usage: (<tt>fileTypeGetOpenCommand obj buf params</tt>).
fileTypeGetOpenCommand :: FileType a -> Ptr b -> Ptr c -> IO Int

-- | usage: (<tt>fileTypeGetPrintCommand obj buf params</tt>).
fileTypeGetPrintCommand :: FileType a -> Ptr b -> Ptr c -> IO Int

-- | usage: (<tt>findDialogEventGetFindString obj ref</tt>).
findDialogEventGetFindString :: FindDialogEvent a -> Ptr b -> IO Int

-- | usage: (<tt>findDialogEventGetFlags obj</tt>).
findDialogEventGetFlags :: FindDialogEvent a -> IO Int

-- | usage: (<tt>findDialogEventGetReplaceString obj ref</tt>).
findDialogEventGetReplaceString :: FindDialogEvent a -> Ptr b -> IO Int

-- | usage: (<tt>findReplaceDataCreate flags</tt>).
findReplaceDataCreate :: Int -> IO (FindReplaceData ())

-- | usage: (<tt>findReplaceDataCreateDefault</tt>).
findReplaceDataCreateDefault :: IO (FindReplaceData ())

-- | usage: (<tt>findReplaceDataDelete obj</tt>).
findReplaceDataDelete :: FindReplaceData a -> IO ()

-- | usage: (<tt>findReplaceDataGetFindString obj</tt>).
findReplaceDataGetFindString :: FindReplaceData a -> IO (String)

-- | usage: (<tt>findReplaceDataGetFlags obj</tt>).
findReplaceDataGetFlags :: FindReplaceData a -> IO Int

-- | usage: (<tt>findReplaceDataGetReplaceString obj</tt>).
findReplaceDataGetReplaceString :: FindReplaceData a -> IO (String)

-- | usage: (<tt>findReplaceDataSetFindString obj str</tt>).
findReplaceDataSetFindString :: FindReplaceData a -> String -> IO ()

-- | usage: (<tt>findReplaceDataSetFlags obj flags</tt>).
findReplaceDataSetFlags :: FindReplaceData a -> Int -> IO ()

-- | usage: (<tt>findReplaceDataSetReplaceString obj str</tt>).
findReplaceDataSetReplaceString :: FindReplaceData a -> String -> IO ()

-- | usage: (<tt>findReplaceDialogCreate parent wxdata title style</tt>).
findReplaceDialogCreate :: Window a -> FindReplaceData b -> String -> Int -> IO (FindReplaceDialog ())

-- | usage: (<tt>findReplaceDialogGetData obj</tt>).
findReplaceDialogGetData :: FindReplaceDialog a -> IO (FindReplaceData ())

-- | usage: (<tt>findReplaceDialogSetData obj wxdata</tt>).
findReplaceDialogSetData :: FindReplaceDialog a -> FindReplaceData b -> IO ()

-- | usage: (<tt>flexGridSizerAddGrowableCol obj idx</tt>).
flexGridSizerAddGrowableCol :: FlexGridSizer a -> Int -> IO ()

-- | usage: (<tt>flexGridSizerAddGrowableRow obj idx</tt>).
flexGridSizerAddGrowableRow :: FlexGridSizer a -> Int -> IO ()

-- | usage: (<tt>flexGridSizerCalcMin obj</tt>).
flexGridSizerCalcMin :: FlexGridSizer a -> IO (Size)

-- | usage: (<tt>flexGridSizerCreate rows cols vgap hgap</tt>).
flexGridSizerCreate :: Int -> Int -> Int -> Int -> IO (FlexGridSizer ())

-- | usage: (<tt>flexGridSizerRecalcSizes obj</tt>).
flexGridSizerRecalcSizes :: FlexGridSizer a -> IO ()

-- | usage: (<tt>flexGridSizerRemoveGrowableCol obj idx</tt>).
flexGridSizerRemoveGrowableCol :: FlexGridSizer a -> Int -> IO ()

-- | usage: (<tt>flexGridSizerRemoveGrowableRow obj idx</tt>).
flexGridSizerRemoveGrowableRow :: FlexGridSizer a -> Int -> IO ()

-- | usage: (<tt>floatPropertyCreate label name value</tt>).
floatPropertyCreate :: String -> String -> Float -> IO (FloatProperty ())

-- | usage: (<tt>fontCreate pointSize family style weight underlined face
--   enc</tt>).
fontCreate :: Int -> Int -> Int -> Int -> Bool -> String -> Int -> IO (Font ())

-- | usage: (<tt>fontCreateDefault</tt>).
fontCreateDefault :: IO (Font ())

-- | usage: (<tt>fontCreateFromStock id</tt>).
fontCreateFromStock :: Id -> IO (Font ())

-- | usage: (<tt>fontDelete obj</tt>).
fontDelete :: Font a -> IO ()

-- | usage: (<tt>fontGetDefaultEncoding obj</tt>).
fontGetDefaultEncoding :: Font a -> IO Int

-- | usage: (<tt>fontGetEncoding obj</tt>).
fontGetEncoding :: Font a -> IO Int

-- | usage: (<tt>fontGetFaceName obj</tt>).
fontGetFaceName :: Font a -> IO (String)

-- | usage: (<tt>fontGetFamily obj</tt>).
fontGetFamily :: Font a -> IO Int

-- | usage: (<tt>fontGetFamilyString obj</tt>).
fontGetFamilyString :: Font a -> IO (String)

-- | usage: (<tt>fontGetPointSize obj</tt>).
fontGetPointSize :: Font a -> IO Int

-- | usage: (<tt>fontGetStyle obj</tt>).
fontGetStyle :: Font a -> IO Int

-- | usage: (<tt>fontGetStyleString obj</tt>).
fontGetStyleString :: Font a -> IO (String)

-- | usage: (<tt>fontGetUnderlined obj</tt>).
fontGetUnderlined :: Font a -> IO Int

-- | usage: (<tt>fontGetWeight obj</tt>).
fontGetWeight :: Font a -> IO Int

-- | usage: (<tt>fontGetWeightString obj</tt>).
fontGetWeightString :: Font a -> IO (String)

-- | usage: (<tt>fontIsOk obj</tt>).
fontIsOk :: Font a -> IO Bool

-- | usage: (<tt>fontIsStatic self</tt>).
fontIsStatic :: Font a -> IO Bool

-- | usage: (<tt>fontSafeDelete self</tt>).
fontSafeDelete :: Font a -> IO ()

-- | usage: (<tt>fontSetDefaultEncoding obj encoding</tt>).
fontSetDefaultEncoding :: Font a -> Int -> IO ()

-- | usage: (<tt>fontSetEncoding obj encoding</tt>).
fontSetEncoding :: Font a -> Int -> IO ()

-- | usage: (<tt>fontSetFaceName obj faceName</tt>).
fontSetFaceName :: Font a -> String -> IO ()

-- | usage: (<tt>fontSetFamily obj family</tt>).
fontSetFamily :: Font a -> Int -> IO ()

-- | usage: (<tt>fontSetPointSize obj pointSize</tt>).
fontSetPointSize :: Font a -> Int -> IO ()

-- | usage: (<tt>fontSetStyle obj style</tt>).
fontSetStyle :: Font a -> Int -> IO ()

-- | usage: (<tt>fontSetUnderlined obj underlined</tt>).
fontSetUnderlined :: Font a -> Int -> IO ()

-- | usage: (<tt>fontSetWeight obj weight</tt>).
fontSetWeight :: Font a -> Int -> IO ()

-- | usage: (<tt>fontDataCreate</tt>).
fontDataCreate :: IO (FontData ())

-- | usage: (<tt>fontDataDelete obj</tt>).
fontDataDelete :: FontData a -> IO ()

-- | usage: (<tt>fontDataEnableEffects obj flag</tt>).
fontDataEnableEffects :: FontData a -> Bool -> IO ()

-- | usage: (<tt>fontDataGetAllowSymbols obj</tt>).
fontDataGetAllowSymbols :: FontData a -> IO Bool

-- | usage: (<tt>fontDataGetChosenFont obj</tt>).
fontDataGetChosenFont :: FontData a -> IO (Font ())

-- | usage: (<tt>fontDataGetColour obj</tt>).
fontDataGetColour :: FontData a -> IO (Color)

-- | usage: (<tt>fontDataGetEnableEffects obj</tt>).
fontDataGetEnableEffects :: FontData a -> IO Bool

-- | usage: (<tt>fontDataGetEncoding obj</tt>).
fontDataGetEncoding :: FontData a -> IO Int

-- | usage: (<tt>fontDataGetInitialFont obj</tt>).
fontDataGetInitialFont :: FontData a -> IO (Font ())

-- | usage: (<tt>fontDataGetShowHelp obj</tt>).
fontDataGetShowHelp :: FontData a -> IO Int

-- | usage: (<tt>fontDataSetAllowSymbols obj flag</tt>).
fontDataSetAllowSymbols :: FontData a -> Bool -> IO ()

-- | usage: (<tt>fontDataSetChosenFont obj font</tt>).
fontDataSetChosenFont :: FontData a -> Font b -> IO ()

-- | usage: (<tt>fontDataSetColour obj colour</tt>).
fontDataSetColour :: FontData a -> Color -> IO ()

-- | usage: (<tt>fontDataSetEncoding obj encoding</tt>).
fontDataSetEncoding :: FontData a -> Int -> IO ()

-- | usage: (<tt>fontDataSetInitialFont obj font</tt>).
fontDataSetInitialFont :: FontData a -> Font b -> IO ()

-- | usage: (<tt>fontDataSetRange obj minRange maxRange</tt>).
fontDataSetRange :: FontData a -> Int -> Int -> IO ()

-- | usage: (<tt>fontDataSetShowHelp obj flag</tt>).
fontDataSetShowHelp :: FontData a -> Bool -> IO ()

-- | usage: (<tt>fontDialogCreate prt fnt</tt>).
fontDialogCreate :: Window a -> FontData b -> IO (FontDialog ())

-- | usage: (<tt>fontDialogGetFontData obj</tt>).
fontDialogGetFontData :: FontDialog a -> IO (FontData ())

-- | usage: (<tt>fontEnumeratorCreate obj fnc</tt>).
fontEnumeratorCreate :: Ptr a -> Ptr b -> IO (FontEnumerator ())

-- | usage: (<tt>fontEnumeratorDelete obj</tt>).
fontEnumeratorDelete :: FontEnumerator a -> IO ()

-- | usage: (<tt>fontEnumeratorEnumerateEncodings obj facename</tt>).
fontEnumeratorEnumerateEncodings :: FontEnumerator a -> String -> IO Bool

-- | usage: (<tt>fontEnumeratorEnumerateFacenames obj encoding
--   fixedWidthOnly</tt>).
fontEnumeratorEnumerateFacenames :: FontEnumerator a -> Int -> Int -> IO Bool

-- | usage: (<tt>fontMapperCreate</tt>).
fontMapperCreate :: IO (FontMapper ())

-- | usage: (<tt>fontMapperGetAltForEncoding obj encoding altencoding
--   buf</tt>).
fontMapperGetAltForEncoding :: FontMapper a -> Int -> Ptr c -> String -> IO Bool

-- | usage: (<tt>fontMapperIsEncodingAvailable obj encoding buf</tt>).
fontMapperIsEncodingAvailable :: FontMapper a -> Int -> String -> IO Bool

-- | usage: (<tt>frameCentre self orientation</tt>).
frameCentre :: Frame a -> Int -> IO ()

-- | usage: (<tt>frameCreate prt id txt lfttopwdthgt stl</tt>).
frameCreate :: Window a -> Id -> String -> Rect -> Style -> IO (Frame ())

-- | usage: (<tt>frameCreateStatusBar obj number style</tt>).
frameCreateStatusBar :: Frame a -> Int -> Int -> IO (StatusBar ())

-- | usage: (<tt>frameCreateToolBar obj style</tt>).
frameCreateToolBar :: Frame a -> Int -> IO (ToolBar ())

-- | usage: (<tt>frameGetClientAreaOriginleft obj</tt>).
frameGetClientAreaOriginleft :: Frame a -> IO Int

-- | usage: (<tt>frameGetClientAreaOrigintop obj</tt>).
frameGetClientAreaOrigintop :: Frame a -> IO Int

-- | usage: (<tt>frameGetMenuBar obj</tt>).
frameGetMenuBar :: Frame a -> IO (MenuBar ())

-- | usage: (<tt>frameGetStatusBar obj</tt>).
frameGetStatusBar :: Frame a -> IO (StatusBar ())

-- | usage: (<tt>frameGetTitle obj</tt>).
frameGetTitle :: Frame a -> IO (String)

-- | usage: (<tt>frameGetToolBar obj</tt>).
frameGetToolBar :: Frame a -> IO (ToolBar ())

-- | usage: (<tt>frameIsFullScreen self</tt>).
frameIsFullScreen :: Frame a -> IO Bool

-- | usage: (<tt>frameRestore obj</tt>).
frameRestore :: Frame a -> IO ()

-- | usage: (<tt>frameSetMenuBar obj menubar</tt>).
frameSetMenuBar :: Frame a -> MenuBar b -> IO ()

-- | usage: (<tt>frameSetShape self region</tt>).
frameSetShape :: Frame a -> Region b -> IO Bool

-- | usage: (<tt>frameSetStatusBar obj statBar</tt>).
frameSetStatusBar :: Frame a -> StatusBar b -> IO ()

-- | usage: (<tt>frameSetStatusText obj txt number</tt>).
frameSetStatusText :: Frame a -> String -> Int -> IO ()

-- | usage: (<tt>frameSetStatusWidths obj n widthsfield</tt>).
frameSetStatusWidths :: Frame a -> Int -> Ptr c -> IO ()

-- | usage: (<tt>frameSetTitle frame txt</tt>).
frameSetTitle :: Frame a -> String -> IO ()

-- | usage: (<tt>frameSetToolBar obj toolbar</tt>).
frameSetToolBar :: Frame a -> ToolBar b -> IO ()

-- | usage: (<tt>frameShowFullScreen self show style</tt>).
frameShowFullScreen :: Frame a -> Bool -> Int -> IO Bool

-- | usage: (<tt>glCanvasCreate parent windowID attributes xywh stl title
--   palette</tt>).
glCanvasCreate :: Window a -> Int -> Ptr CInt -> Rect -> Style -> String -> Palette g -> IO (GLCanvas ())

-- | usage: (<tt>glCanvasIsDisplaySupported attributes</tt>).
glCanvasIsDisplaySupported :: Ptr CInt -> IO Bool

-- | usage: (<tt>glCanvasIsExtensionSupported extension</tt>).
glCanvasIsExtensionSupported :: String -> IO Bool

-- | usage: (<tt>glCanvasSetColour self colour</tt>).
glCanvasSetColour :: GLCanvas a -> Color -> IO Bool

-- | usage: (<tt>glCanvasSetCurrent self ctxt</tt>).
glCanvasSetCurrent :: GLCanvas a -> GLContext b -> IO Bool

-- | usage: (<tt>glCanvasSwapBuffers self</tt>).
glCanvasSwapBuffers :: GLCanvas a -> IO Bool

-- | usage: (<tt>glContextCreate win other</tt>).
glContextCreate :: GLCanvas a -> GLContext b -> IO (GLContext ())

-- | usage: (<tt>glContextCreateFromNull win</tt>).
glContextCreateFromNull :: GLCanvas a -> IO (GLContext ())

-- | usage: (<tt>glContextSetCurrent self win</tt>).
glContextSetCurrent :: GLContext a -> GLCanvas b -> IO Bool

-- | usage: (<tt>gaugeCreate prt id rng lfttopwdthgt stl</tt>).
gaugeCreate :: Window a -> Id -> Int -> Rect -> Style -> IO (Gauge ())

-- | usage: (<tt>gaugeGetBezelFace obj</tt>).
gaugeGetBezelFace :: Gauge a -> IO Int

-- | usage: (<tt>gaugeGetRange obj</tt>).
gaugeGetRange :: Gauge a -> IO Int

-- | usage: (<tt>gaugeGetShadowWidth obj</tt>).
gaugeGetShadowWidth :: Gauge a -> IO Int

-- | usage: (<tt>gaugeGetValue obj</tt>).
gaugeGetValue :: Gauge a -> IO Int

-- | usage: (<tt>gaugeSetBezelFace obj w</tt>).
gaugeSetBezelFace :: Gauge a -> Int -> IO ()

-- | usage: (<tt>gaugeSetRange obj r</tt>).
gaugeSetRange :: Gauge a -> Int -> IO ()

-- | usage: (<tt>gaugeSetShadowWidth obj w</tt>).
gaugeSetShadowWidth :: Gauge a -> Int -> IO ()

-- | usage: (<tt>gaugeSetValue obj pos</tt>).
gaugeSetValue :: Gauge a -> Int -> IO ()

-- | usage: (<tt>genericDragImageCreate cursor</tt>).
genericDragImageCreate :: Cursor a -> IO (GenericDragImage ())

-- | usage: (<tt>genericDragImageDoDrawImage self dc xy</tt>).
genericDragImageDoDrawImage :: GenericDragImage a -> DC b -> Point -> IO Bool

-- | usage: (<tt>genericDragImageGetImageRect self xposypos</tt>).
genericDragImageGetImageRect :: GenericDragImage a -> Point -> IO (Rect)

-- | usage: (<tt>genericDragImageUpdateBackingFromWindow self windowDC
--   destDC xywh xdestydestwidthheight</tt>).
genericDragImageUpdateBackingFromWindow :: GenericDragImage a -> DC b -> MemoryDC c -> Rect -> Rect -> IO Bool

-- | usage: (<tt>graphicsBrushCreate</tt>).
graphicsBrushCreate :: IO (GraphicsBrush ())

-- | usage: (<tt>graphicsBrushDelete self</tt>).
graphicsBrushDelete :: GraphicsBrush a -> IO ()

-- | usage: (<tt>graphicsContextClip self region</tt>).
graphicsContextClip :: GraphicsContext a -> Region b -> IO ()

-- | usage: (<tt>graphicsContextClipByRectangle self xywh</tt>).
graphicsContextClipByRectangle :: GraphicsContext a -> (Rect2D Double) -> IO ()

-- | usage: (<tt>graphicsContextConcatTransform self path</tt>).
graphicsContextConcatTransform :: GraphicsContext a -> GraphicsMatrix b -> IO ()

-- | usage: (<tt>graphicsContextCreate dc</tt>).
graphicsContextCreate :: WindowDC a -> IO (GraphicsContext ())

-- | usage: (<tt>graphicsContextCreateDefaultMatrix self</tt>).
graphicsContextCreateDefaultMatrix :: GraphicsContext a -> IO (GraphicsMatrix ())

-- | usage: (<tt>graphicsContextCreateFromMemory dc</tt>).
graphicsContextCreateFromMemory :: MemoryDC a -> IO (GraphicsContext ())

-- | usage: (<tt>graphicsContextCreateFromNative context</tt>).
graphicsContextCreateFromNative :: GraphicsContext a -> IO (GraphicsContext ())

-- | usage: (<tt>graphicsContextCreateFromNativeWindow window</tt>).
graphicsContextCreateFromNativeWindow :: Window a -> IO (GraphicsContext ())

-- | usage: (<tt>graphicsContextCreateFromPrinter dc</tt>).
graphicsContextCreateFromPrinter :: PrinterDC a -> IO (GraphicsContext ())

-- | usage: (<tt>graphicsContextCreateFromWindow window</tt>).
graphicsContextCreateFromWindow :: Window a -> IO (GraphicsContext ())

-- | usage: (<tt>graphicsContextCreateMatrix self a b c d tx ty</tt>).
graphicsContextCreateMatrix :: GraphicsContext a -> Double -> Double -> Double -> Double -> Double -> Double -> IO (GraphicsMatrix ())

-- | usage: (<tt>graphicsContextCreatePath self</tt>).
graphicsContextCreatePath :: GraphicsContext a -> IO (GraphicsPath ())

-- | usage: (<tt>graphicsContextDelete self</tt>).
graphicsContextDelete :: GraphicsContext a -> IO ()

-- | usage: (<tt>graphicsContextDrawBitmap self bmp xywh</tt>).
graphicsContextDrawBitmap :: GraphicsContext a -> Bitmap b -> (Rect2D Double) -> IO ()

-- | usage: (<tt>graphicsContextDrawEllipse self xywh</tt>).
graphicsContextDrawEllipse :: GraphicsContext a -> (Rect2D Double) -> IO ()

-- | usage: (<tt>graphicsContextDrawIcon self icon xywh</tt>).
graphicsContextDrawIcon :: GraphicsContext a -> Icon b -> (Rect2D Double) -> IO ()

-- | usage: (<tt>graphicsContextDrawLines self n x y style</tt>).
graphicsContextDrawLines :: GraphicsContext a -> Int -> Ptr c -> Ptr d -> Int -> IO ()

-- | usage: (<tt>graphicsContextDrawPath self path style</tt>).
graphicsContextDrawPath :: GraphicsContext a -> GraphicsPath b -> Int -> IO ()

-- | usage: (<tt>graphicsContextDrawRectangle self xywh</tt>).
graphicsContextDrawRectangle :: GraphicsContext a -> (Rect2D Double) -> IO ()

-- | usage: (<tt>graphicsContextDrawRoundedRectangle self xywh
--   radius</tt>).
graphicsContextDrawRoundedRectangle :: GraphicsContext a -> (Rect2D Double) -> Double -> IO ()

-- | usage: (<tt>graphicsContextDrawText self text xy</tt>).
graphicsContextDrawText :: GraphicsContext a -> String -> (Point2 Double) -> IO ()

-- | usage: (<tt>graphicsContextDrawTextWithAngle self text xy
--   radius</tt>).
graphicsContextDrawTextWithAngle :: GraphicsContext a -> String -> (Point2 Double) -> Double -> IO ()

-- | usage: (<tt>graphicsContextFillPath self path style</tt>).
graphicsContextFillPath :: GraphicsContext a -> GraphicsPath b -> Int -> IO ()

-- | usage: (<tt>graphicsContextGetNativeContext self</tt>).
graphicsContextGetNativeContext :: GraphicsContext a -> IO (Ptr ())

-- | usage: (<tt>graphicsContextGetTextExtent self text width height
--   descent externalLeading</tt>).
graphicsContextGetTextExtent :: GraphicsContext a -> String -> Ptr Double -> Ptr Double -> Ptr Double -> Ptr Double -> IO ()

-- | usage: (<tt>graphicsContextPopState self</tt>).
graphicsContextPopState :: GraphicsContext a -> IO ()

-- | usage: (<tt>graphicsContextPushState self</tt>).
graphicsContextPushState :: GraphicsContext a -> IO ()

-- | usage: (<tt>graphicsContextResetClip self</tt>).
graphicsContextResetClip :: GraphicsContext a -> IO ()

-- | usage: (<tt>graphicsContextRotate self angle</tt>).
graphicsContextRotate :: GraphicsContext a -> Double -> IO ()

-- | usage: (<tt>graphicsContextScale self xScaleyScale</tt>).
graphicsContextScale :: GraphicsContext a -> (Size2D Double) -> IO ()

-- | usage: (<tt>graphicsContextSetBrush self brush</tt>).
graphicsContextSetBrush :: GraphicsContext a -> Brush b -> IO ()

-- | usage: (<tt>graphicsContextSetFont self font colour</tt>).
graphicsContextSetFont :: GraphicsContext a -> Font b -> Color -> IO ()

-- | usage: (<tt>graphicsContextSetGraphicsBrush self brush</tt>).
graphicsContextSetGraphicsBrush :: GraphicsContext a -> GraphicsBrush b -> IO ()

-- | usage: (<tt>graphicsContextSetGraphicsFont self font</tt>).
graphicsContextSetGraphicsFont :: GraphicsContext a -> GraphicsFont b -> IO ()

-- | usage: (<tt>graphicsContextSetGraphicsPen self pen</tt>).
graphicsContextSetGraphicsPen :: GraphicsContext a -> GraphicsPen b -> IO ()

-- | usage: (<tt>graphicsContextSetPen self pen</tt>).
graphicsContextSetPen :: GraphicsContext a -> Pen b -> IO ()

-- | usage: (<tt>graphicsContextSetTransform self path</tt>).
graphicsContextSetTransform :: GraphicsContext a -> GraphicsMatrix b -> IO ()

-- | usage: (<tt>graphicsContextStrokeLine self x1y1 x2y2</tt>).
graphicsContextStrokeLine :: GraphicsContext a -> (Point2 Double) -> (Point2 Double) -> IO ()

-- | usage: (<tt>graphicsContextStrokeLines self n x y style</tt>).
graphicsContextStrokeLines :: GraphicsContext a -> Int -> Ptr c -> Ptr d -> Int -> IO ()

-- | usage: (<tt>graphicsContextStrokePath self path</tt>).
graphicsContextStrokePath :: GraphicsContext a -> GraphicsPath b -> IO ()

-- | usage: (<tt>graphicsContextTranslate self dx dy</tt>).
graphicsContextTranslate :: GraphicsContext a -> Double -> Double -> IO ()

-- | usage: (<tt>graphicsFontCreate</tt>).
graphicsFontCreate :: IO (GraphicsFont ())

-- | usage: (<tt>graphicsFontDelete self</tt>).
graphicsFontDelete :: GraphicsFont a -> IO ()

-- | usage: (<tt>graphicsMatrixConcat self t</tt>).
graphicsMatrixConcat :: GraphicsMatrix a -> GraphicsMatrix b -> IO ()

-- | usage: (<tt>graphicsMatrixCreate</tt>).
graphicsMatrixCreate :: IO (GraphicsMatrix ())

-- | usage: (<tt>graphicsMatrixDelete self</tt>).
graphicsMatrixDelete :: GraphicsMatrix a -> IO ()

-- | usage: (<tt>graphicsMatrixGet self a b c d tx ty</tt>).
graphicsMatrixGet :: GraphicsMatrix a -> Ptr Double -> Ptr Double -> Ptr Double -> Ptr Double -> Ptr Double -> Ptr Double -> IO ()

-- | usage: (<tt>graphicsMatrixGetNativeMatrix self</tt>).
graphicsMatrixGetNativeMatrix :: GraphicsMatrix a -> IO (Ptr ())

-- | usage: (<tt>graphicsMatrixInvert self</tt>).
graphicsMatrixInvert :: GraphicsMatrix a -> IO ()

-- | usage: (<tt>graphicsMatrixIsEqual self t</tt>).
graphicsMatrixIsEqual :: GraphicsMatrix a -> GraphicsMatrix b -> IO Bool

-- | usage: (<tt>graphicsMatrixIsIdentity self</tt>).
graphicsMatrixIsIdentity :: GraphicsMatrix a -> IO Bool

-- | usage: (<tt>graphicsMatrixRotate self angle</tt>).
graphicsMatrixRotate :: GraphicsMatrix a -> Double -> IO ()

-- | usage: (<tt>graphicsMatrixScale self xScaleyScale</tt>).
graphicsMatrixScale :: GraphicsMatrix a -> (Size2D Double) -> IO ()

-- | usage: (<tt>graphicsMatrixSet self a b c d tx ty</tt>).
graphicsMatrixSet :: GraphicsMatrix a -> Double -> Double -> Double -> Double -> Double -> Double -> IO ()

-- | usage: (<tt>graphicsMatrixTransformDistance self dx dy</tt>).
graphicsMatrixTransformDistance :: GraphicsMatrix a -> Ptr Double -> Ptr Double -> IO ()

-- | usage: (<tt>graphicsMatrixTransformPoint self</tt>).
graphicsMatrixTransformPoint :: GraphicsMatrix a -> IO (Point2 Double)

-- | usage: (<tt>graphicsMatrixTranslate self dx dy</tt>).
graphicsMatrixTranslate :: GraphicsMatrix a -> Double -> Double -> IO ()

-- | usage: (<tt>graphicsObjectGetRenderer</tt>).
graphicsObjectGetRenderer :: IO (GraphicsRenderer ())

-- | usage: (<tt>graphicsObjectIsNull self</tt>).
graphicsObjectIsNull :: GraphicsObject a -> IO Bool

-- | usage: (<tt>graphicsPathAddArc self xy r startAngle endAngle
--   clockwise</tt>).
graphicsPathAddArc :: GraphicsPath a -> (Point2 Double) -> Double -> Double -> Double -> Bool -> IO ()

-- | usage: (<tt>graphicsPathAddArcToPoint self x1y1 x2y2 r</tt>).
graphicsPathAddArcToPoint :: GraphicsPath a -> (Point2 Double) -> (Point2 Double) -> Double -> IO ()

-- | usage: (<tt>graphicsPathAddCircle self xy r</tt>).
graphicsPathAddCircle :: GraphicsPath a -> (Point2 Double) -> Double -> IO ()

-- | usage: (<tt>graphicsPathAddCurveToPoint self cx1cy1 cx2cy2 xy</tt>).
graphicsPathAddCurveToPoint :: GraphicsPath a -> (Point2 Double) -> (Point2 Double) -> (Point2 Double) -> IO ()

-- | usage: (<tt>graphicsPathAddEllipse self xywh</tt>).
graphicsPathAddEllipse :: GraphicsPath a -> (Rect2D Double) -> IO ()

-- | usage: (<tt>graphicsPathAddLineToPoint self xy</tt>).
graphicsPathAddLineToPoint :: GraphicsPath a -> (Point2 Double) -> IO ()

-- | usage: (<tt>graphicsPathAddPath self xy path</tt>).
graphicsPathAddPath :: GraphicsPath a -> (Point2 Double) -> GraphicsPath c -> IO ()

-- | usage: (<tt>graphicsPathAddQuadCurveToPoint self cxcy xy</tt>).
graphicsPathAddQuadCurveToPoint :: GraphicsPath a -> (Point2 Double) -> (Point2 Double) -> IO ()

-- | usage: (<tt>graphicsPathAddRectangle self xywh</tt>).
graphicsPathAddRectangle :: GraphicsPath a -> (Rect2D Double) -> IO ()

-- | usage: (<tt>graphicsPathAddRoundedRectangle self xywh radius</tt>).
graphicsPathAddRoundedRectangle :: GraphicsPath a -> (Rect2D Double) -> Double -> IO ()

-- | usage: (<tt>graphicsPathCloseSubpath self</tt>).
graphicsPathCloseSubpath :: GraphicsPath a -> IO ()

-- | usage: (<tt>graphicsPathContains self xy style</tt>).
graphicsPathContains :: GraphicsPath a -> (Point2 Double) -> Int -> IO ()

-- | usage: (<tt>graphicsPathDelete self</tt>).
graphicsPathDelete :: GraphicsPath a -> IO ()

-- | usage: (<tt>graphicsPathGetBox self</tt>).
graphicsPathGetBox :: GraphicsPath a -> IO (Rect2D Double)

-- | usage: (<tt>graphicsPathGetCurrentPoint self</tt>).
graphicsPathGetCurrentPoint :: GraphicsPath a -> IO (Point2 Double)

-- | usage: (<tt>graphicsPathGetNativePath self</tt>).
graphicsPathGetNativePath :: GraphicsPath a -> IO (Ptr ())

-- | usage: (<tt>graphicsPathMoveToPoint self xy</tt>).
graphicsPathMoveToPoint :: GraphicsPath a -> (Point2 Double) -> IO ()

-- | usage: (<tt>graphicsPathTransform self matrix</tt>).
graphicsPathTransform :: GraphicsPath a -> GraphicsMatrix b -> IO ()

-- | usage: (<tt>graphicsPathUnGetNativePath p</tt>).
graphicsPathUnGetNativePath :: GraphicsPath a -> IO ()

-- | usage: (<tt>graphicsPenCreate</tt>).
graphicsPenCreate :: IO (GraphicsPen ())

-- | usage: (<tt>graphicsPenDelete self</tt>).
graphicsPenDelete :: GraphicsPen a -> IO ()

-- | usage: (<tt>graphicsRendererCreateContext dc</tt>).
graphicsRendererCreateContext :: WindowDC a -> IO (GraphicsContext ())

-- | usage: (<tt>graphicsRendererCreateContextFromNativeContext
--   context</tt>).
graphicsRendererCreateContextFromNativeContext :: GraphicsRenderer a -> IO (GraphicsContext ())

-- | usage: (<tt>graphicsRendererCreateContextFromNativeWindow
--   window</tt>).
graphicsRendererCreateContextFromNativeWindow :: Window a -> IO (GraphicsContext ())

-- | usage: (<tt>graphicsRendererCreateContextFromWindow window</tt>).
graphicsRendererCreateContextFromWindow :: Window a -> IO (GraphicsContext ())

-- | usage: (<tt>graphicsRendererCreatePath self</tt>).
graphicsRendererCreatePath :: GraphicsRenderer a -> IO (GraphicsPath ())

-- | usage: (<tt>graphicsRendererDelete self</tt>).
graphicsRendererDelete :: GraphicsRenderer a -> IO ()

-- | usage: (<tt>graphicsRendererGetDefaultRenderer self</tt>).
graphicsRendererGetDefaultRenderer :: GraphicsRenderer a -> IO (GraphicsRenderer ())

-- | usage: (<tt>gridAppendCols obj numCols updateLabels</tt>).
gridAppendCols :: Grid a -> Int -> Bool -> IO Bool

-- | usage: (<tt>gridAppendRows obj numRows updateLabels</tt>).
gridAppendRows :: Grid a -> Int -> Bool -> IO Bool

-- | usage: (<tt>gridAutoSize obj</tt>).
gridAutoSize :: Grid a -> IO ()

-- | usage: (<tt>gridAutoSizeColumn obj col setAsMin</tt>).
gridAutoSizeColumn :: Grid a -> Int -> Bool -> IO ()

-- | usage: (<tt>gridAutoSizeColumns obj setAsMin</tt>).
gridAutoSizeColumns :: Grid a -> Bool -> IO ()

-- | usage: (<tt>gridAutoSizeRow obj row setAsMin</tt>).
gridAutoSizeRow :: Grid a -> Int -> Bool -> IO ()

-- | usage: (<tt>gridAutoSizeRows obj setAsMin</tt>).
gridAutoSizeRows :: Grid a -> Bool -> IO ()

-- | usage: (<tt>gridBeginBatch obj</tt>).
gridBeginBatch :: Grid a -> IO ()

-- | usage: (<tt>gridBlockToDeviceRect obj top left bottom right</tt>).
gridBlockToDeviceRect :: Grid a -> Int -> Int -> Int -> Int -> IO (Rect)

-- | usage: (<tt>gridCanDragColSize obj col</tt>).
gridCanDragColSize :: Grid a -> Int -> IO Bool

-- | usage: (<tt>gridCanDragGridSize obj</tt>).
gridCanDragGridSize :: Grid a -> IO Bool

-- | usage: (<tt>gridCanDragRowSize obj row</tt>).
gridCanDragRowSize :: Grid a -> Int -> IO Bool

-- | usage: (<tt>gridCanEnableCellControl obj</tt>).
gridCanEnableCellControl :: Grid a -> IO Bool

-- | usage: (<tt>gridCellToRect obj row col</tt>).
gridCellToRect :: Grid a -> Int -> Int -> IO (Rect)

-- | usage: (<tt>gridClearGrid obj</tt>).
gridClearGrid :: Grid a -> IO ()

-- | usage: (<tt>gridClearSelection obj</tt>).
gridClearSelection :: Grid a -> IO ()

-- | usage: (<tt>gridCreate prt id lfttopwdthgt stl</tt>).
gridCreate :: Window a -> Id -> Rect -> Style -> IO (Grid ())

-- | usage: (<tt>gridCreateGrid obj rows cols selmode</tt>).
gridCreateGrid :: Grid a -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>gridDeleteCols obj pos numCols updateLabels</tt>).
gridDeleteCols :: Grid a -> Int -> Int -> Bool -> IO Bool

-- | usage: (<tt>gridDeleteRows obj pos numRows updateLabels</tt>).
gridDeleteRows :: Grid a -> Int -> Int -> Bool -> IO Bool

-- | usage: (<tt>gridDisableCellEditControl obj</tt>).
gridDisableCellEditControl :: Grid a -> IO ()

-- | usage: (<tt>gridDisableDragColSize obj</tt>).
gridDisableDragColSize :: Grid a -> IO ()

-- | usage: (<tt>gridDisableDragGridSize obj</tt>).
gridDisableDragGridSize :: Grid a -> IO ()

-- | usage: (<tt>gridDisableDragRowSize obj</tt>).
gridDisableDragRowSize :: Grid a -> IO ()

-- | usage: (<tt>gridDrawAllGridLines obj dc reg</tt>).
gridDrawAllGridLines :: Grid a -> DC b -> Region c -> IO ()

-- | usage: (<tt>gridDrawCell obj dc row col</tt>).
gridDrawCell :: Grid a -> DC b -> Int -> Int -> IO ()

-- | usage: (<tt>gridDrawCellBorder obj dc row col</tt>).
gridDrawCellBorder :: Grid a -> DC b -> Int -> Int -> IO ()

-- | usage: (<tt>gridDrawCellHighlight obj dc attr</tt>).
gridDrawCellHighlight :: Grid a -> DC b -> GridCellAttr c -> IO ()

-- | usage: (<tt>gridDrawColLabel obj dc col</tt>).
gridDrawColLabel :: Grid a -> DC b -> Int -> IO ()

-- | usage: (<tt>gridDrawColLabels obj dc</tt>).
gridDrawColLabels :: Grid a -> DC b -> IO ()

-- | usage: (<tt>gridDrawGridSpace obj dc</tt>).
gridDrawGridSpace :: Grid a -> DC b -> IO ()

-- | usage: (<tt>gridDrawRowLabel obj dc row</tt>).
gridDrawRowLabel :: Grid a -> DC b -> Int -> IO ()

-- | usage: (<tt>gridDrawRowLabels obj dc</tt>).
gridDrawRowLabels :: Grid a -> DC b -> IO ()

-- | usage: (<tt>gridDrawTextRectangle obj dc txt xywh horizontalAlignment
--   verticalAlignment</tt>).
gridDrawTextRectangle :: Grid a -> DC b -> String -> Rect -> Int -> Int -> IO ()

-- | usage: (<tt>gridEnableCellEditControl obj enable</tt>).
gridEnableCellEditControl :: Grid a -> Bool -> IO ()

-- | usage: (<tt>gridEnableDragColSize obj enable</tt>).
gridEnableDragColSize :: Grid a -> Bool -> IO ()

-- | usage: (<tt>gridEnableDragGridSize obj enable</tt>).
gridEnableDragGridSize :: Grid a -> Bool -> IO ()

-- | usage: (<tt>gridEnableDragRowSize obj enable</tt>).
gridEnableDragRowSize :: Grid a -> Bool -> IO ()

-- | usage: (<tt>gridEnableEditing obj edit</tt>).
gridEnableEditing :: Grid a -> Bool -> IO ()

-- | usage: (<tt>gridEnableGridLines obj enable</tt>).
gridEnableGridLines :: Grid a -> Bool -> IO ()

-- | usage: (<tt>gridEndBatch obj</tt>).
gridEndBatch :: Grid a -> IO ()

-- | usage: (<tt>gridGetBatchCount obj</tt>).
gridGetBatchCount :: Grid a -> IO Int

-- | usage: (<tt>gridGetCellAlignment obj row col</tt>).
gridGetCellAlignment :: Grid a -> Int -> Int -> IO Size

-- | usage: (<tt>gridGetCellBackgroundColour obj row col colour</tt>).
gridGetCellBackgroundColour :: Grid a -> Int -> Int -> Color -> IO ()

-- | usage: (<tt>gridGetCellEditor obj row col</tt>).
gridGetCellEditor :: Grid a -> Int -> Int -> IO (GridCellEditor ())

-- | usage: (<tt>gridGetCellFont obj row col font</tt>).
gridGetCellFont :: Grid a -> Int -> Int -> Font d -> IO ()

-- | usage: (<tt>gridGetCellHighlightColour obj</tt>).
gridGetCellHighlightColour :: Grid a -> IO (Color)

-- | usage: (<tt>gridGetCellRenderer obj row col</tt>).
gridGetCellRenderer :: Grid a -> Int -> Int -> IO (GridCellRenderer ())

-- | usage: (<tt>gridGetCellSize obj row col</tt>).
gridGetCellSize :: Grid a -> Int -> Int -> IO Size

-- | usage: (<tt>gridGetCellTextColour obj row col colour</tt>).
gridGetCellTextColour :: Grid a -> Int -> Int -> Color -> IO ()

-- | usage: (<tt>gridGetCellValue obj row col</tt>).
gridGetCellValue :: Grid a -> Int -> Int -> IO (String)

-- | usage: (<tt>gridGetColLabelAlignment obj</tt>).
gridGetColLabelAlignment :: Grid a -> IO Size

-- | usage: (<tt>gridGetColLabelSize obj</tt>).
gridGetColLabelSize :: Grid a -> IO Int

-- | usage: (<tt>gridGetColLabelValue obj col</tt>).
gridGetColLabelValue :: Grid a -> Int -> IO (String)

-- | usage: (<tt>gridGetColSize obj col</tt>).
gridGetColSize :: Grid a -> Int -> IO Int

-- | usage: (<tt>gridGetDefaultCellAlignment obj</tt>).
gridGetDefaultCellAlignment :: Grid a -> IO Size

-- | usage: (<tt>gridGetDefaultCellBackgroundColour obj</tt>).
gridGetDefaultCellBackgroundColour :: Grid a -> IO (Color)

-- | usage: (<tt>gridGetDefaultCellFont obj</tt>).
gridGetDefaultCellFont :: Grid a -> IO (Font ())

-- | usage: (<tt>gridGetDefaultCellTextColour obj</tt>).
gridGetDefaultCellTextColour :: Grid a -> IO (Color)

-- | usage: (<tt>gridGetDefaultColLabelSize obj</tt>).
gridGetDefaultColLabelSize :: Grid a -> IO Int

-- | usage: (<tt>gridGetDefaultColSize obj</tt>).
gridGetDefaultColSize :: Grid a -> IO Int

-- | usage: (<tt>gridGetDefaultEditor obj</tt>).
gridGetDefaultEditor :: Grid a -> IO (GridCellEditor ())

-- | usage: (<tt>gridGetDefaultEditorForCell obj row col</tt>).
gridGetDefaultEditorForCell :: Grid a -> Int -> Int -> IO (GridCellEditor ())

-- | usage: (<tt>gridGetDefaultEditorForType obj typeName</tt>).
gridGetDefaultEditorForType :: Grid a -> String -> IO (GridCellEditor ())

-- | usage: (<tt>gridGetDefaultRenderer obj</tt>).
gridGetDefaultRenderer :: Grid a -> IO (GridCellRenderer ())

-- | usage: (<tt>gridGetDefaultRendererForCell obj row col</tt>).
gridGetDefaultRendererForCell :: Grid a -> Int -> Int -> IO (GridCellRenderer ())

-- | usage: (<tt>gridGetDefaultRendererForType obj typeName</tt>).
gridGetDefaultRendererForType :: Grid a -> String -> IO (GridCellRenderer ())

-- | usage: (<tt>gridGetDefaultRowLabelSize obj</tt>).
gridGetDefaultRowLabelSize :: Grid a -> IO Int

-- | usage: (<tt>gridGetDefaultRowSize obj</tt>).
gridGetDefaultRowSize :: Grid a -> IO Int

-- | usage: (<tt>gridGetGridCursorCol obj</tt>).
gridGetGridCursorCol :: Grid a -> IO Int

-- | usage: (<tt>gridGetGridCursorRow obj</tt>).
gridGetGridCursorRow :: Grid a -> IO Int

-- | usage: (<tt>gridGetGridLineColour obj</tt>).
gridGetGridLineColour :: Grid a -> IO (Color)

-- | usage: (<tt>gridGetLabelBackgroundColour obj</tt>).
gridGetLabelBackgroundColour :: Grid a -> IO (Color)

-- | usage: (<tt>gridGetLabelFont obj</tt>).
gridGetLabelFont :: Grid a -> IO (Font ())

-- | usage: (<tt>gridGetLabelTextColour obj</tt>).
gridGetLabelTextColour :: Grid a -> IO (Color)

-- | usage: (<tt>gridGetNumberCols obj</tt>).
gridGetNumberCols :: Grid a -> IO Int

-- | usage: (<tt>gridGetNumberRows obj</tt>).
gridGetNumberRows :: Grid a -> IO Int

-- | usage: (<tt>gridGetRowLabelAlignment obj</tt>).
gridGetRowLabelAlignment :: Grid a -> IO Size

-- | usage: (<tt>gridGetRowLabelSize obj</tt>).
gridGetRowLabelSize :: Grid a -> IO Int

-- | usage: (<tt>gridGetRowLabelValue obj row</tt>).
gridGetRowLabelValue :: Grid a -> Int -> IO (String)

-- | usage: (<tt>gridGetRowSize obj row</tt>).
gridGetRowSize :: Grid a -> Int -> IO Int

-- | usage: (<tt>gridGetSelectedCells obj</tt>).
gridGetSelectedCells :: Grid a -> IO (GridCellCoordsArray ())

-- | usage: (<tt>gridGetSelectedCols obj</tt>).
gridGetSelectedCols :: Grid a -> IO [Int]

-- | usage: (<tt>gridGetSelectedRows obj</tt>).
gridGetSelectedRows :: Grid a -> IO [Int]

-- | usage: (<tt>gridGetSelectionBackground obj</tt>).
gridGetSelectionBackground :: Grid a -> IO (Color)

-- | usage: (<tt>gridGetSelectionBlockBottomRight obj</tt>).
gridGetSelectionBlockBottomRight :: Grid a -> IO (GridCellCoordsArray ())

-- | usage: (<tt>gridGetSelectionBlockTopLeft obj</tt>).
gridGetSelectionBlockTopLeft :: Grid a -> IO (GridCellCoordsArray ())

-- | usage: (<tt>gridGetSelectionForeground obj</tt>).
gridGetSelectionForeground :: Grid a -> IO (Color)

-- | usage: (<tt>gridGetTable obj</tt>).
gridGetTable :: Grid a -> IO (GridTableBase ())

-- | usage: (<tt>gridGetTextBoxSize obj dc countlines</tt>).
gridGetTextBoxSize :: Grid a -> DC b -> [String] -> IO Size

-- | usage: (<tt>gridGridLinesEnabled obj</tt>).
gridGridLinesEnabled :: Grid a -> IO Int

-- | usage: (<tt>gridHideCellEditControl obj</tt>).
gridHideCellEditControl :: Grid a -> IO ()

-- | usage: (<tt>gridInsertCols obj pos numCols updateLabels</tt>).
gridInsertCols :: Grid a -> Int -> Int -> Bool -> IO Bool

-- | usage: (<tt>gridInsertRows obj pos numRows updateLabels</tt>).
gridInsertRows :: Grid a -> Int -> Int -> Bool -> IO Bool

-- | usage: (<tt>gridIsCellEditControlEnabled obj</tt>).
gridIsCellEditControlEnabled :: Grid a -> IO Bool

-- | usage: (<tt>gridIsCellEditControlShown obj</tt>).
gridIsCellEditControlShown :: Grid a -> IO Bool

-- | usage: (<tt>gridIsCurrentCellReadOnly obj</tt>).
gridIsCurrentCellReadOnly :: Grid a -> IO Bool

-- | usage: (<tt>gridIsEditable obj</tt>).
gridIsEditable :: Grid a -> IO Bool

-- | usage: (<tt>gridIsInSelection obj row col</tt>).
gridIsInSelection :: Grid a -> Int -> Int -> IO Bool

-- | usage: (<tt>gridIsReadOnly obj row col</tt>).
gridIsReadOnly :: Grid a -> Int -> Int -> IO Bool

-- | usage: (<tt>gridIsSelection obj</tt>).
gridIsSelection :: Grid a -> IO Bool

-- | usage: (<tt>gridIsVisible obj row col wholeCellVisible</tt>).
gridIsVisible :: Grid a -> Int -> Int -> Bool -> IO Bool

-- | usage: (<tt>gridMakeCellVisible obj row col</tt>).
gridMakeCellVisible :: Grid a -> Int -> Int -> IO ()

-- | usage: (<tt>gridMoveCursorDown obj expandSelection</tt>).
gridMoveCursorDown :: Grid a -> Bool -> IO Bool

-- | usage: (<tt>gridMoveCursorDownBlock obj expandSelection</tt>).
gridMoveCursorDownBlock :: Grid a -> Bool -> IO Bool

-- | usage: (<tt>gridMoveCursorLeft obj expandSelection</tt>).
gridMoveCursorLeft :: Grid a -> Bool -> IO Bool

-- | usage: (<tt>gridMoveCursorLeftBlock obj expandSelection</tt>).
gridMoveCursorLeftBlock :: Grid a -> Bool -> IO Bool

-- | usage: (<tt>gridMoveCursorRight obj expandSelection</tt>).
gridMoveCursorRight :: Grid a -> Bool -> IO Bool

-- | usage: (<tt>gridMoveCursorRightBlock obj expandSelection</tt>).
gridMoveCursorRightBlock :: Grid a -> Bool -> IO Bool

-- | usage: (<tt>gridMoveCursorUp obj expandSelection</tt>).
gridMoveCursorUp :: Grid a -> Bool -> IO Bool

-- | usage: (<tt>gridMoveCursorUpBlock obj expandSelection</tt>).
gridMoveCursorUpBlock :: Grid a -> Bool -> IO Bool

-- | usage: (<tt>gridMovePageDown obj</tt>).
gridMovePageDown :: Grid a -> IO Bool

-- | usage: (<tt>gridMovePageUp obj</tt>).
gridMovePageUp :: Grid a -> IO Bool

-- | usage: (<tt>gridProcessTableMessage obj evt</tt>).
gridProcessTableMessage :: Grid a -> Event b -> IO Bool

-- | usage: (<tt>gridRegisterDataType obj typeName renderer editor</tt>).
gridRegisterDataType :: Grid a -> String -> GridCellRenderer c -> GridCellEditor d -> IO ()

-- | usage: (<tt>gridSaveEditControlValue obj</tt>).
gridSaveEditControlValue :: Grid a -> IO ()

-- | usage: (<tt>gridSelectAll obj</tt>).
gridSelectAll :: Grid a -> IO ()

-- | usage: (<tt>gridSelectBlock obj topRow leftCol bottomRow rightCol
--   addToSelected</tt>).
gridSelectBlock :: Grid a -> Int -> Int -> Int -> Int -> Bool -> IO ()

-- | usage: (<tt>gridSelectCol obj col addToSelected</tt>).
gridSelectCol :: Grid a -> Int -> Bool -> IO ()

-- | usage: (<tt>gridSelectRow obj row addToSelected</tt>).
gridSelectRow :: Grid a -> Int -> Bool -> IO ()

-- | usage: (<tt>gridSetCellAlignment obj row col horiz vert</tt>).
gridSetCellAlignment :: Grid a -> Int -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>gridSetCellBackgroundColour obj row col colour</tt>).
gridSetCellBackgroundColour :: Grid a -> Int -> Int -> Color -> IO ()

-- | usage: (<tt>gridSetCellEditor obj row col editor</tt>).
gridSetCellEditor :: Grid a -> Int -> Int -> GridCellEditor d -> IO ()

-- | usage: (<tt>gridSetCellFont obj row col font</tt>).
gridSetCellFont :: Grid a -> Int -> Int -> Font d -> IO ()

-- | usage: (<tt>gridSetCellHighlightColour obj col</tt>).
gridSetCellHighlightColour :: Grid a -> Color -> IO ()

-- | usage: (<tt>gridSetCellRenderer obj row col renderer</tt>).
gridSetCellRenderer :: Grid a -> Int -> Int -> GridCellRenderer d -> IO ()

-- | usage: (<tt>gridSetCellSize obj row col srowscol</tt>).
gridSetCellSize :: Grid a -> Int -> Int -> Size -> IO ()

-- | usage: (<tt>gridSetCellTextColour obj row col colour</tt>).
gridSetCellTextColour :: Grid a -> Int -> Int -> Color -> IO ()

-- | usage: (<tt>gridSetCellValue obj row col s</tt>).
gridSetCellValue :: Grid a -> Int -> Int -> String -> IO ()

-- | usage: (<tt>gridSetColAttr obj col attr</tt>).
gridSetColAttr :: Grid a -> Int -> GridCellAttr c -> IO ()

-- | usage: (<tt>gridSetColFormatBool obj col</tt>).
gridSetColFormatBool :: Grid a -> Int -> IO ()

-- | usage: (<tt>gridSetColFormatCustom obj col typeName</tt>).
gridSetColFormatCustom :: Grid a -> Int -> String -> IO ()

-- | usage: (<tt>gridSetColFormatFloat obj col width precision</tt>).
gridSetColFormatFloat :: Grid a -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>gridSetColFormatNumber obj col</tt>).
gridSetColFormatNumber :: Grid a -> Int -> IO ()

-- | usage: (<tt>gridSetColLabelAlignment obj horiz vert</tt>).
gridSetColLabelAlignment :: Grid a -> Int -> Int -> IO ()

-- | usage: (<tt>gridSetColLabelSize obj height</tt>).
gridSetColLabelSize :: Grid a -> Int -> IO ()

-- | usage: (<tt>gridSetColLabelValue obj col label</tt>).
gridSetColLabelValue :: Grid a -> Int -> String -> IO ()

-- | usage: (<tt>gridSetColMinimalWidth obj col width</tt>).
gridSetColMinimalWidth :: Grid a -> Int -> Int -> IO ()

-- | usage: (<tt>gridSetColSize obj col width</tt>).
gridSetColSize :: Grid a -> Int -> Int -> IO ()

-- | usage: (<tt>gridSetDefaultCellAlignment obj horiz vert</tt>).
gridSetDefaultCellAlignment :: Grid a -> Int -> Int -> IO ()

-- | usage: (<tt>gridSetDefaultCellBackgroundColour obj colour</tt>).
gridSetDefaultCellBackgroundColour :: Grid a -> Color -> IO ()

-- | usage: (<tt>gridSetDefaultCellFont obj font</tt>).
gridSetDefaultCellFont :: Grid a -> Font b -> IO ()

-- | usage: (<tt>gridSetDefaultCellTextColour obj colour</tt>).
gridSetDefaultCellTextColour :: Grid a -> Color -> IO ()

-- | usage: (<tt>gridSetDefaultColSize obj width resizeExistingCols</tt>).
gridSetDefaultColSize :: Grid a -> Int -> Bool -> IO ()

-- | usage: (<tt>gridSetDefaultEditor obj editor</tt>).
gridSetDefaultEditor :: Grid a -> GridCellEditor b -> IO ()

-- | usage: (<tt>gridSetDefaultRenderer obj renderer</tt>).
gridSetDefaultRenderer :: Grid a -> GridCellRenderer b -> IO ()

-- | usage: (<tt>gridSetDefaultRowSize obj height resizeExistingRows</tt>).
gridSetDefaultRowSize :: Grid a -> Int -> Bool -> IO ()

-- | usage: (<tt>gridSetGridCursor obj row col</tt>).
gridSetGridCursor :: Grid a -> Int -> Int -> IO ()

-- | usage: (<tt>gridSetGridLineColour obj col</tt>).
gridSetGridLineColour :: Grid a -> Color -> IO ()

-- | usage: (<tt>gridSetLabelBackgroundColour obj colour</tt>).
gridSetLabelBackgroundColour :: Grid a -> Color -> IO ()

-- | usage: (<tt>gridSetLabelFont obj font</tt>).
gridSetLabelFont :: Grid a -> Font b -> IO ()

-- | usage: (<tt>gridSetLabelTextColour obj colour</tt>).
gridSetLabelTextColour :: Grid a -> Color -> IO ()

-- | usage: (<tt>gridSetMargins obj extraWidth extraHeight</tt>).
gridSetMargins :: Grid a -> Int -> Int -> IO ()

-- | usage: (<tt>gridSetReadOnly obj row col isReadOnly</tt>).
gridSetReadOnly :: Grid a -> Int -> Int -> Bool -> IO ()

-- | usage: (<tt>gridSetRowAttr obj row attr</tt>).
gridSetRowAttr :: Grid a -> Int -> GridCellAttr c -> IO ()

-- | usage: (<tt>gridSetRowLabelAlignment obj horiz vert</tt>).
gridSetRowLabelAlignment :: Grid a -> Int -> Int -> IO ()

-- | usage: (<tt>gridSetRowLabelSize obj width</tt>).
gridSetRowLabelSize :: Grid a -> Int -> IO ()

-- | usage: (<tt>gridSetRowLabelValue obj row label</tt>).
gridSetRowLabelValue :: Grid a -> Int -> String -> IO ()

-- | usage: (<tt>gridSetRowMinimalHeight obj row width</tt>).
gridSetRowMinimalHeight :: Grid a -> Int -> Int -> IO ()

-- | usage: (<tt>gridSetRowSize obj row height</tt>).
gridSetRowSize :: Grid a -> Int -> Int -> IO ()

-- | usage: (<tt>gridSetSelectionBackground obj c</tt>).
gridSetSelectionBackground :: Grid a -> Color -> IO ()

-- | usage: (<tt>gridSetSelectionForeground obj c</tt>).
gridSetSelectionForeground :: Grid a -> Color -> IO ()

-- | usage: (<tt>gridSetSelectionMode obj selmode</tt>).
gridSetSelectionMode :: Grid a -> Int -> IO ()

-- | usage: (<tt>gridSetTable obj table takeOwnership selmode</tt>).
gridSetTable :: Grid a -> GridTableBase b -> Bool -> Int -> IO Bool

-- | usage: (<tt>gridShowCellEditControl obj</tt>).
gridShowCellEditControl :: Grid a -> IO ()

-- | usage: (<tt>gridStringToLines obj value lines</tt>).
gridStringToLines :: Grid a -> String -> Ptr c -> IO Int

-- | usage: (<tt>gridXToCol obj x</tt>).
gridXToCol :: Grid a -> Int -> IO Int

-- | usage: (<tt>gridXToEdgeOfCol obj x</tt>).
gridXToEdgeOfCol :: Grid a -> Int -> IO Int

-- | usage: (<tt>gridXYToCell obj xy</tt>).
gridXYToCell :: Grid a -> Point -> IO Point

-- | usage: (<tt>gridYToEdgeOfRow obj y</tt>).
gridYToEdgeOfRow :: Grid a -> Int -> IO Int

-- | usage: (<tt>gridYToRow obj y</tt>).
gridYToRow :: Grid a -> Int -> IO Int

-- | usage: (<tt>gridCellAttrCtor</tt>).
gridCellAttrCtor :: IO (GridCellAttr ())

-- | usage: (<tt>gridCellAttrDecRef obj</tt>).
gridCellAttrDecRef :: GridCellAttr a -> IO ()

-- | usage: (<tt>gridCellAttrGetAlignment obj</tt>).
gridCellAttrGetAlignment :: GridCellAttr a -> IO Size

-- | usage: (<tt>gridCellAttrGetBackgroundColour obj</tt>).
gridCellAttrGetBackgroundColour :: GridCellAttr a -> IO (Color)

-- | usage: (<tt>gridCellAttrGetEditor obj grid row col</tt>).
gridCellAttrGetEditor :: GridCellAttr a -> Grid b -> Int -> Int -> IO (GridCellEditor ())

-- | usage: (<tt>gridCellAttrGetFont obj</tt>).
gridCellAttrGetFont :: GridCellAttr a -> IO (Font ())

-- | usage: (<tt>gridCellAttrGetRenderer obj grid row col</tt>).
gridCellAttrGetRenderer :: GridCellAttr a -> Grid b -> Int -> Int -> IO (GridCellRenderer ())

-- | usage: (<tt>gridCellAttrGetTextColour obj</tt>).
gridCellAttrGetTextColour :: GridCellAttr a -> IO (Color)

-- | usage: (<tt>gridCellAttrHasAlignment obj</tt>).
gridCellAttrHasAlignment :: GridCellAttr a -> IO Bool

-- | usage: (<tt>gridCellAttrHasBackgroundColour obj</tt>).
gridCellAttrHasBackgroundColour :: GridCellAttr a -> IO Bool

-- | usage: (<tt>gridCellAttrHasEditor obj</tt>).
gridCellAttrHasEditor :: GridCellAttr a -> IO Bool

-- | usage: (<tt>gridCellAttrHasFont obj</tt>).
gridCellAttrHasFont :: GridCellAttr a -> IO Bool

-- | usage: (<tt>gridCellAttrHasRenderer obj</tt>).
gridCellAttrHasRenderer :: GridCellAttr a -> IO Bool

-- | usage: (<tt>gridCellAttrHasTextColour obj</tt>).
gridCellAttrHasTextColour :: GridCellAttr a -> IO Bool

-- | usage: (<tt>gridCellAttrIncRef obj</tt>).
gridCellAttrIncRef :: GridCellAttr a -> IO ()

-- | usage: (<tt>gridCellAttrIsReadOnly obj</tt>).
gridCellAttrIsReadOnly :: GridCellAttr a -> IO Bool

-- | usage: (<tt>gridCellAttrSetAlignment obj hAlign vAlign</tt>).
gridCellAttrSetAlignment :: GridCellAttr a -> Int -> Int -> IO ()

-- | usage: (<tt>gridCellAttrSetBackgroundColour obj colBack</tt>).
gridCellAttrSetBackgroundColour :: GridCellAttr a -> Color -> IO ()

-- | usage: (<tt>gridCellAttrSetDefAttr obj defAttr</tt>).
gridCellAttrSetDefAttr :: GridCellAttr a -> GridCellAttr b -> IO ()

-- | usage: (<tt>gridCellAttrSetEditor obj editor</tt>).
gridCellAttrSetEditor :: GridCellAttr a -> GridCellEditor b -> IO ()

-- | usage: (<tt>gridCellAttrSetFont obj font</tt>).
gridCellAttrSetFont :: GridCellAttr a -> Font b -> IO ()

-- | usage: (<tt>gridCellAttrSetReadOnly obj isReadOnly</tt>).
gridCellAttrSetReadOnly :: GridCellAttr a -> Bool -> IO ()

-- | usage: (<tt>gridCellAttrSetRenderer obj renderer</tt>).
gridCellAttrSetRenderer :: GridCellAttr a -> GridCellRenderer b -> IO ()

-- | usage: (<tt>gridCellAttrSetTextColour obj colText</tt>).
gridCellAttrSetTextColour :: GridCellAttr a -> Color -> IO ()

-- | usage: (<tt>gridCellAutoWrapStringRendererCtor</tt>).
gridCellAutoWrapStringRendererCtor :: IO (GridCellAutoWrapStringRenderer ())

-- | usage: (<tt>gridCellBoolEditorCtor</tt>).
gridCellBoolEditorCtor :: IO (GridCellBoolEditor ())

-- | usage: (<tt>gridCellChoiceEditorCtor countchoices allowOthers</tt>).
gridCellChoiceEditorCtor :: [String] -> Bool -> IO (GridCellChoiceEditor ())

-- | usage: (<tt>gridCellCoordsArrayCreate</tt>).
gridCellCoordsArrayCreate :: IO (GridCellCoordsArray ())

-- | usage: (<tt>gridCellCoordsArrayDelete obj</tt>).
gridCellCoordsArrayDelete :: GridCellCoordsArray a -> IO ()

-- | usage: (<tt>gridCellCoordsArrayGetCount obj</tt>).
gridCellCoordsArrayGetCount :: GridCellCoordsArray a -> IO Int

-- | usage: (<tt>gridCellCoordsArrayItem obj idx</tt>).
gridCellCoordsArrayItem :: GridCellCoordsArray a -> Int -> IO Point

-- | usage: (<tt>gridCellEditorBeginEdit obj row col grid</tt>).
gridCellEditorBeginEdit :: GridCellEditor a -> Int -> Int -> Grid d -> IO ()

-- | usage: (<tt>gridCellEditorCreate obj parent id evtHandler</tt>).
gridCellEditorCreate :: GridCellEditor a -> Window b -> Id -> EvtHandler d -> IO ()

-- | usage: (<tt>gridCellEditorDestroy obj</tt>).
gridCellEditorDestroy :: GridCellEditor a -> IO ()

-- | usage: (<tt>gridCellEditorEndEdit obj row col grid oldStr
--   newStr</tt>).
gridCellEditorEndEdit :: GridCellEditor a -> Int -> Int -> Grid d -> String -> String -> IO Int

-- | usage: (<tt>gridCellEditorGetControl obj</tt>).
gridCellEditorGetControl :: GridCellEditor a -> IO (Control ())

-- | usage: (<tt>gridCellEditorHandleReturn obj event</tt>).
gridCellEditorHandleReturn :: GridCellEditor a -> Event b -> IO ()

-- | usage: (<tt>gridCellEditorIsAcceptedKey obj event</tt>).
gridCellEditorIsAcceptedKey :: GridCellEditor a -> Event b -> IO Bool

-- | usage: (<tt>gridCellEditorIsCreated obj</tt>).
gridCellEditorIsCreated :: GridCellEditor a -> IO Bool

-- | usage: (<tt>gridCellEditorPaintBackground obj dc xywh attr</tt>).
gridCellEditorPaintBackground :: GridCellEditor a -> DC b -> Rect -> GridCellAttr d -> IO ()

-- | usage: (<tt>gridCellEditorReset obj</tt>).
gridCellEditorReset :: GridCellEditor a -> IO ()

-- | usage: (<tt>gridCellEditorSetControl obj control</tt>).
gridCellEditorSetControl :: GridCellEditor a -> Control b -> IO ()

-- | usage: (<tt>gridCellEditorSetParameters obj params</tt>).
gridCellEditorSetParameters :: GridCellEditor a -> String -> IO ()

-- | usage: (<tt>gridCellEditorSetSize obj xywh</tt>).
gridCellEditorSetSize :: GridCellEditor a -> Rect -> IO ()

-- | usage: (<tt>gridCellEditorShow obj show attr</tt>).
gridCellEditorShow :: GridCellEditor a -> Bool -> GridCellAttr c -> IO ()

-- | usage: (<tt>gridCellEditorStartingClick obj</tt>).
gridCellEditorStartingClick :: GridCellEditor a -> IO ()

-- | usage: (<tt>gridCellEditorStartingKey obj event</tt>).
gridCellEditorStartingKey :: GridCellEditor a -> Event b -> IO ()

-- | usage: (<tt>gridCellFloatEditorCtor width precision</tt>).
gridCellFloatEditorCtor :: Int -> Int -> IO (GridCellFloatEditor ())

-- | usage: (<tt>gridCellNumberEditorCtor min max</tt>).
gridCellNumberEditorCtor :: Int -> Int -> IO (GridCellNumberEditor ())

-- | usage: (<tt>gridCellNumberRendererCtor</tt>).
gridCellNumberRendererCtor :: IO (GridCellNumberRenderer ())

-- | usage: (<tt>gridCellTextEditorCtor</tt>).
gridCellTextEditorCtor :: IO (GridCellTextEditor ())

-- | usage: (<tt>gridCellTextEnterEditorCtor</tt>).
gridCellTextEnterEditorCtor :: IO (GridCellTextEnterEditor ())

-- | usage: (<tt>gridEditorCreatedEventGetCol obj</tt>).
gridEditorCreatedEventGetCol :: GridEditorCreatedEvent a -> IO Int

-- | usage: (<tt>gridEditorCreatedEventGetControl obj</tt>).
gridEditorCreatedEventGetControl :: GridEditorCreatedEvent a -> IO (Control ())

-- | usage: (<tt>gridEditorCreatedEventGetRow obj</tt>).
gridEditorCreatedEventGetRow :: GridEditorCreatedEvent a -> IO Int

-- | usage: (<tt>gridEditorCreatedEventSetCol obj col</tt>).
gridEditorCreatedEventSetCol :: GridEditorCreatedEvent a -> Int -> IO ()

-- | usage: (<tt>gridEditorCreatedEventSetControl obj ctrl</tt>).
gridEditorCreatedEventSetControl :: GridEditorCreatedEvent a -> Control b -> IO ()

-- | usage: (<tt>gridEditorCreatedEventSetRow obj row</tt>).
gridEditorCreatedEventSetRow :: GridEditorCreatedEvent a -> Int -> IO ()

-- | usage: (<tt>gridEventAltDown obj</tt>).
gridEventAltDown :: GridEvent a -> IO Bool

-- | usage: (<tt>gridEventControlDown obj</tt>).
gridEventControlDown :: GridEvent a -> IO Bool

-- | usage: (<tt>gridEventGetCol obj</tt>).
gridEventGetCol :: GridEvent a -> IO Int

-- | usage: (<tt>gridEventGetPosition obj</tt>).
gridEventGetPosition :: GridEvent a -> IO (Point)

-- | usage: (<tt>gridEventGetRow obj</tt>).
gridEventGetRow :: GridEvent a -> IO Int

-- | usage: (<tt>gridEventMetaDown obj</tt>).
gridEventMetaDown :: GridEvent a -> IO Bool

-- | usage: (<tt>gridEventSelecting obj</tt>).
gridEventSelecting :: GridEvent a -> IO Bool

-- | usage: (<tt>gridEventShiftDown obj</tt>).
gridEventShiftDown :: GridEvent a -> IO Bool

-- | usage: (<tt>gridRangeSelectEventAltDown obj</tt>).
gridRangeSelectEventAltDown :: GridRangeSelectEvent a -> IO Bool

-- | usage: (<tt>gridRangeSelectEventControlDown obj</tt>).
gridRangeSelectEventControlDown :: GridRangeSelectEvent a -> IO Bool

-- | usage: (<tt>gridRangeSelectEventGetBottomRightCoords obj</tt>).
gridRangeSelectEventGetBottomRightCoords :: GridRangeSelectEvent a -> IO Point

-- | usage: (<tt>gridRangeSelectEventGetBottomRow obj</tt>).
gridRangeSelectEventGetBottomRow :: GridRangeSelectEvent a -> IO Int

-- | usage: (<tt>gridRangeSelectEventGetLeftCol obj</tt>).
gridRangeSelectEventGetLeftCol :: GridRangeSelectEvent a -> IO Int

-- | usage: (<tt>gridRangeSelectEventGetRightCol obj</tt>).
gridRangeSelectEventGetRightCol :: GridRangeSelectEvent a -> IO Int

-- | usage: (<tt>gridRangeSelectEventGetTopLeftCoords obj</tt>).
gridRangeSelectEventGetTopLeftCoords :: GridRangeSelectEvent a -> IO Point

-- | usage: (<tt>gridRangeSelectEventGetTopRow obj</tt>).
gridRangeSelectEventGetTopRow :: GridRangeSelectEvent a -> IO Int

-- | usage: (<tt>gridRangeSelectEventMetaDown obj</tt>).
gridRangeSelectEventMetaDown :: GridRangeSelectEvent a -> IO Bool

-- | usage: (<tt>gridRangeSelectEventSelecting obj</tt>).
gridRangeSelectEventSelecting :: GridRangeSelectEvent a -> IO Bool

-- | usage: (<tt>gridRangeSelectEventShiftDown obj</tt>).
gridRangeSelectEventShiftDown :: GridRangeSelectEvent a -> IO Bool

-- | usage: (<tt>gridSizeEventAltDown obj</tt>).
gridSizeEventAltDown :: GridSizeEvent a -> IO Bool

-- | usage: (<tt>gridSizeEventControlDown obj</tt>).
gridSizeEventControlDown :: GridSizeEvent a -> IO Bool

-- | usage: (<tt>gridSizeEventGetPosition obj</tt>).
gridSizeEventGetPosition :: GridSizeEvent a -> IO (Point)

-- | usage: (<tt>gridSizeEventGetRowOrCol obj</tt>).
gridSizeEventGetRowOrCol :: GridSizeEvent a -> IO Int

-- | usage: (<tt>gridSizeEventMetaDown obj</tt>).
gridSizeEventMetaDown :: GridSizeEvent a -> IO Bool

-- | usage: (<tt>gridSizeEventShiftDown obj</tt>).
gridSizeEventShiftDown :: GridSizeEvent a -> IO Bool

-- | usage: (<tt>gridSizerCalcMin obj</tt>).
gridSizerCalcMin :: GridSizer a -> IO (Size)

-- | usage: (<tt>gridSizerCreate rows cols vgap hgap</tt>).
gridSizerCreate :: Int -> Int -> Int -> Int -> IO (GridSizer ())

-- | usage: (<tt>gridSizerGetCols obj</tt>).
gridSizerGetCols :: GridSizer a -> IO Int

-- | usage: (<tt>gridSizerGetHGap obj</tt>).
gridSizerGetHGap :: GridSizer a -> IO Int

-- | usage: (<tt>gridSizerGetRows obj</tt>).
gridSizerGetRows :: GridSizer a -> IO Int

-- | usage: (<tt>gridSizerGetVGap obj</tt>).
gridSizerGetVGap :: GridSizer a -> IO Int

-- | usage: (<tt>gridSizerRecalcSizes obj</tt>).
gridSizerRecalcSizes :: GridSizer a -> IO ()

-- | usage: (<tt>gridSizerSetCols obj cols</tt>).
gridSizerSetCols :: GridSizer a -> Int -> IO ()

-- | usage: (<tt>gridSizerSetHGap obj gap</tt>).
gridSizerSetHGap :: GridSizer a -> Int -> IO ()

-- | usage: (<tt>gridSizerSetRows obj rows</tt>).
gridSizerSetRows :: GridSizer a -> Int -> IO ()

-- | usage: (<tt>gridSizerSetVGap obj gap</tt>).
gridSizerSetVGap :: GridSizer a -> Int -> IO ()

-- | usage: (<tt>helpControllerHelpProviderCreate ctr</tt>).
helpControllerHelpProviderCreate :: HelpControllerBase a -> IO (HelpControllerHelpProvider ())

-- | usage: (<tt>helpControllerHelpProviderGetHelpController obj</tt>).
helpControllerHelpProviderGetHelpController :: HelpControllerHelpProvider a -> IO (HelpControllerBase ())

-- | usage: (<tt>helpControllerHelpProviderSetHelpController obj hc</tt>).
helpControllerHelpProviderSetHelpController :: HelpControllerHelpProvider a -> HelpController b -> IO ()

-- | usage: (<tt>helpEventGetLink obj</tt>).
helpEventGetLink :: HelpEvent a -> IO (String)

-- | usage: (<tt>helpEventGetPosition obj</tt>).
helpEventGetPosition :: HelpEvent a -> IO (Point)

-- | usage: (<tt>helpEventGetTarget obj</tt>).
helpEventGetTarget :: HelpEvent a -> IO (String)

-- | usage: (<tt>helpEventSetLink obj link</tt>).
helpEventSetLink :: HelpEvent a -> String -> IO ()

-- | usage: (<tt>helpEventSetPosition obj xy</tt>).
helpEventSetPosition :: HelpEvent a -> Point -> IO ()

-- | usage: (<tt>helpEventSetTarget obj target</tt>).
helpEventSetTarget :: HelpEvent a -> String -> IO ()

-- | usage: (<tt>helpProviderAddHelp obj window text</tt>).
helpProviderAddHelp :: HelpProvider a -> Window b -> String -> IO ()

-- | usage: (<tt>helpProviderAddHelpById obj id text</tt>).
helpProviderAddHelpById :: HelpProvider a -> Id -> String -> IO ()

-- | usage: (<tt>helpProviderDelete obj</tt>).
helpProviderDelete :: HelpProvider a -> IO ()

-- | usage: (<tt>helpProviderGet</tt>).
helpProviderGet :: IO (HelpProvider ())

-- | usage: (<tt>helpProviderGetHelp obj window</tt>).
helpProviderGetHelp :: HelpProvider a -> Window b -> IO (String)

-- | usage: (<tt>helpProviderRemoveHelp obj window</tt>).
helpProviderRemoveHelp :: HelpProvider a -> Window b -> IO ()

-- | usage: (<tt>helpProviderSet helpProvider</tt>).
helpProviderSet :: HelpProvider a -> IO (HelpProvider ())

-- | usage: (<tt>helpProviderShowHelp obj window</tt>).
helpProviderShowHelp :: HelpProvider a -> Window b -> IO Bool

-- | usage: (<tt>htmlHelpControllerAddBook obj book showwaitmsg</tt>).
htmlHelpControllerAddBook :: HtmlHelpController a -> Ptr b -> Int -> IO Bool

-- | usage: (<tt>htmlHelpControllerCreate style</tt>).
htmlHelpControllerCreate :: Int -> IO (HtmlHelpController ())

-- | usage: (<tt>htmlHelpControllerDelete obj</tt>).
htmlHelpControllerDelete :: HtmlHelpController a -> IO ()

-- | usage: (<tt>htmlHelpControllerDisplay obj x</tt>).
htmlHelpControllerDisplay :: HtmlHelpController a -> Ptr b -> IO Int

-- | usage: (<tt>htmlHelpControllerDisplayBlock obj blockNo</tt>).
htmlHelpControllerDisplayBlock :: HtmlHelpController a -> Int -> IO Bool

-- | usage: (<tt>htmlHelpControllerDisplayContents obj</tt>).
htmlHelpControllerDisplayContents :: HtmlHelpController a -> IO Int

-- | usage: (<tt>htmlHelpControllerDisplayIndex obj</tt>).
htmlHelpControllerDisplayIndex :: HtmlHelpController a -> IO Int

-- | usage: (<tt>htmlHelpControllerDisplayNumber obj id</tt>).
htmlHelpControllerDisplayNumber :: HtmlHelpController a -> Id -> IO Int

-- | usage: (<tt>htmlHelpControllerDisplaySection obj section</tt>).
htmlHelpControllerDisplaySection :: HtmlHelpController a -> String -> IO Bool

-- | usage: (<tt>htmlHelpControllerDisplaySectionNumber obj
--   sectionNo</tt>).
htmlHelpControllerDisplaySectionNumber :: HtmlHelpController a -> Int -> IO Bool

-- | usage: (<tt>htmlHelpControllerGetFrame obj</tt>).
htmlHelpControllerGetFrame :: HtmlHelpController a -> IO (Frame ())

-- | usage: (<tt>htmlHelpControllerGetFrameParameters obj title width
--   height posx posy newFrameEachTime</tt>).
htmlHelpControllerGetFrameParameters :: HtmlHelpController a -> Ptr b -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt -> IO (Ptr ())

-- | usage: (<tt>htmlHelpControllerInitialize obj file</tt>).
htmlHelpControllerInitialize :: HtmlHelpController a -> String -> IO Bool

-- | usage: (<tt>htmlHelpControllerKeywordSearch obj keyword</tt>).
htmlHelpControllerKeywordSearch :: HtmlHelpController a -> String -> IO Bool

-- | usage: (<tt>htmlHelpControllerLoadFile obj file</tt>).
htmlHelpControllerLoadFile :: HtmlHelpController a -> String -> IO Bool

-- | usage: (<tt>htmlHelpControllerQuit obj</tt>).
htmlHelpControllerQuit :: HtmlHelpController a -> IO Bool

-- | usage: (<tt>htmlHelpControllerReadCustomization obj cfg path</tt>).
htmlHelpControllerReadCustomization :: HtmlHelpController a -> ConfigBase b -> String -> IO ()

-- | usage: (<tt>htmlHelpControllerSetFrameParameters obj title widthheight
--   posx posy newFrameEachTime</tt>).
htmlHelpControllerSetFrameParameters :: HtmlHelpController a -> Ptr b -> Size -> Int -> Int -> Bool -> IO ()

-- | usage: (<tt>htmlHelpControllerSetTempDir obj path</tt>).
htmlHelpControllerSetTempDir :: HtmlHelpController a -> String -> IO ()

-- | usage: (<tt>htmlHelpControllerSetTitleFormat obj format</tt>).
htmlHelpControllerSetTitleFormat :: HtmlHelpController a -> Ptr b -> IO ()

-- | usage: (<tt>htmlHelpControllerSetViewer obj viewer flags</tt>).
htmlHelpControllerSetViewer :: HtmlHelpController a -> String -> Int -> IO ()

-- | usage: (<tt>htmlHelpControllerUseConfig obj config rootpath</tt>).
htmlHelpControllerUseConfig :: HtmlHelpController a -> ConfigBase b -> String -> IO ()

-- | usage: (<tt>htmlHelpControllerWriteCustomization obj cfg path</tt>).
htmlHelpControllerWriteCustomization :: HtmlHelpController a -> ConfigBase b -> String -> IO ()

-- | usage: (<tt>htmlWindowAppendToPage obj source</tt>).
htmlWindowAppendToPage :: HtmlWindow a -> String -> IO Bool

-- | usage: (<tt>htmlWindowCreate prt id lfttopwdthgt stl txt</tt>).
htmlWindowCreate :: Window a -> Id -> Rect -> Style -> String -> IO (HtmlWindow ())

-- | usage: (<tt>htmlWindowGetInternalRepresentation obj</tt>).
htmlWindowGetInternalRepresentation :: HtmlWindow a -> IO (HtmlContainerCell ())

-- | usage: (<tt>htmlWindowGetOpenedAnchor obj</tt>).
htmlWindowGetOpenedAnchor :: HtmlWindow a -> IO (String)

-- | usage: (<tt>htmlWindowGetOpenedPage obj</tt>).
htmlWindowGetOpenedPage :: HtmlWindow a -> IO (String)

-- | usage: (<tt>htmlWindowGetOpenedPageTitle obj</tt>).
htmlWindowGetOpenedPageTitle :: HtmlWindow a -> IO (String)

-- | usage: (<tt>htmlWindowGetRelatedFrame obj</tt>).
htmlWindowGetRelatedFrame :: HtmlWindow a -> IO (Frame ())

-- | usage: (<tt>htmlWindowHistoryBack obj</tt>).
htmlWindowHistoryBack :: HtmlWindow a -> IO Bool

-- | usage: (<tt>htmlWindowHistoryCanBack obj</tt>).
htmlWindowHistoryCanBack :: HtmlWindow a -> IO Bool

-- | usage: (<tt>htmlWindowHistoryCanForward obj</tt>).
htmlWindowHistoryCanForward :: HtmlWindow a -> IO Bool

-- | usage: (<tt>htmlWindowHistoryClear obj</tt>).
htmlWindowHistoryClear :: HtmlWindow a -> IO ()

-- | usage: (<tt>htmlWindowHistoryForward obj</tt>).
htmlWindowHistoryForward :: HtmlWindow a -> IO Bool

-- | usage: (<tt>htmlWindowLoadPage obj location</tt>).
htmlWindowLoadPage :: HtmlWindow a -> String -> IO Bool

-- | usage: (<tt>htmlWindowReadCustomization obj cfg path</tt>).
htmlWindowReadCustomization :: HtmlWindow a -> ConfigBase b -> String -> IO ()

-- | usage: (<tt>htmlWindowSetBorders obj b</tt>).
htmlWindowSetBorders :: HtmlWindow a -> Int -> IO ()

-- | usage: (<tt>htmlWindowSetFonts obj normalface fixedface sizes</tt>).
htmlWindowSetFonts :: HtmlWindow a -> String -> String -> Ptr CInt -> IO ()

-- | usage: (<tt>htmlWindowSetPage obj source</tt>).
htmlWindowSetPage :: HtmlWindow a -> String -> IO ()

-- | usage: (<tt>htmlWindowSetRelatedFrame obj frame format</tt>).
htmlWindowSetRelatedFrame :: HtmlWindow a -> Frame b -> String -> IO ()

-- | usage: (<tt>htmlWindowSetRelatedStatusBar obj bar</tt>).
htmlWindowSetRelatedStatusBar :: HtmlWindow a -> Int -> IO ()

-- | usage: (<tt>htmlWindowWriteCustomization obj cfg path</tt>).
htmlWindowWriteCustomization :: HtmlWindow a -> ConfigBase b -> String -> IO ()

-- | usage: (<tt>hyperlinkCtrlCreate parent id label url xywh style</tt>).
hyperlinkCtrlCreate :: Window a -> Id -> String -> String -> Rect -> Int -> IO (HyperlinkCtrl ())

-- | usage: (<tt>hyperlinkCtrlGetHoverColour self</tt>).
hyperlinkCtrlGetHoverColour :: HyperlinkCtrl a -> IO (Color)

-- | usage: (<tt>hyperlinkCtrlGetNormalColour self</tt>).
hyperlinkCtrlGetNormalColour :: HyperlinkCtrl a -> IO (Color)

-- | usage: (<tt>hyperlinkCtrlGetURL self</tt>).
hyperlinkCtrlGetURL :: HyperlinkCtrl a -> IO (String)

-- | usage: (<tt>hyperlinkCtrlGetVisited self</tt>).
hyperlinkCtrlGetVisited :: HyperlinkCtrl a -> IO Bool

-- | usage: (<tt>hyperlinkCtrlGetVisitedColour self</tt>).
hyperlinkCtrlGetVisitedColour :: HyperlinkCtrl a -> IO (Color)

-- | usage: (<tt>hyperlinkCtrlSetHoverColour self colour</tt>).
hyperlinkCtrlSetHoverColour :: HyperlinkCtrl a -> Color -> IO ()

-- | usage: (<tt>hyperlinkCtrlSetNormalColour self colour</tt>).
hyperlinkCtrlSetNormalColour :: HyperlinkCtrl a -> Color -> IO ()

-- | usage: (<tt>hyperlinkCtrlSetURL self url</tt>).
hyperlinkCtrlSetURL :: HyperlinkCtrl a -> String -> IO ()

-- | usage: (<tt>hyperlinkCtrlSetVisited self visited</tt>).
hyperlinkCtrlSetVisited :: HyperlinkCtrl a -> Bool -> IO ()

-- | usage: (<tt>hyperlinkCtrlSetVisitedColour self colour</tt>).
hyperlinkCtrlSetVisitedColour :: HyperlinkCtrl a -> Color -> IO ()

-- | usage: (<tt>iconAssign obj other</tt>).
iconAssign :: Icon a -> Ptr b -> IO ()

-- | usage: (<tt>iconCopyFromBitmap obj bmp</tt>).
iconCopyFromBitmap :: Icon a -> Bitmap b -> IO ()

-- | usage: (<tt>iconCreateDefault</tt>).
iconCreateDefault :: IO (Icon ())

-- | usage: (<tt>iconCreateLoad name wxtype widthheight</tt>).
iconCreateLoad :: String -> Int -> Size -> IO (Icon ())

-- | usage: (<tt>iconDelete obj</tt>).
iconDelete :: Icon a -> IO ()

-- | usage: (<tt>iconFromRaw wxdata widthheight</tt>).
iconFromRaw :: Icon a -> Size -> IO (Icon ())

-- | usage: (<tt>iconFromXPM wxdata</tt>).
iconFromXPM :: Icon a -> IO (Icon ())

-- | usage: (<tt>iconGetDepth obj</tt>).
iconGetDepth :: Icon a -> IO Int

-- | usage: (<tt>iconGetHeight obj</tt>).
iconGetHeight :: Icon a -> IO Int

-- | usage: (<tt>iconGetWidth obj</tt>).
iconGetWidth :: Icon a -> IO Int

-- | usage: (<tt>iconIsEqual obj other</tt>).
iconIsEqual :: Icon a -> Icon b -> IO Bool

-- | usage: (<tt>iconIsOk obj</tt>).
iconIsOk :: Icon a -> IO Bool

-- | usage: (<tt>iconIsStatic self</tt>).
iconIsStatic :: Icon a -> IO Bool

-- | usage: (<tt>iconLoad obj name wxtype widthheight</tt>).
iconLoad :: Icon a -> String -> Int -> Size -> IO Int

-- | usage: (<tt>iconSafeDelete self</tt>).
iconSafeDelete :: Icon a -> IO ()

-- | usage: (<tt>iconSetDepth obj depth</tt>).
iconSetDepth :: Icon a -> Int -> IO ()

-- | usage: (<tt>iconSetHeight obj height</tt>).
iconSetHeight :: Icon a -> Int -> IO ()

-- | usage: (<tt>iconSetWidth obj width</tt>).
iconSetWidth :: Icon a -> Int -> IO ()

-- | usage: (<tt>iconBundleAddIcon obj icon</tt>).
iconBundleAddIcon :: IconBundle a -> Icon b -> IO ()

-- | usage: (<tt>iconBundleAddIconFromFile obj file wxtype</tt>).
iconBundleAddIconFromFile :: IconBundle a -> String -> Int -> IO ()

-- | usage: (<tt>iconBundleCreateDefault</tt>).
iconBundleCreateDefault :: IO (IconBundle ())

-- | usage: (<tt>iconBundleCreateFromFile file wxtype</tt>).
iconBundleCreateFromFile :: String -> Int -> IO (IconBundle ())

-- | usage: (<tt>iconBundleCreateFromIcon icon</tt>).
iconBundleCreateFromIcon :: Icon a -> IO (IconBundle ())

-- | usage: (<tt>iconBundleDelete obj</tt>).
iconBundleDelete :: IconBundle a -> IO ()

-- | usage: (<tt>iconBundleGetIcon obj wh</tt>).
iconBundleGetIcon :: IconBundle a -> Size -> IO (Icon ())

-- | usage: (<tt>idleEventCopyObject obj objectdest</tt>).
idleEventCopyObject :: IdleEvent a -> WxObject b -> IO ()

-- | usage: (<tt>idleEventMoreRequested obj</tt>).
idleEventMoreRequested :: IdleEvent a -> IO Bool

-- | usage: (<tt>idleEventRequestMore obj needMore</tt>).
idleEventRequestMore :: IdleEvent a -> Bool -> IO ()

-- | usage: (<tt>imageCanRead name</tt>).
imageCanRead :: String -> IO Bool

-- | usage: (<tt>imageConvertToBitmap obj</tt>).
imageConvertToBitmap :: Image a -> IO (Bitmap ())

-- | usage: (<tt>imageConvertToByteString obj wxtype</tt>).
imageConvertToByteString :: Image a -> Int -> IO ByteString

-- | usage: (<tt>imageConvertToLazyByteString obj wxtype</tt>).
imageConvertToLazyByteString :: Image a -> Int -> IO ByteString

-- | usage: (<tt>imageCopy obj</tt>).
imageCopy :: Image a -> IO (Image ())

-- | usage: (<tt>imageCountColours obj stopafter</tt>).
imageCountColours :: Image a -> Int -> IO Int

-- | usage: (<tt>imageCreateDefault</tt>).
imageCreateDefault :: IO (Image ())

-- | usage: (<tt>imageCreateFromBitmap bitmap</tt>).
imageCreateFromBitmap :: Bitmap a -> IO (Image ())

-- | usage: (<tt>imageCreateFromByteString widthheight datalength</tt>).
imageCreateFromByteString :: Size -> ByteString -> IO (Image ())

-- | usage: (<tt>imageCreateFromData widthheight wxdata</tt>).
imageCreateFromData :: Size -> Ptr b -> IO (Image ())

-- | usage: (<tt>imageCreateFromDataEx widthheight wxdata
--   isStaticData</tt>).
imageCreateFromDataEx :: Size -> Ptr b -> Bool -> IO (Image ())

-- | usage: (<tt>imageCreateFromFile name</tt>).
imageCreateFromFile :: String -> IO (Image ())

-- | usage: (<tt>imageCreateFromLazyByteString widthheight
--   datalength</tt>).
imageCreateFromLazyByteString :: Size -> ByteString -> IO (Image ())

-- | usage: (<tt>imageCreateSized widthheight</tt>).
imageCreateSized :: Size -> IO (Image ())

-- | usage: (<tt>imageDelete image</tt>).
imageDelete :: Image a -> IO ()

-- | usage: (<tt>imageDestroy obj</tt>).
imageDestroy :: Image a -> IO ()

-- | usage: (<tt>imageGetBlue obj xy</tt>).
imageGetBlue :: Image a -> Point -> IO Char

-- | usage: (<tt>imageGetData obj</tt>).
imageGetData :: Image a -> IO (Ptr ())

-- | usage: (<tt>imageGetGreen obj xy</tt>).
imageGetGreen :: Image a -> Point -> IO Char

-- | usage: (<tt>imageGetHeight obj</tt>).
imageGetHeight :: Image a -> IO Int

-- | usage: (<tt>imageGetMaskBlue obj</tt>).
imageGetMaskBlue :: Image a -> IO Char

-- | usage: (<tt>imageGetMaskGreen obj</tt>).
imageGetMaskGreen :: Image a -> IO Char

-- | usage: (<tt>imageGetMaskRed obj</tt>).
imageGetMaskRed :: Image a -> IO Char

-- | usage: (<tt>imageGetOption obj name</tt>).
imageGetOption :: Image a -> String -> IO (String)

-- | usage: (<tt>imageGetOptionInt obj name</tt>).
imageGetOptionInt :: Image a -> String -> IO Bool

-- | usage: (<tt>imageGetRed obj xy</tt>).
imageGetRed :: Image a -> Point -> IO Char

-- | usage: (<tt>imageGetSubImage obj xywh</tt>).
imageGetSubImage :: Image a -> Rect -> IO (Image ())

-- | usage: (<tt>imageGetType obj</tt>).
imageGetType :: Image a -> IO Int

-- | usage: (<tt>imageGetWidth obj</tt>).
imageGetWidth :: Image a -> IO Int

-- | usage: (<tt>imageHasMask obj</tt>).
imageHasMask :: Image a -> IO Bool

-- | usage: (<tt>imageHasOption obj name</tt>).
imageHasOption :: Image a -> String -> IO Bool

-- | usage: (<tt>imageInitialize obj widthheight</tt>).
imageInitialize :: Image a -> Size -> IO ()

-- | usage: (<tt>imageInitializeFromData obj widthheight wxdata</tt>).
imageInitializeFromData :: Image a -> Size -> Ptr c -> IO ()

-- | usage: (<tt>imageIsOk obj</tt>).
imageIsOk :: Image a -> IO Bool

-- | usage: (<tt>imageLoadFile obj name wxtype</tt>).
imageLoadFile :: Image a -> String -> Int -> IO Bool

-- | usage: (<tt>imageLoadStream obj name wxtype index</tt>).
imageLoadStream :: Image a -> InputStream b -> Int -> Int -> IO Bool

-- | usage: (<tt>imageMirror obj horizontally</tt>).
imageMirror :: Image a -> Bool -> IO (Image ())

-- | usage: (<tt>imagePaste obj image xy</tt>).
imagePaste :: Image a -> Image b -> Point -> IO ()

-- | usage: (<tt>imageReplace obj r1g1b1 r2g2b2</tt>).
imageReplace :: Image a -> Color -> Color -> IO ()

-- | usage: (<tt>imageRescale obj widthheight</tt>).
imageRescale :: Image a -> Size -> IO ()

-- | usage: (<tt>imageRescaleEx obj widthheight quality</tt>).
imageRescaleEx :: Image a -> Size -> Int -> IO ()

-- | usage: (<tt>imageRotate obj angle cxcy interpolating
--   offsetafterrotation</tt>).
imageRotate :: Image a -> Double -> Point -> Bool -> Ptr e -> IO (Image ())

-- | usage: (<tt>imageRotate90 obj clockwise</tt>).
imageRotate90 :: Image a -> Bool -> IO (Image ())

-- | usage: (<tt>imageSaveFile obj name wxtype</tt>).
imageSaveFile :: Image a -> String -> Int -> IO Bool

-- | usage: (<tt>imageSaveStream obj stream wxtype</tt>).
imageSaveStream :: Image a -> OutputStream b -> Int -> IO Bool

-- | usage: (<tt>imageScale obj widthheight</tt>).
imageScale :: Image a -> Size -> IO (Image ())

-- | usage: (<tt>imageScaleEx obj widthheight quality</tt>).
imageScaleEx :: Image a -> Size -> Int -> IO (Image ())

-- | usage: (<tt>imageSetData obj wxdata</tt>).
imageSetData :: Image a -> Ptr b -> IO ()

-- | usage: (<tt>imageSetDataAndSize obj wxdata newwidthnewheight</tt>).
imageSetDataAndSize :: Image a -> Ptr b -> Size -> IO ()

-- | usage: (<tt>imageSetMask obj mask</tt>).
imageSetMask :: Image a -> Int -> IO ()

-- | usage: (<tt>imageSetMaskColour obj rgb</tt>).
imageSetMaskColour :: Image a -> Color -> IO ()

-- | usage: (<tt>imageSetOption obj name value</tt>).
imageSetOption :: Image a -> String -> String -> IO ()

-- | usage: (<tt>imageSetOptionInt obj name value</tt>).
imageSetOptionInt :: Image a -> String -> Int -> IO ()

-- | usage: (<tt>imageSetRGB obj xy rgb</tt>).
imageSetRGB :: Image a -> Point -> Color -> IO ()

-- | usage: (<tt>imageSetType obj wxtype</tt>).
imageSetType :: Image a -> Int -> IO ()

-- | usage: (<tt>imageListAddBitmap obj bitmap mask</tt>).
imageListAddBitmap :: ImageList a -> Bitmap b -> Bitmap c -> IO Int

-- | usage: (<tt>imageListAddIcon obj icon</tt>).
imageListAddIcon :: ImageList a -> Icon b -> IO Int

-- | usage: (<tt>imageListAddMasked obj bitmap maskColour</tt>).
imageListAddMasked :: ImageList a -> Bitmap b -> Color -> IO Int

-- | usage: (<tt>imageListCreate widthheight mask initialCount</tt>).
imageListCreate :: Size -> Bool -> Int -> IO (ImageList ())

-- | usage: (<tt>imageListDelete obj</tt>).
imageListDelete :: ImageList a -> IO ()

-- | usage: (<tt>imageListDraw obj index dc xy flags solidBackground</tt>).
imageListDraw :: ImageList a -> Int -> DC c -> Point -> Int -> Bool -> IO Bool

-- | usage: (<tt>imageListGetImageCount obj</tt>).
imageListGetImageCount :: ImageList a -> IO Int

-- | usage: (<tt>imageListGetSize obj index</tt>).
imageListGetSize :: ImageList a -> Int -> IO Size

-- | usage: (<tt>imageListRemove obj index</tt>).
imageListRemove :: ImageList a -> Int -> IO Bool

-- | usage: (<tt>imageListRemoveAll obj</tt>).
imageListRemoveAll :: ImageList a -> IO Bool

-- | usage: (<tt>imageListReplace obj index bitmap mask</tt>).
imageListReplace :: ImageList a -> Int -> Bitmap c -> Bitmap d -> IO Bool

-- | usage: (<tt>imageListReplaceIcon obj index icon</tt>).
imageListReplaceIcon :: ImageList a -> Int -> Icon c -> IO Bool

-- | usage: (<tt>individualLayoutConstraintAbove obj sibling marg</tt>).
individualLayoutConstraintAbove :: IndividualLayoutConstraint a -> Window b -> Int -> IO ()

-- | usage: (<tt>individualLayoutConstraintAbsolute obj val</tt>).
individualLayoutConstraintAbsolute :: IndividualLayoutConstraint a -> Int -> IO ()

-- | usage: (<tt>individualLayoutConstraintAsIs obj</tt>).
individualLayoutConstraintAsIs :: IndividualLayoutConstraint a -> IO ()

-- | usage: (<tt>individualLayoutConstraintBelow obj sibling marg</tt>).
individualLayoutConstraintBelow :: IndividualLayoutConstraint a -> Window b -> Int -> IO ()

-- | usage: (<tt>individualLayoutConstraintGetDone obj</tt>).
individualLayoutConstraintGetDone :: IndividualLayoutConstraint a -> IO Bool

-- | usage: (<tt>individualLayoutConstraintGetEdge obj which thisWin
--   other</tt>).
individualLayoutConstraintGetEdge :: IndividualLayoutConstraint a -> Int -> Ptr c -> Ptr d -> IO Int

-- | usage: (<tt>individualLayoutConstraintGetMargin obj</tt>).
individualLayoutConstraintGetMargin :: IndividualLayoutConstraint a -> IO Int

-- | usage: (<tt>individualLayoutConstraintGetMyEdge obj</tt>).
individualLayoutConstraintGetMyEdge :: IndividualLayoutConstraint a -> IO Int

-- | usage: (<tt>individualLayoutConstraintGetOtherEdge obj</tt>).
individualLayoutConstraintGetOtherEdge :: IndividualLayoutConstraint a -> IO Int

-- | usage: (<tt>individualLayoutConstraintGetOtherWindow obj</tt>).
individualLayoutConstraintGetOtherWindow :: IndividualLayoutConstraint a -> IO (Ptr ())

-- | usage: (<tt>individualLayoutConstraintGetPercent obj</tt>).
individualLayoutConstraintGetPercent :: IndividualLayoutConstraint a -> IO Int

-- | usage: (<tt>individualLayoutConstraintGetRelationship obj</tt>).
individualLayoutConstraintGetRelationship :: IndividualLayoutConstraint a -> IO Int

-- | usage: (<tt>individualLayoutConstraintGetValue obj</tt>).
individualLayoutConstraintGetValue :: IndividualLayoutConstraint a -> IO Int

-- | usage: (<tt>individualLayoutConstraintLeftOf obj sibling marg</tt>).
individualLayoutConstraintLeftOf :: IndividualLayoutConstraint a -> Window b -> Int -> IO ()

-- | usage: (<tt>individualLayoutConstraintPercentOf obj otherW wh
--   per</tt>).
individualLayoutConstraintPercentOf :: IndividualLayoutConstraint a -> Window b -> Int -> Int -> IO ()

-- | usage: (<tt>individualLayoutConstraintResetIfWin obj otherW</tt>).
individualLayoutConstraintResetIfWin :: IndividualLayoutConstraint a -> Window b -> IO Bool

-- | usage: (<tt>individualLayoutConstraintRightOf obj sibling marg</tt>).
individualLayoutConstraintRightOf :: IndividualLayoutConstraint a -> Window b -> Int -> IO ()

-- | usage: (<tt>individualLayoutConstraintSameAs obj otherW edge
--   marg</tt>).
individualLayoutConstraintSameAs :: IndividualLayoutConstraint a -> Window b -> Int -> Int -> IO ()

-- | usage: (<tt>individualLayoutConstraintSatisfyConstraint obj
--   constraints win</tt>).
individualLayoutConstraintSatisfyConstraint :: IndividualLayoutConstraint a -> Ptr b -> Window c -> IO Bool

-- | usage: (<tt>individualLayoutConstraintSet obj rel otherW otherE val
--   marg</tt>).
individualLayoutConstraintSet :: IndividualLayoutConstraint a -> Int -> Window c -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>individualLayoutConstraintSetDone obj d</tt>).
individualLayoutConstraintSetDone :: IndividualLayoutConstraint a -> Bool -> IO ()

-- | usage: (<tt>individualLayoutConstraintSetEdge obj which</tt>).
individualLayoutConstraintSetEdge :: IndividualLayoutConstraint a -> Int -> IO ()

-- | usage: (<tt>individualLayoutConstraintSetMargin obj m</tt>).
individualLayoutConstraintSetMargin :: IndividualLayoutConstraint a -> Int -> IO ()

-- | usage: (<tt>individualLayoutConstraintSetRelationship obj r</tt>).
individualLayoutConstraintSetRelationship :: IndividualLayoutConstraint a -> Int -> IO ()

-- | usage: (<tt>individualLayoutConstraintSetValue obj v</tt>).
individualLayoutConstraintSetValue :: IndividualLayoutConstraint a -> Int -> IO ()

-- | usage: (<tt>individualLayoutConstraintUnconstrained obj</tt>).
individualLayoutConstraintUnconstrained :: IndividualLayoutConstraint a -> IO ()

-- | Create an event driven input stream. It is unsafe to reference the
--   original inputStream after this call! The last parameter
--   <tt>bufferLen</tt> gives the default input batch size. The sink is
--   automatically destroyed whenever the input stream has no more input. *
inputSinkCreate :: InputStream a -> EvtHandler b -> Int -> IO (InputSink ())

-- | After creation, retrieve the <tt>id</tt> of the sink to connect to
--   <tt>wxEVT_INPUT_SINK</tt> events. *
inputSinkGetId :: InputSink a -> IO Int

-- | After event connection, start non-blocking reading of the inputstream.
--   This will generate <tt>inputSinkEvent</tt> events. *
inputSinkStart :: InputSink a -> IO ()

-- | Get the input status (<tt>wxSTREAM_NO_ERROR</tt> is ok). *
inputSinkEventLastError :: InputSinkEvent a -> IO Int

-- | The input buffer. *
inputSinkEventLastInput :: InputSinkEvent a -> IO (Ptr CWchar)

-- | The number of characters in the input buffer. *
inputSinkEventLastRead :: InputSinkEvent a -> IO Int

-- | usage: (<tt>inputStreamCanRead self</tt>).
inputStreamCanRead :: InputStream a -> IO Bool

-- | usage: (<tt>inputStreamDelete obj</tt>).
inputStreamDelete :: InputStream a -> IO ()

-- | usage: (<tt>inputStreamEof obj</tt>).
inputStreamEof :: InputStream a -> IO Bool

-- | usage: (<tt>inputStreamGetC obj</tt>).
inputStreamGetC :: InputStream a -> IO Char

-- | usage: (<tt>inputStreamLastRead obj</tt>).
inputStreamLastRead :: InputStream a -> IO Int

-- | usage: (<tt>inputStreamPeek obj</tt>).
inputStreamPeek :: InputStream a -> IO Char

-- | usage: (<tt>inputStreamRead obj buffer size</tt>).
inputStreamRead :: InputStream a -> Ptr b -> Int -> IO ()

-- | usage: (<tt>inputStreamSeekI obj pos mode</tt>).
inputStreamSeekI :: InputStream a -> Int -> Int -> IO Int

-- | usage: (<tt>inputStreamTell obj</tt>).
inputStreamTell :: InputStream a -> IO Int

-- | usage: (<tt>inputStreamUngetBuffer obj buffer size</tt>).
inputStreamUngetBuffer :: InputStream a -> Ptr b -> Int -> IO Int

-- | usage: (<tt>inputStreamUngetch obj c</tt>).
inputStreamUngetch :: InputStream a -> Char -> IO Int

-- | usage: (<tt>intPropertyCreate label name value</tt>).
intPropertyCreate :: String -> String -> Int -> IO (IntProperty ())

-- | usage: (<tt>keyEventAltDown obj</tt>).
keyEventAltDown :: KeyEvent a -> IO Bool

-- | usage: (<tt>keyEventControlDown obj</tt>).
keyEventControlDown :: KeyEvent a -> IO Bool

-- | usage: (<tt>keyEventCopyObject obj obj</tt>).
keyEventCopyObject :: KeyEvent a -> Ptr b -> IO ()

-- | usage: (<tt>keyEventGetKeyCode obj</tt>).
keyEventGetKeyCode :: KeyEvent a -> IO Int

-- | usage: (<tt>keyEventGetModifiers obj</tt>).
keyEventGetModifiers :: KeyEvent a -> IO Int

-- | usage: (<tt>keyEventGetPosition obj</tt>).
keyEventGetPosition :: KeyEvent a -> IO (Point)

-- | usage: (<tt>keyEventGetX obj</tt>).
keyEventGetX :: KeyEvent a -> IO Int

-- | usage: (<tt>keyEventGetY obj</tt>).
keyEventGetY :: KeyEvent a -> IO Int

-- | usage: (<tt>keyEventHasModifiers obj</tt>).
keyEventHasModifiers :: KeyEvent a -> IO Bool

-- | usage: (<tt>keyEventMetaDown obj</tt>).
keyEventMetaDown :: KeyEvent a -> IO Bool

-- | usage: (<tt>keyEventSetKeyCode obj code</tt>).
keyEventSetKeyCode :: KeyEvent a -> Int -> IO ()

-- | usage: (<tt>keyEventShiftDown obj</tt>).
keyEventShiftDown :: KeyEvent a -> IO Bool

-- | usage: (<tt>layoutAlgorithmCreate</tt>).
layoutAlgorithmCreate :: IO (LayoutAlgorithm ())

-- | usage: (<tt>layoutAlgorithmDelete obj</tt>).
layoutAlgorithmDelete :: LayoutAlgorithm a -> IO ()

-- | usage: (<tt>layoutAlgorithmLayoutFrame obj frame mainWindow</tt>).
layoutAlgorithmLayoutFrame :: LayoutAlgorithm a -> Frame b -> Ptr c -> IO Bool

-- | usage: (<tt>layoutAlgorithmLayoutMDIFrame obj frame xywh use</tt>).
layoutAlgorithmLayoutMDIFrame :: LayoutAlgorithm a -> Frame b -> Rect -> Int -> IO Bool

-- | usage: (<tt>layoutAlgorithmLayoutWindow obj frame mainWindow</tt>).
layoutAlgorithmLayoutWindow :: LayoutAlgorithm a -> Frame b -> Ptr c -> IO Bool

-- | usage: (<tt>layoutConstraintsCreate</tt>).
layoutConstraintsCreate :: IO (LayoutConstraints ())

-- | usage: (<tt>layoutConstraintsbottom obj</tt>).
layoutConstraintsbottom :: LayoutConstraints a -> IO (Ptr ())

-- | usage: (<tt>layoutConstraintscentreX obj</tt>).
layoutConstraintscentreX :: LayoutConstraints a -> IO (Ptr ())

-- | usage: (<tt>layoutConstraintscentreY obj</tt>).
layoutConstraintscentreY :: LayoutConstraints a -> IO (Ptr ())

-- | usage: (<tt>layoutConstraintsheight obj</tt>).
layoutConstraintsheight :: LayoutConstraints a -> IO (Ptr ())

-- | usage: (<tt>layoutConstraintsleft obj</tt>).
layoutConstraintsleft :: LayoutConstraints a -> IO (Ptr ())

-- | usage: (<tt>layoutConstraintsright obj</tt>).
layoutConstraintsright :: LayoutConstraints a -> IO (Ptr ())

-- | usage: (<tt>layoutConstraintstop obj</tt>).
layoutConstraintstop :: LayoutConstraints a -> IO (Ptr ())

-- | usage: (<tt>layoutConstraintswidth obj</tt>).
layoutConstraintswidth :: LayoutConstraints a -> IO (Ptr ())

-- | usage: (<tt>listBoxAppend obj item</tt>).
listBoxAppend :: ListBox a -> String -> IO ()

-- | usage: (<tt>listBoxAppendData obj item wxdata</tt>).
listBoxAppendData :: ListBox a -> String -> Ptr c -> IO ()

-- | usage: (<tt>listBoxClear obj</tt>).
listBoxClear :: ListBox a -> IO ()

-- | usage: (<tt>listBoxCreate prt id lfttopwdthgt nstr stl</tt>).
listBoxCreate :: Window a -> Id -> Rect -> [String] -> Style -> IO (ListBox ())

-- | usage: (<tt>listBoxDelete obj n</tt>).
listBoxDelete :: ListBox a -> Int -> IO ()

-- | usage: (<tt>listBoxFindString obj s</tt>).
listBoxFindString :: ListBox a -> String -> IO Int

-- | usage: (<tt>listBoxGetClientData obj n</tt>).
listBoxGetClientData :: ListBox a -> Int -> IO (ClientData ())

-- | usage: (<tt>listBoxGetCount obj</tt>).
listBoxGetCount :: ListBox a -> IO Int

-- | usage: (<tt>listBoxGetSelection obj</tt>).
listBoxGetSelection :: ListBox a -> IO Int

-- | usage: (<tt>listBoxGetSelections obj aSelections allocated</tt>).
listBoxGetSelections :: ListBox a -> Ptr CInt -> Int -> IO Int

-- | usage: (<tt>listBoxGetString obj n</tt>).
listBoxGetString :: ListBox a -> Int -> IO (String)

-- | usage: (<tt>listBoxInsertItems obj items pos count</tt>).
listBoxInsertItems :: ListBox a -> Ptr b -> Int -> Int -> IO ()

-- | usage: (<tt>listBoxIsSelected obj n</tt>).
listBoxIsSelected :: ListBox a -> Int -> IO Bool

-- | usage: (<tt>listBoxSetClientData obj n clientData</tt>).
listBoxSetClientData :: ListBox a -> Int -> ClientData c -> IO ()

-- | usage: (<tt>listBoxSetFirstItem obj n</tt>).
listBoxSetFirstItem :: ListBox a -> Int -> IO ()

-- | usage: (<tt>listBoxSetSelection obj n select</tt>).
listBoxSetSelection :: ListBox a -> Int -> Bool -> IO ()

-- | usage: (<tt>listBoxSetString obj n s</tt>).
listBoxSetString :: ListBox a -> Int -> String -> IO ()

-- | usage: (<tt>listBoxSetStringSelection obj str sel</tt>).
listBoxSetStringSelection :: ListBox a -> String -> Bool -> IO ()

-- | usage: (<tt>listCtrlArrange obj flag</tt>).
listCtrlArrange :: ListCtrl a -> Int -> IO Bool

-- | usage: (<tt>listCtrlAssignImageList obj images which</tt>).
listCtrlAssignImageList :: ListCtrl a -> ImageList b -> Int -> IO ()

-- | usage: (<tt>listCtrlClearAll obj</tt>).
listCtrlClearAll :: ListCtrl a -> IO ()

-- | usage: (<tt>listCtrlCreate prt id lfttopwdthgt stl</tt>).
listCtrlCreate :: Window a -> Id -> Rect -> Style -> IO (ListCtrl ())

-- | usage: (<tt>listCtrlDeleteAllColumns obj</tt>).
listCtrlDeleteAllColumns :: ListCtrl a -> IO Bool

-- | usage: (<tt>listCtrlDeleteAllItems obj</tt>).
listCtrlDeleteAllItems :: ListCtrl a -> IO Bool

-- | usage: (<tt>listCtrlDeleteColumn obj col</tt>).
listCtrlDeleteColumn :: ListCtrl a -> Int -> IO Bool

-- | usage: (<tt>listCtrlDeleteItem obj item</tt>).
listCtrlDeleteItem :: ListCtrl a -> Int -> IO Bool

-- | usage: (<tt>listCtrlEditLabel obj item</tt>).
listCtrlEditLabel :: ListCtrl a -> Int -> IO ()

-- | usage: (<tt>listCtrlEndEditLabel obj cancel</tt>).
listCtrlEndEditLabel :: ListCtrl a -> Int -> IO Bool

-- | usage: (<tt>listCtrlEnsureVisible obj item</tt>).
listCtrlEnsureVisible :: ListCtrl a -> Int -> IO Bool

-- | usage: (<tt>listCtrlFindItem obj start str partial</tt>).
listCtrlFindItem :: ListCtrl a -> Int -> String -> Bool -> IO Int

-- | usage: (<tt>listCtrlFindItemByData obj start wxdata</tt>).
listCtrlFindItemByData :: ListCtrl a -> Int -> Int -> IO Int

-- | usage: (<tt>listCtrlFindItemByPosition obj start xy direction</tt>).
listCtrlFindItemByPosition :: ListCtrl a -> Int -> Point -> Int -> IO Int

-- | usage: (<tt>listCtrlGetColumn obj col item</tt>).
listCtrlGetColumn :: ListCtrl a -> Int -> ListItem c -> IO Bool

-- | usage: (<tt>listCtrlGetColumn2 obj col</tt>).
listCtrlGetColumn2 :: ListCtrl a -> Int -> IO (ListItem ())

-- | usage: (<tt>listCtrlGetColumnCount obj</tt>).
listCtrlGetColumnCount :: ListCtrl a -> IO Int

-- | usage: (<tt>listCtrlGetColumnWidth obj col</tt>).
listCtrlGetColumnWidth :: ListCtrl a -> Int -> IO Int

-- | usage: (<tt>listCtrlGetCountPerPage obj</tt>).
listCtrlGetCountPerPage :: ListCtrl a -> IO Int

-- | usage: (<tt>listCtrlGetEditControl obj</tt>).
listCtrlGetEditControl :: ListCtrl a -> IO (TextCtrl ())

-- | usage: (<tt>listCtrlGetImageList obj which</tt>).
listCtrlGetImageList :: ListCtrl a -> Int -> IO (ImageList ())

-- | usage: (<tt>listCtrlGetItem obj info</tt>).
listCtrlGetItem :: ListCtrl a -> ListItem b -> IO Bool

-- | usage: (<tt>listCtrlGetItem2 obj</tt>).
listCtrlGetItem2 :: ListCtrl a -> IO (ListItem ())

-- | usage: (<tt>listCtrlGetItemCount obj</tt>).
listCtrlGetItemCount :: ListCtrl a -> IO Int

-- | usage: (<tt>listCtrlGetItemData obj item</tt>).
listCtrlGetItemData :: ListCtrl a -> Int -> IO Int

-- | usage: (<tt>listCtrlGetItemFont obj item</tt>).
listCtrlGetItemFont :: ListCtrl a -> Int -> IO (Font ())

-- | usage: (<tt>listCtrlGetItemPosition obj item</tt>).
listCtrlGetItemPosition :: ListCtrl a -> Int -> IO (Point)

-- | usage: (<tt>listCtrlGetItemPosition2 obj item</tt>).
listCtrlGetItemPosition2 :: ListCtrl a -> Int -> IO (Point)

-- | usage: (<tt>listCtrlGetItemRect obj item code</tt>).
listCtrlGetItemRect :: ListCtrl a -> Int -> Int -> IO (Rect)

-- | usage: (<tt>listCtrlGetItemSpacing obj isSmall</tt>).
listCtrlGetItemSpacing :: ListCtrl a -> Bool -> IO (Size)

-- | usage: (<tt>listCtrlGetItemState obj item stateMask</tt>).
listCtrlGetItemState :: ListCtrl a -> Int -> Int -> IO Int

-- | usage: (<tt>listCtrlGetItemText obj item</tt>).
listCtrlGetItemText :: ListCtrl a -> Int -> IO (String)

-- | usage: (<tt>listCtrlGetNextItem obj item geometry state</tt>).
listCtrlGetNextItem :: ListCtrl a -> Int -> Int -> Int -> IO Int

-- | usage: (<tt>listCtrlGetSelectedItemCount obj</tt>).
listCtrlGetSelectedItemCount :: ListCtrl a -> IO Int

-- | usage: (<tt>listCtrlGetTextColour obj</tt>).
listCtrlGetTextColour :: ListCtrl a -> IO (Color)

-- | usage: (<tt>listCtrlGetTopItem obj</tt>).
listCtrlGetTopItem :: ListCtrl a -> IO Int

-- | usage: (<tt>listCtrlHitTest obj xy flags</tt>).
listCtrlHitTest :: ListCtrl a -> Point -> Ptr c -> IO Int

-- | usage: (<tt>listCtrlInsertColumn obj col heading format width</tt>).
listCtrlInsertColumn :: ListCtrl a -> Int -> String -> Int -> Int -> IO Int

-- | usage: (<tt>listCtrlInsertColumnFromInfo obj col info</tt>).
listCtrlInsertColumnFromInfo :: ListCtrl a -> Int -> ListItem c -> IO Int

-- | usage: (<tt>listCtrlInsertItem obj info</tt>).
listCtrlInsertItem :: ListCtrl a -> ListItem b -> IO Int

-- | usage: (<tt>listCtrlInsertItemWithData obj index label</tt>).
listCtrlInsertItemWithData :: ListCtrl a -> Int -> String -> IO Int

-- | usage: (<tt>listCtrlInsertItemWithImage obj index imageIndex</tt>).
listCtrlInsertItemWithImage :: ListCtrl a -> Int -> Int -> IO Int

-- | usage: (<tt>listCtrlInsertItemWithLabel obj index label
--   imageIndex</tt>).
listCtrlInsertItemWithLabel :: ListCtrl a -> Int -> String -> Int -> IO Int

-- | usage: (<tt>listCtrlIsVirtual obj</tt>).
listCtrlIsVirtual :: ListCtrl a -> IO Bool

-- | usage: (<tt>listCtrlRefreshItem obj item</tt>).
listCtrlRefreshItem :: ListCtrl a -> Int -> IO ()

-- | usage: (<tt>listCtrlScrollList obj dxdy</tt>).
listCtrlScrollList :: ListCtrl a -> Vector -> IO Bool

-- | usage: (<tt>listCtrlSetBackgroundColour obj col</tt>).
listCtrlSetBackgroundColour :: ListCtrl a -> Color -> IO ()

-- | usage: (<tt>listCtrlSetColumn obj col item</tt>).
listCtrlSetColumn :: ListCtrl a -> Int -> ListItem c -> IO Bool

-- | usage: (<tt>listCtrlSetColumnWidth obj col width</tt>).
listCtrlSetColumnWidth :: ListCtrl a -> Int -> Int -> IO Bool

-- | usage: (<tt>listCtrlSetForegroundColour obj col</tt>).
listCtrlSetForegroundColour :: ListCtrl a -> Color -> IO Int

-- | usage: (<tt>listCtrlSetImageList obj imageList which</tt>).
listCtrlSetImageList :: ListCtrl a -> ImageList b -> Int -> IO ()

-- | usage: (<tt>listCtrlSetItem obj index col label imageId</tt>).
listCtrlSetItem :: ListCtrl a -> Int -> Int -> String -> Int -> IO Bool

-- | usage: (<tt>listCtrlSetItemData obj item wxdata</tt>).
listCtrlSetItemData :: ListCtrl a -> Int -> Int -> IO Bool

-- | usage: (<tt>listCtrlSetItemFromInfo obj info</tt>).
listCtrlSetItemFromInfo :: ListCtrl a -> ListItem b -> IO Bool

-- | usage: (<tt>listCtrlSetItemImage obj item image selImage</tt>).
listCtrlSetItemImage :: ListCtrl a -> Int -> Int -> Int -> IO Bool

-- | usage: (<tt>listCtrlSetItemPosition obj item xy</tt>).
listCtrlSetItemPosition :: ListCtrl a -> Int -> Point -> IO Bool

-- | usage: (<tt>listCtrlSetItemState obj item state stateMask</tt>).
listCtrlSetItemState :: ListCtrl a -> Int -> Int -> Int -> IO Bool

-- | usage: (<tt>listCtrlSetItemText obj item str</tt>).
listCtrlSetItemText :: ListCtrl a -> Int -> String -> IO ()

-- | usage: (<tt>listCtrlSetSingleStyle obj style add</tt>).
listCtrlSetSingleStyle :: ListCtrl a -> Int -> Bool -> IO ()

-- | usage: (<tt>listCtrlSetTextColour obj col</tt>).
listCtrlSetTextColour :: ListCtrl a -> Color -> IO ()

-- | usage: (<tt>listCtrlSetWindowStyleFlag obj style</tt>).
listCtrlSetWindowStyleFlag :: ListCtrl a -> Int -> IO ()

-- | usage: (<tt>listCtrlSortItems obj fn eifobj</tt>).
listCtrlSortItems :: ListCtrl a -> Ptr b -> Ptr c -> IO Bool

-- | usage: (<tt>listCtrlSortItems2 obj closure</tt>).
listCtrlSortItems2 :: ListCtrl a -> Closure b -> IO Bool

-- | usage: (<tt>listCtrlUpdateStyle obj</tt>).
listCtrlUpdateStyle :: ListCtrl a -> IO ()

-- | usage: (<tt>listEventCancelled obj</tt>).
listEventCancelled :: ListEvent a -> IO Bool

-- | usage: (<tt>listEventGetCacheFrom obj</tt>).
listEventGetCacheFrom :: ListEvent a -> IO Int

-- | usage: (<tt>listEventGetCacheTo obj</tt>).
listEventGetCacheTo :: ListEvent a -> IO Int

-- | usage: (<tt>listEventGetCode obj</tt>).
listEventGetCode :: ListEvent a -> IO Int

-- | usage: (<tt>listEventGetColumn obj</tt>).
listEventGetColumn :: ListEvent a -> IO Int

-- | usage: (<tt>listEventGetData obj</tt>).
listEventGetData :: ListEvent a -> IO Int

-- | usage: (<tt>listEventGetImage obj</tt>).
listEventGetImage :: ListEvent a -> IO Int

-- | usage: (<tt>listEventGetIndex obj</tt>).
listEventGetIndex :: ListEvent a -> IO Int

-- | usage: (<tt>listEventGetItem obj</tt>).
listEventGetItem :: ListEvent a -> IO (ListItem ())

-- | usage: (<tt>listEventGetLabel obj</tt>).
listEventGetLabel :: ListEvent a -> IO (String)

-- | usage: (<tt>listEventGetMask obj</tt>).
listEventGetMask :: ListEvent a -> IO Int

-- | usage: (<tt>listEventGetPoint obj</tt>).
listEventGetPoint :: ListEvent a -> IO (Point)

-- | usage: (<tt>listEventGetText obj</tt>).
listEventGetText :: ListEvent a -> IO (String)

-- | usage: (<tt>listItemClear obj</tt>).
listItemClear :: ListItem a -> IO ()

-- | usage: (<tt>listItemClearAttributes obj</tt>).
listItemClearAttributes :: ListItem a -> IO ()

-- | usage: (<tt>listItemCreate</tt>).
listItemCreate :: IO (ListItem ())

-- | usage: (<tt>listItemDelete obj</tt>).
listItemDelete :: ListItem a -> IO ()

-- | usage: (<tt>listItemGetAlign obj</tt>).
listItemGetAlign :: ListItem a -> IO Int

-- | usage: (<tt>listItemGetAttributes obj</tt>).
listItemGetAttributes :: ListItem a -> IO (Ptr ())

-- | usage: (<tt>listItemGetBackgroundColour obj</tt>).
listItemGetBackgroundColour :: ListItem a -> IO (Color)

-- | usage: (<tt>listItemGetColumn obj</tt>).
listItemGetColumn :: ListItem a -> IO Int

-- | usage: (<tt>listItemGetData obj</tt>).
listItemGetData :: ListItem a -> IO Int

-- | usage: (<tt>listItemGetFont obj</tt>).
listItemGetFont :: ListItem a -> IO (Font ())

-- | usage: (<tt>listItemGetId obj</tt>).
listItemGetId :: ListItem a -> IO Int

-- | usage: (<tt>listItemGetImage obj</tt>).
listItemGetImage :: ListItem a -> IO Int

-- | usage: (<tt>listItemGetMask obj</tt>).
listItemGetMask :: ListItem a -> IO Int

-- | usage: (<tt>listItemGetState obj</tt>).
listItemGetState :: ListItem a -> IO Int

-- | usage: (<tt>listItemGetText obj</tt>).
listItemGetText :: ListItem a -> IO (String)

-- | usage: (<tt>listItemGetTextColour obj</tt>).
listItemGetTextColour :: ListItem a -> IO (Color)

-- | usage: (<tt>listItemGetWidth obj</tt>).
listItemGetWidth :: ListItem a -> IO Int

-- | usage: (<tt>listItemHasAttributes obj</tt>).
listItemHasAttributes :: ListItem a -> IO Bool

-- | usage: (<tt>listItemSetAlign obj align</tt>).
listItemSetAlign :: ListItem a -> Int -> IO ()

-- | usage: (<tt>listItemSetBackgroundColour obj colBack</tt>).
listItemSetBackgroundColour :: ListItem a -> Color -> IO ()

-- | usage: (<tt>listItemSetColumn obj col</tt>).
listItemSetColumn :: ListItem a -> Int -> IO ()

-- | usage: (<tt>listItemSetData obj wxdata</tt>).
listItemSetData :: ListItem a -> Int -> IO ()

-- | usage: (<tt>listItemSetDataPointer obj wxdata</tt>).
listItemSetDataPointer :: ListItem a -> Ptr b -> IO ()

-- | usage: (<tt>listItemSetFont obj font</tt>).
listItemSetFont :: ListItem a -> Font b -> IO ()

-- | usage: (<tt>listItemSetId obj id</tt>).
listItemSetId :: ListItem a -> Id -> IO ()

-- | usage: (<tt>listItemSetImage obj image</tt>).
listItemSetImage :: ListItem a -> Int -> IO ()

-- | usage: (<tt>listItemSetMask obj mask</tt>).
listItemSetMask :: ListItem a -> Int -> IO ()

-- | usage: (<tt>listItemSetState obj state</tt>).
listItemSetState :: ListItem a -> Int -> IO ()

-- | usage: (<tt>listItemSetStateMask obj stateMask</tt>).
listItemSetStateMask :: ListItem a -> Int -> IO ()

-- | usage: (<tt>listItemSetText obj text</tt>).
listItemSetText :: ListItem a -> String -> IO ()

-- | usage: (<tt>listItemSetTextColour obj colText</tt>).
listItemSetTextColour :: ListItem a -> Color -> IO ()

-- | usage: (<tt>listItemSetWidth obj width</tt>).
listItemSetWidth :: ListItem a -> Int -> IO ()

-- | usage: (<tt>localeAddCatalog obj szDomain</tt>).
localeAddCatalog :: Locale a -> Ptr b -> IO Int

-- | usage: (<tt>localeAddCatalogLookupPathPrefix obj prefix</tt>).
localeAddCatalogLookupPathPrefix :: Locale a -> Ptr b -> IO ()

-- | usage: (<tt>localeCreate name flags</tt>).
localeCreate :: Int -> Int -> IO (Locale ())

-- | usage: (<tt>localeDelete obj</tt>).
localeDelete :: Locale a -> IO ()

-- | usage: (<tt>localeGetLocale obj</tt>).
localeGetLocale :: Locale a -> IO (Locale ())

-- | usage: (<tt>localeGetName obj</tt>).
localeGetName :: Locale a -> IO (String)

-- | usage: (<tt>localeGetString obj szOrigString szDomain</tt>).
localeGetString :: Locale a -> Ptr b -> Ptr c -> IO String

-- | usage: (<tt>localeIsLoaded obj szDomain</tt>).
localeIsLoaded :: Locale a -> Ptr b -> IO Bool

-- | usage: (<tt>localeIsOk obj</tt>).
localeIsOk :: Locale a -> IO Bool

-- | usage: (<tt>logAddTraceMask obj str</tt>).
logAddTraceMask :: Log a -> String -> IO ()

-- | usage: (<tt>logDelete obj</tt>).
logDelete :: Log a -> IO ()

-- | usage: (<tt>logDontCreateOnDemand obj</tt>).
logDontCreateOnDemand :: Log a -> IO ()

-- | usage: (<tt>logFlush obj</tt>).
logFlush :: Log a -> IO ()

-- | usage: (<tt>logFlushActive obj</tt>).
logFlushActive :: Log a -> IO ()

-- | usage: (<tt>logGetActiveTarget</tt>).
logGetActiveTarget :: IO (Log ())

-- | usage: (<tt>logGetTimestamp obj</tt>).
logGetTimestamp :: Log a -> IO (Ptr CWchar)

-- | usage: (<tt>logGetTraceMask obj</tt>).
logGetTraceMask :: Log a -> IO Int

-- | usage: (<tt>logGetVerbose obj</tt>).
logGetVerbose :: Log a -> IO Int

-- | usage: (<tt>logHasPendingMessages obj</tt>).
logHasPendingMessages :: Log a -> IO Bool

-- | usage: (<tt>logIsAllowedTraceMask obj mask</tt>).
logIsAllowedTraceMask :: Log a -> Mask b -> IO Bool

-- | usage: (<tt>logOnLog obj level szString t</tt>).
logOnLog :: Log a -> Int -> String -> Int -> IO ()

-- | usage: (<tt>logRemoveTraceMask obj str</tt>).
logRemoveTraceMask :: Log a -> String -> IO ()

-- | usage: (<tt>logResume obj</tt>).
logResume :: Log a -> IO ()

-- | usage: (<tt>logSetActiveTarget pLogger</tt>).
logSetActiveTarget :: Log a -> IO (Log ())

-- | usage: (<tt>logSetTimestamp obj ts</tt>).
logSetTimestamp :: Log a -> String -> IO ()

-- | usage: (<tt>logSetVerbose obj bVerbose</tt>).
logSetVerbose :: Log a -> Bool -> IO ()

-- | usage: (<tt>logSuspend obj</tt>).
logSuspend :: Log a -> IO ()

-- | usage: (<tt>logChainCreate logger</tt>).
logChainCreate :: Log a -> IO (LogChain ())

-- | usage: (<tt>logChainDelete obj</tt>).
logChainDelete :: LogChain a -> IO ()

-- | usage: (<tt>logChainGetOldLog obj</tt>).
logChainGetOldLog :: LogChain a -> IO (Log ())

-- | usage: (<tt>logChainIsPassingMessages obj</tt>).
logChainIsPassingMessages :: LogChain a -> IO Bool

-- | usage: (<tt>logChainPassMessages obj bDoPass</tt>).
logChainPassMessages :: LogChain a -> Bool -> IO ()

-- | usage: (<tt>logChainSetLog obj logger</tt>).
logChainSetLog :: LogChain a -> Log b -> IO ()

-- | usage: (<tt>logNullCreate</tt>).
logNullCreate :: IO (LogNull ())

-- | usage: (<tt>logStderrCreate</tt>).
logStderrCreate :: IO (LogStderr ())

-- | usage: (<tt>logStderrCreateStdOut</tt>).
logStderrCreateStdOut :: IO (LogStderr ())

-- | usage: (<tt>logTextCtrlCreate text</tt>).
logTextCtrlCreate :: TextCtrl a -> IO (LogTextCtrl ())

-- | usage: (<tt>logWindowCreate parent title showit passthrough</tt>).
logWindowCreate :: Window a -> String -> Bool -> Bool -> IO (LogWindow ())

-- | usage: (<tt>logWindowGetFrame obj</tt>).
logWindowGetFrame :: LogWindow a -> IO (Frame ())


-- | Haskell class definitions for the wxWidgets C library
--   (<tt>wxc.dll</tt>).
--   
--   Do not edit this file manually! This file was automatically generated
--   by wxDirect.
--   
--   From the files:
--   
--   <ul>
--   <li><pre>wxc.h</pre></li>
--   </ul>
--   
--   And contains 2339 methods for 131 classes.
module Graphics.UI.WXCore.WxcClassesMZ

-- | usage: (<tt>nullAcceleratorTable</tt>).
nullAcceleratorTable :: AcceleratorTable ()

-- | usage: (<tt>nullBitmap</tt>).
nullBitmap :: Bitmap ()

-- | usage: (<tt>nullBrush</tt>).
nullBrush :: Brush ()

-- | usage: (<tt>nullColour</tt>).
nullColour :: Color

-- | usage: (<tt>nullCursor</tt>).
nullCursor :: Cursor ()

-- | usage: (<tt>nullFont</tt>).
nullFont :: Font ()

-- | usage: (<tt>nullIcon</tt>).
nullIcon :: Icon ()

-- | usage: (<tt>nullPalette</tt>).
nullPalette :: Palette ()

-- | usage: (<tt>nullPen</tt>).
nullPen :: Pen ()

-- | usage: (<tt>wxEVT_ACTIVATE</tt>).
wxEVT_ACTIVATE :: EventId

-- | usage: (<tt>wxEVT_ACTIVATE_APP</tt>).
wxEVT_ACTIVATE_APP :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_ALLOW_DND</tt>).
wxEVT_AUINOTEBOOK_ALLOW_DND :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_BEGIN_DRAG</tt>).
wxEVT_AUINOTEBOOK_BEGIN_DRAG :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_BG_DCLICK</tt>).
wxEVT_AUINOTEBOOK_BG_DCLICK :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_BUTTON</tt>).
wxEVT_AUINOTEBOOK_BUTTON :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_DRAG_DONE</tt>).
wxEVT_AUINOTEBOOK_DRAG_DONE :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_DRAG_MOTION</tt>).
wxEVT_AUINOTEBOOK_DRAG_MOTION :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_END_DRAG</tt>).
wxEVT_AUINOTEBOOK_END_DRAG :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_PAGE_CHANGED</tt>).
wxEVT_AUINOTEBOOK_PAGE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_PAGE_CHANGING</tt>).
wxEVT_AUINOTEBOOK_PAGE_CHANGING :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_PAGE_CLOSE</tt>).
wxEVT_AUINOTEBOOK_PAGE_CLOSE :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_PAGE_CLOSED</tt>).
wxEVT_AUINOTEBOOK_PAGE_CLOSED :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN</tt>).
wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP</tt>).
wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN</tt>).
wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN :: EventId

-- | usage: (<tt>wxEVT_AUINOTEBOOK_TAB_RIGHT_UP</tt>).
wxEVT_AUINOTEBOOK_TAB_RIGHT_UP :: EventId

-- | usage: (<tt>wxEVT_AUITOOLBAR_BEGIN_DRAG</tt>).
wxEVT_AUITOOLBAR_BEGIN_DRAG :: EventId

-- | usage: (<tt>wxEVT_AUITOOLBAR_MIDDLE_CLICK</tt>).
wxEVT_AUITOOLBAR_MIDDLE_CLICK :: EventId

-- | usage: (<tt>wxEVT_AUITOOLBAR_OVERFLOW_CLICK</tt>).
wxEVT_AUITOOLBAR_OVERFLOW_CLICK :: EventId

-- | usage: (<tt>wxEVT_AUITOOLBAR_RIGHT_CLICK</tt>).
wxEVT_AUITOOLBAR_RIGHT_CLICK :: EventId

-- | usage: (<tt>wxEVT_AUITOOLBAR_TOOL_DROPDOWN</tt>).
wxEVT_AUITOOLBAR_TOOL_DROPDOWN :: EventId

-- | usage: (<tt>wxEVT_AUI_FIND_MANAGER</tt>).
wxEVT_AUI_FIND_MANAGER :: EventId

-- | usage: (<tt>wxEVT_AUI_PANE_BUTTON</tt>).
wxEVT_AUI_PANE_BUTTON :: EventId

-- | usage: (<tt>wxEVT_AUI_PANE_CLOSE</tt>).
wxEVT_AUI_PANE_CLOSE :: EventId

-- | usage: (<tt>wxEVT_AUI_PANE_MAXIMIZE</tt>).
wxEVT_AUI_PANE_MAXIMIZE :: EventId

-- | usage: (<tt>wxEVT_AUI_PANE_RESTORE</tt>).
wxEVT_AUI_PANE_RESTORE :: EventId

-- | usage: (<tt>wxEVT_AUI_RENDER</tt>).
wxEVT_AUI_RENDER :: EventId

-- | usage: (<tt>wxEVT_AUX1_DCLICK</tt>).
wxEVT_AUX1_DCLICK :: EventId

-- | usage: (<tt>wxEVT_AUX1_DOWN</tt>).
wxEVT_AUX1_DOWN :: EventId

-- | usage: (<tt>wxEVT_AUX1_UP</tt>).
wxEVT_AUX1_UP :: EventId

-- | usage: (<tt>wxEVT_AUX2_DCLICK</tt>).
wxEVT_AUX2_DCLICK :: EventId

-- | usage: (<tt>wxEVT_AUX2_DOWN</tt>).
wxEVT_AUX2_DOWN :: EventId

-- | usage: (<tt>wxEVT_AUX2_UP</tt>).
wxEVT_AUX2_UP :: EventId

-- | usage: (<tt>wxEVT_CALCULATE_LAYOUT</tt>).
wxEVT_CALCULATE_LAYOUT :: EventId

-- | usage: (<tt>wxEVT_CALENDAR_DAY_CHANGED</tt>).
wxEVT_CALENDAR_DAY_CHANGED :: EventId

-- | usage: (<tt>wxEVT_CALENDAR_DOUBLECLICKED</tt>).
wxEVT_CALENDAR_DOUBLECLICKED :: EventId

-- | usage: (<tt>wxEVT_CALENDAR_MONTH_CHANGED</tt>).
wxEVT_CALENDAR_MONTH_CHANGED :: EventId

-- | usage: (<tt>wxEVT_CALENDAR_PAGE_CHANGED</tt>).
wxEVT_CALENDAR_PAGE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_CALENDAR_SEL_CHANGED</tt>).
wxEVT_CALENDAR_SEL_CHANGED :: EventId

-- | usage: (<tt>wxEVT_CALENDAR_WEEKDAY_CLICKED</tt>).
wxEVT_CALENDAR_WEEKDAY_CLICKED :: EventId

-- | usage: (<tt>wxEVT_CALENDAR_WEEK_CLICKED</tt>).
wxEVT_CALENDAR_WEEK_CLICKED :: EventId

-- | usage: (<tt>wxEVT_CALENDAR_YEAR_CHANGED</tt>).
wxEVT_CALENDAR_YEAR_CHANGED :: EventId

-- | usage: (<tt>wxEVT_CHAR</tt>).
wxEVT_CHAR :: EventId

-- | usage: (<tt>wxEVT_CHAR_HOOK</tt>).
wxEVT_CHAR_HOOK :: EventId

-- | usage: (<tt>wxEVT_CHILD_FOCUS</tt>).
wxEVT_CHILD_FOCUS :: EventId

-- | usage: (<tt>wxEVT_CLIPBOARD_CHANGED</tt>).
wxEVT_CLIPBOARD_CHANGED :: EventId

-- | usage: (<tt>wxEVT_CLOSE_WINDOW</tt>).
wxEVT_CLOSE_WINDOW :: EventId

-- | usage: (<tt>wxEVT_COMMAND_BUTTON_CLICKED</tt>).
wxEVT_COMMAND_BUTTON_CLICKED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_CHECKBOX_CLICKED</tt>).
wxEVT_COMMAND_CHECKBOX_CLICKED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_CHECKLISTBOX_TOGGLED</tt>).
wxEVT_COMMAND_CHECKLISTBOX_TOGGLED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED</tt>).
wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING</tt>).
wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_CHOICE_SELECTED</tt>).
wxEVT_COMMAND_CHOICE_SELECTED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_COLLPANE_CHANGED</tt>).
wxEVT_COMMAND_COLLPANE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_COLOURPICKER_CHANGED</tt>).
wxEVT_COMMAND_COLOURPICKER_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_COMBOBOX_CLOSEUP</tt>).
wxEVT_COMMAND_COMBOBOX_CLOSEUP :: EventId

-- | usage: (<tt>wxEVT_COMMAND_COMBOBOX_DROPDOWN</tt>).
wxEVT_COMMAND_COMBOBOX_DROPDOWN :: EventId

-- | usage: (<tt>wxEVT_COMMAND_COMBOBOX_SELECTED</tt>).
wxEVT_COMMAND_COMBOBOX_SELECTED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_CACHE_HINT</tt>).
wxEVT_COMMAND_DATAVIEW_CACHE_HINT :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK</tt>).
wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK</tt>).
wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED</tt>).
wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED</tt>).
wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED</tt>).
wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG</tt>).
wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED</tt>).
wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING</tt>).
wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU</tt>).
wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_ITEM_DROP</tt>).
wxEVT_COMMAND_DATAVIEW_ITEM_DROP :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE</tt>).
wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE</tt>).
wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED</tt>).
wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED</tt>).
wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING</tt>).
wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING</tt>).
wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED</tt>).
wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED</tt>).
wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_DIRPICKER_CHANGED</tt>).
wxEVT_COMMAND_DIRPICKER_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_ENTER</tt>).
wxEVT_COMMAND_ENTER :: EventId

-- | usage: (<tt>wxEVT_COMMAND_FILEPICKER_CHANGED</tt>).
wxEVT_COMMAND_FILEPICKER_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_FIND</tt>).
wxEVT_COMMAND_FIND :: EventId

-- | usage: (<tt>wxEVT_COMMAND_FIND_CLOSE</tt>).
wxEVT_COMMAND_FIND_CLOSE :: EventId

-- | usage: (<tt>wxEVT_COMMAND_FIND_NEXT</tt>).
wxEVT_COMMAND_FIND_NEXT :: EventId

-- | usage: (<tt>wxEVT_COMMAND_FIND_REPLACE</tt>).
wxEVT_COMMAND_FIND_REPLACE :: EventId

-- | usage: (<tt>wxEVT_COMMAND_FIND_REPLACE_ALL</tt>).
wxEVT_COMMAND_FIND_REPLACE_ALL :: EventId

-- | usage: (<tt>wxEVT_COMMAND_FONTPICKER_CHANGED</tt>).
wxEVT_COMMAND_FONTPICKER_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HEADER_BEGIN_REORDER</tt>).
wxEVT_COMMAND_HEADER_BEGIN_REORDER :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HEADER_BEGIN_RESIZE</tt>).
wxEVT_COMMAND_HEADER_BEGIN_RESIZE :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HEADER_CLICK</tt>).
wxEVT_COMMAND_HEADER_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HEADER_DCLICK</tt>).
wxEVT_COMMAND_HEADER_DCLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HEADER_DRAGGING_CANCELLED</tt>).
wxEVT_COMMAND_HEADER_DRAGGING_CANCELLED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HEADER_END_REORDER</tt>).
wxEVT_COMMAND_HEADER_END_REORDER :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HEADER_END_RESIZE</tt>).
wxEVT_COMMAND_HEADER_END_RESIZE :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HEADER_MIDDLE_CLICK</tt>).
wxEVT_COMMAND_HEADER_MIDDLE_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HEADER_MIDDLE_DCLICK</tt>).
wxEVT_COMMAND_HEADER_MIDDLE_DCLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HEADER_RESIZING</tt>).
wxEVT_COMMAND_HEADER_RESIZING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HEADER_RIGHT_CLICK</tt>).
wxEVT_COMMAND_HEADER_RIGHT_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HEADER_RIGHT_DCLICK</tt>).
wxEVT_COMMAND_HEADER_RIGHT_DCLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HEADER_SEPARATOR_DCLICK</tt>).
wxEVT_COMMAND_HEADER_SEPARATOR_DCLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HTML_CELL_CLICKED</tt>).
wxEVT_COMMAND_HTML_CELL_CLICKED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HTML_CELL_HOVER</tt>).
wxEVT_COMMAND_HTML_CELL_HOVER :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HTML_LINK_CLICKED</tt>).
wxEVT_COMMAND_HTML_LINK_CLICKED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_HYPERLINK</tt>).
wxEVT_COMMAND_HYPERLINK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_KILL_FOCUS</tt>).
wxEVT_COMMAND_KILL_FOCUS :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LEFT_CLICK</tt>).
wxEVT_COMMAND_LEFT_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LEFT_DCLICK</tt>).
wxEVT_COMMAND_LEFT_DCLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED</tt>).
wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING</tt>).
wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LISTBOX_DOUBLECLICKED</tt>).
wxEVT_COMMAND_LISTBOX_DOUBLECLICKED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LISTBOX_SELECTED</tt>).
wxEVT_COMMAND_LISTBOX_SELECTED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_BEGIN_DRAG</tt>).
wxEVT_COMMAND_LIST_BEGIN_DRAG :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT</tt>).
wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_BEGIN_RDRAG</tt>).
wxEVT_COMMAND_LIST_BEGIN_RDRAG :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_CACHE_HINT</tt>).
wxEVT_COMMAND_LIST_CACHE_HINT :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_COL_BEGIN_DRAG</tt>).
wxEVT_COMMAND_LIST_COL_BEGIN_DRAG :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_COL_CLICK</tt>).
wxEVT_COMMAND_LIST_COL_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_COL_DRAGGING</tt>).
wxEVT_COMMAND_LIST_COL_DRAGGING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_COL_END_DRAG</tt>).
wxEVT_COMMAND_LIST_COL_END_DRAG :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_COL_RIGHT_CLICK</tt>).
wxEVT_COMMAND_LIST_COL_RIGHT_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS</tt>).
wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_DELETE_ITEM</tt>).
wxEVT_COMMAND_LIST_DELETE_ITEM :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_END_LABEL_EDIT</tt>).
wxEVT_COMMAND_LIST_END_LABEL_EDIT :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_INSERT_ITEM</tt>).
wxEVT_COMMAND_LIST_INSERT_ITEM :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_ITEM_ACTIVATED</tt>).
wxEVT_COMMAND_LIST_ITEM_ACTIVATED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_ITEM_DESELECTED</tt>).
wxEVT_COMMAND_LIST_ITEM_DESELECTED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_ITEM_FOCUSED</tt>).
wxEVT_COMMAND_LIST_ITEM_FOCUSED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK</tt>).
wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK</tt>).
wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_ITEM_SELECTED</tt>).
wxEVT_COMMAND_LIST_ITEM_SELECTED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_LIST_KEY_DOWN</tt>).
wxEVT_COMMAND_LIST_KEY_DOWN :: EventId

-- | usage: (<tt>wxEVT_COMMAND_MENU_SELECTED</tt>).
wxEVT_COMMAND_MENU_SELECTED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED</tt>).
wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING</tt>).
wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RADIOBOX_SELECTED</tt>).
wxEVT_COMMAND_RADIOBOX_SELECTED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RADIOBUTTON_SELECTED</tt>).
wxEVT_COMMAND_RADIOBUTTON_SELECTED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGED</tt>).
wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGING</tt>).
wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN</tt>).
wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP</tt>).
wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN</tt>).
wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP</tt>).
wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RIBBONBUTTON_CLICKED</tt>).
wxEVT_COMMAND_RIBBONBUTTON_CLICKED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED</tt>).
wxEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED</tt>).
wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RIBBONGALLERY_SELECTED</tt>).
wxEVT_COMMAND_RIBBONGALLERY_SELECTED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RIBBONTOOL_CLICKED</tt>).
wxEVT_COMMAND_RIBBONTOOL_CLICKED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED</tt>).
wxEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_BUFFER_RESET</tt>).
wxEVT_COMMAND_RICHTEXT_BUFFER_RESET :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_CHARACTER</tt>).
wxEVT_COMMAND_RICHTEXT_CHARACTER :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED</tt>).
wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED</tt>).
wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_DELETE</tt>).
wxEVT_COMMAND_RICHTEXT_DELETE :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_LEFT_CLICK</tt>).
wxEVT_COMMAND_RICHTEXT_LEFT_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK</tt>).
wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK</tt>).
wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_RETURN</tt>).
wxEVT_COMMAND_RICHTEXT_RETURN :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK</tt>).
wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED</tt>).
wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED</tt>).
wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING</tt>).
wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED</tt>).
wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING</tt>).
wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED</tt>).
wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RIGHT_CLICK</tt>).
wxEVT_COMMAND_RIGHT_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_RIGHT_DCLICK</tt>).
wxEVT_COMMAND_RIGHT_DCLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN</tt>).
wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN :: EventId

-- | usage: (<tt>wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN</tt>).
wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN :: EventId

-- | usage: (<tt>wxEVT_COMMAND_SET_FOCUS</tt>).
wxEVT_COMMAND_SET_FOCUS :: EventId

-- | usage: (<tt>wxEVT_COMMAND_SLIDER_UPDATED</tt>).
wxEVT_COMMAND_SLIDER_UPDATED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED</tt>).
wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_SPINCTRL_UPDATED</tt>).
wxEVT_COMMAND_SPINCTRL_UPDATED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_SPLITTER_DOUBLECLICKED</tt>).
wxEVT_COMMAND_SPLITTER_DOUBLECLICKED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED</tt>).
wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING</tt>).
wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_SPLITTER_UNSPLIT</tt>).
wxEVT_COMMAND_SPLITTER_UNSPLIT :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TEXT_COPY</tt>).
wxEVT_COMMAND_TEXT_COPY :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TEXT_CUT</tt>).
wxEVT_COMMAND_TEXT_CUT :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TEXT_ENTER</tt>).
wxEVT_COMMAND_TEXT_ENTER :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TEXT_MAXLEN</tt>).
wxEVT_COMMAND_TEXT_MAXLEN :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TEXT_PASTE</tt>).
wxEVT_COMMAND_TEXT_PASTE :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TEXT_UPDATED</tt>).
wxEVT_COMMAND_TEXT_UPDATED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TEXT_URL</tt>).
wxEVT_COMMAND_TEXT_URL :: EventId

-- | usage: (<tt>wxEVT_COMMAND_THREAD</tt>).
wxEVT_COMMAND_THREAD :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TOGGLEBUTTON_CLICKED</tt>).
wxEVT_COMMAND_TOGGLEBUTTON_CLICKED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED</tt>).
wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING</tt>).
wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TOOL_CLICKED</tt>).
wxEVT_COMMAND_TOOL_CLICKED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED</tt>).
wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TOOL_ENTER</tt>).
wxEVT_COMMAND_TOOL_ENTER :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TOOL_RCLICKED</tt>).
wxEVT_COMMAND_TOOL_RCLICKED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED</tt>).
wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED</tt>).
wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED</tt>).
wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING</tt>).
wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_BEGIN_DRAG</tt>).
wxEVT_COMMAND_TREE_BEGIN_DRAG :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT</tt>).
wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_BEGIN_RDRAG</tt>).
wxEVT_COMMAND_TREE_BEGIN_RDRAG :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_DELETE_ITEM</tt>).
wxEVT_COMMAND_TREE_DELETE_ITEM :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_END_DRAG</tt>).
wxEVT_COMMAND_TREE_END_DRAG :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_END_LABEL_EDIT</tt>).
wxEVT_COMMAND_TREE_END_LABEL_EDIT :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_GET_INFO</tt>).
wxEVT_COMMAND_TREE_GET_INFO :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_ITEM_ACTIVATED</tt>).
wxEVT_COMMAND_TREE_ITEM_ACTIVATED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_ITEM_COLLAPSED</tt>).
wxEVT_COMMAND_TREE_ITEM_COLLAPSED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_ITEM_COLLAPSING</tt>).
wxEVT_COMMAND_TREE_ITEM_COLLAPSING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_ITEM_EXPANDED</tt>).
wxEVT_COMMAND_TREE_ITEM_EXPANDED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_ITEM_EXPANDING</tt>).
wxEVT_COMMAND_TREE_ITEM_EXPANDING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP</tt>).
wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_ITEM_MENU</tt>).
wxEVT_COMMAND_TREE_ITEM_MENU :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK</tt>).
wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK</tt>).
wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_KEY_DOWN</tt>).
wxEVT_COMMAND_TREE_KEY_DOWN :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_SEL_CHANGED</tt>).
wxEVT_COMMAND_TREE_SEL_CHANGED :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_SEL_CHANGING</tt>).
wxEVT_COMMAND_TREE_SEL_CHANGING :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_SET_INFO</tt>).
wxEVT_COMMAND_TREE_SET_INFO :: EventId

-- | usage: (<tt>wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK</tt>).
wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK :: EventId

-- | usage: (<tt>wxEVT_COMMAND_VLBOX_SELECTED</tt>).
wxEVT_COMMAND_VLBOX_SELECTED :: EventId

-- | usage: (<tt>wxEVT_CONTEXT_MENU</tt>).
wxEVT_CONTEXT_MENU :: EventId

-- | usage: (<tt>wxEVT_CREATE</tt>).
wxEVT_CREATE :: EventId

-- | usage: (<tt>wxEVT_DATE_CHANGED</tt>).
wxEVT_DATE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_DELETE</tt>).
wxEVT_DELETE :: EventId

-- | usage: (<tt>wxEVT_DESTROY</tt>).
wxEVT_DESTROY :: EventId

-- | usage: (<tt>wxEVT_DETAILED_HELP</tt>).
wxEVT_DETAILED_HELP :: EventId

-- | usage: (<tt>wxEVT_DISPLAY_CHANGED</tt>).
wxEVT_DISPLAY_CHANGED :: EventId

-- | usage: (<tt>wxEVT_DROP_FILES</tt>).
wxEVT_DROP_FILES :: EventId

-- | usage: (<tt>wxEVT_END_PROCESS</tt>).
wxEVT_END_PROCESS :: EventId

-- | usage: (<tt>wxEVT_END_SESSION</tt>).
wxEVT_END_SESSION :: EventId

-- | usage: (<tt>wxEVT_ENTER_WINDOW</tt>).
wxEVT_ENTER_WINDOW :: EventId

-- | usage: (<tt>wxEVT_ERASE_BACKGROUND</tt>).
wxEVT_ERASE_BACKGROUND :: EventId

-- | usage: (<tt>wxEVT_FILECTRL_FILEACTIVATED</tt>).
wxEVT_FILECTRL_FILEACTIVATED :: EventId

-- | usage: (<tt>wxEVT_FILECTRL_FILTERCHANGED</tt>).
wxEVT_FILECTRL_FILTERCHANGED :: EventId

-- | usage: (<tt>wxEVT_FILECTRL_FOLDERCHANGED</tt>).
wxEVT_FILECTRL_FOLDERCHANGED :: EventId

-- | usage: (<tt>wxEVT_FILECTRL_SELECTIONCHANGED</tt>).
wxEVT_FILECTRL_SELECTIONCHANGED :: EventId

-- | usage: (<tt>wxEVT_FSWATCHER</tt>).
wxEVT_FSWATCHER :: EventId

-- | usage: (<tt>wxEVT_GRID_CELL_BEGIN_DRAG</tt>).
wxEVT_GRID_CELL_BEGIN_DRAG :: EventId

-- | usage: (<tt>wxEVT_GRID_CELL_CHANGED</tt>).
wxEVT_GRID_CELL_CHANGED :: EventId

-- | usage: (<tt>wxEVT_GRID_CELL_CHANGING</tt>).
wxEVT_GRID_CELL_CHANGING :: EventId

-- | usage: (<tt>wxEVT_GRID_CELL_LEFT_CLICK</tt>).
wxEVT_GRID_CELL_LEFT_CLICK :: EventId

-- | usage: (<tt>wxEVT_GRID_CELL_LEFT_DCLICK</tt>).
wxEVT_GRID_CELL_LEFT_DCLICK :: EventId

-- | usage: (<tt>wxEVT_GRID_CELL_RIGHT_CLICK</tt>).
wxEVT_GRID_CELL_RIGHT_CLICK :: EventId

-- | usage: (<tt>wxEVT_GRID_CELL_RIGHT_DCLICK</tt>).
wxEVT_GRID_CELL_RIGHT_DCLICK :: EventId

-- | usage: (<tt>wxEVT_GRID_COL_MOVE</tt>).
wxEVT_GRID_COL_MOVE :: EventId

-- | usage: (<tt>wxEVT_GRID_COL_SIZE</tt>).
wxEVT_GRID_COL_SIZE :: EventId

-- | usage: (<tt>wxEVT_GRID_COL_SORT</tt>).
wxEVT_GRID_COL_SORT :: EventId

-- | usage: (<tt>wxEVT_GRID_EDITOR_CREATED</tt>).
wxEVT_GRID_EDITOR_CREATED :: EventId

-- | usage: (<tt>wxEVT_GRID_EDITOR_HIDDEN</tt>).
wxEVT_GRID_EDITOR_HIDDEN :: EventId

-- | usage: (<tt>wxEVT_GRID_EDITOR_SHOWN</tt>).
wxEVT_GRID_EDITOR_SHOWN :: EventId

-- | usage: (<tt>wxEVT_GRID_LABEL_LEFT_CLICK</tt>).
wxEVT_GRID_LABEL_LEFT_CLICK :: EventId

-- | usage: (<tt>wxEVT_GRID_LABEL_LEFT_DCLICK</tt>).
wxEVT_GRID_LABEL_LEFT_DCLICK :: EventId

-- | usage: (<tt>wxEVT_GRID_LABEL_RIGHT_CLICK</tt>).
wxEVT_GRID_LABEL_RIGHT_CLICK :: EventId

-- | usage: (<tt>wxEVT_GRID_LABEL_RIGHT_DCLICK</tt>).
wxEVT_GRID_LABEL_RIGHT_DCLICK :: EventId

-- | usage: (<tt>wxEVT_GRID_RANGE_SELECT</tt>).
wxEVT_GRID_RANGE_SELECT :: EventId

-- | usage: (<tt>wxEVT_GRID_ROW_SIZE</tt>).
wxEVT_GRID_ROW_SIZE :: EventId

-- | usage: (<tt>wxEVT_GRID_SELECT_CELL</tt>).
wxEVT_GRID_SELECT_CELL :: EventId

-- | usage: (<tt>wxEVT_HELP</tt>).
wxEVT_HELP :: EventId

-- | usage: (<tt>wxEVT_HIBERNATE</tt>).
wxEVT_HIBERNATE :: EventId

-- | usage: (<tt>wxEVT_HOTKEY</tt>).
wxEVT_HOTKEY :: EventId

-- | usage: (<tt>wxEVT_HTML_CELL_CLICKED</tt>).
wxEVT_HTML_CELL_CLICKED :: EventId

-- | usage: (<tt>wxEVT_HTML_CELL_MOUSE_HOVER</tt>).
wxEVT_HTML_CELL_MOUSE_HOVER :: EventId

-- | usage: (<tt>wxEVT_HTML_LINK_CLICKED</tt>).
wxEVT_HTML_LINK_CLICKED :: EventId

-- | usage: (<tt>wxEVT_HTML_SET_TITLE</tt>).
wxEVT_HTML_SET_TITLE :: EventId

-- | usage: (<tt>wxEVT_ICONIZE</tt>).
wxEVT_ICONIZE :: EventId

-- | usage: (<tt>wxEVT_IDLE</tt>).
wxEVT_IDLE :: EventId

-- | usage: (<tt>wxEVT_INIT_DIALOG</tt>).
wxEVT_INIT_DIALOG :: EventId

-- | usage: (<tt>wxEVT_INPUT_SINK</tt>).
wxEVT_INPUT_SINK :: EventId

-- | usage: (<tt>wxEVT_KEY_DOWN</tt>).
wxEVT_KEY_DOWN :: EventId

-- | usage: (<tt>wxEVT_KEY_UP</tt>).
wxEVT_KEY_UP :: EventId

-- | usage: (<tt>wxEVT_KILL_FOCUS</tt>).
wxEVT_KILL_FOCUS :: EventId

-- | usage: (<tt>wxEVT_LEAVE_WINDOW</tt>).
wxEVT_LEAVE_WINDOW :: EventId

-- | usage: (<tt>wxEVT_LEFT_DCLICK</tt>).
wxEVT_LEFT_DCLICK :: EventId

-- | usage: (<tt>wxEVT_LEFT_DOWN</tt>).
wxEVT_LEFT_DOWN :: EventId

-- | usage: (<tt>wxEVT_LEFT_UP</tt>).
wxEVT_LEFT_UP :: EventId

-- | usage: (<tt>wxEVT_MAXIMIZE</tt>).
wxEVT_MAXIMIZE :: EventId

-- | usage: (<tt>wxEVT_MENU_CLOSE</tt>).
wxEVT_MENU_CLOSE :: EventId

-- | usage: (<tt>wxEVT_MENU_HIGHLIGHT</tt>).
wxEVT_MENU_HIGHLIGHT :: EventId

-- | usage: (<tt>wxEVT_MENU_OPEN</tt>).
wxEVT_MENU_OPEN :: EventId

-- | usage: (<tt>wxEVT_MIDDLE_DCLICK</tt>).
wxEVT_MIDDLE_DCLICK :: EventId

-- | usage: (<tt>wxEVT_MIDDLE_DOWN</tt>).
wxEVT_MIDDLE_DOWN :: EventId

-- | usage: (<tt>wxEVT_MIDDLE_UP</tt>).
wxEVT_MIDDLE_UP :: EventId

-- | usage: (<tt>wxEVT_MOTION</tt>).
wxEVT_MOTION :: EventId

-- | usage: (<tt>wxEVT_MOUSEWHEEL</tt>).
wxEVT_MOUSEWHEEL :: EventId

-- | usage: (<tt>wxEVT_MOUSE_CAPTURE_CHANGED</tt>).
wxEVT_MOUSE_CAPTURE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_MOUSE_CAPTURE_LOST</tt>).
wxEVT_MOUSE_CAPTURE_LOST :: EventId

-- | usage: (<tt>wxEVT_MOVE</tt>).
wxEVT_MOVE :: EventId

-- | usage: (<tt>wxEVT_MOVE_END</tt>).
wxEVT_MOVE_END :: EventId

-- | usage: (<tt>wxEVT_MOVE_START</tt>).
wxEVT_MOVE_START :: EventId

-- | usage: (<tt>wxEVT_MOVING</tt>).
wxEVT_MOVING :: EventId

-- | usage: (<tt>wxEVT_NAVIGATION_KEY</tt>).
wxEVT_NAVIGATION_KEY :: EventId

-- | usage: (<tt>wxEVT_NC_PAINT</tt>).
wxEVT_NC_PAINT :: EventId

-- | usage: (<tt>wxEVT_PAINT</tt>).
wxEVT_PAINT :: EventId

-- | usage: (<tt>wxEVT_PALETTE_CHANGED</tt>).
wxEVT_PALETTE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_PG_CHANGED</tt>).
wxEVT_PG_CHANGED :: EventId

-- | usage: (<tt>wxEVT_PG_CHANGING</tt>).
wxEVT_PG_CHANGING :: EventId

-- | usage: (<tt>wxEVT_PG_DOUBLE_CLICK</tt>).
wxEVT_PG_DOUBLE_CLICK :: EventId

-- | usage: (<tt>wxEVT_PG_HIGHLIGHTED</tt>).
wxEVT_PG_HIGHLIGHTED :: EventId

-- | usage: (<tt>wxEVT_PG_ITEM_COLLAPSED</tt>).
wxEVT_PG_ITEM_COLLAPSED :: EventId

-- | usage: (<tt>wxEVT_PG_ITEM_EXPANDED</tt>).
wxEVT_PG_ITEM_EXPANDED :: EventId

-- | usage: (<tt>wxEVT_PG_PAGE_CHANGED</tt>).
wxEVT_PG_PAGE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_PG_RIGHT_CLICK</tt>).
wxEVT_PG_RIGHT_CLICK :: EventId

-- | usage: (<tt>wxEVT_PG_SELECTED</tt>).
wxEVT_PG_SELECTED :: EventId

-- | usage: (<tt>wxEVT_POWER_RESUME</tt>).
wxEVT_POWER_RESUME :: EventId

-- | usage: (<tt>wxEVT_POWER_SUSPENDED</tt>).
wxEVT_POWER_SUSPENDED :: EventId

-- | usage: (<tt>wxEVT_POWER_SUSPENDING</tt>).
wxEVT_POWER_SUSPENDING :: EventId

-- | usage: (<tt>wxEVT_POWER_SUSPEND_CANCEL</tt>).
wxEVT_POWER_SUSPEND_CANCEL :: EventId

-- | usage: (<tt>wxEVT_PRINT_BEGIN</tt>).
wxEVT_PRINT_BEGIN :: EventId

-- | usage: (<tt>wxEVT_PRINT_BEGIN_DOC</tt>).
wxEVT_PRINT_BEGIN_DOC :: EventId

-- | usage: (<tt>wxEVT_PRINT_END</tt>).
wxEVT_PRINT_END :: EventId

-- | usage: (<tt>wxEVT_PRINT_END_DOC</tt>).
wxEVT_PRINT_END_DOC :: EventId

-- | usage: (<tt>wxEVT_PRINT_PAGE</tt>).
wxEVT_PRINT_PAGE :: EventId

-- | usage: (<tt>wxEVT_PRINT_PREPARE</tt>).
wxEVT_PRINT_PREPARE :: EventId

-- | usage: (<tt>wxEVT_QUERY_END_SESSION</tt>).
wxEVT_QUERY_END_SESSION :: EventId

-- | usage: (<tt>wxEVT_QUERY_LAYOUT_INFO</tt>).
wxEVT_QUERY_LAYOUT_INFO :: EventId

-- | usage: (<tt>wxEVT_QUERY_NEW_PALETTE</tt>).
wxEVT_QUERY_NEW_PALETTE :: EventId

-- | usage: (<tt>wxEVT_RIGHT_DCLICK</tt>).
wxEVT_RIGHT_DCLICK :: EventId

-- | usage: (<tt>wxEVT_RIGHT_DOWN</tt>).
wxEVT_RIGHT_DOWN :: EventId

-- | usage: (<tt>wxEVT_RIGHT_UP</tt>).
wxEVT_RIGHT_UP :: EventId

-- | usage: (<tt>wxEVT_SASH_DRAGGED</tt>).
wxEVT_SASH_DRAGGED :: EventId

-- | usage: (<tt>wxEVT_SCROLLWIN_BOTTOM</tt>).
wxEVT_SCROLLWIN_BOTTOM :: EventId

-- | usage: (<tt>wxEVT_SCROLLWIN_LINEDOWN</tt>).
wxEVT_SCROLLWIN_LINEDOWN :: EventId

-- | usage: (<tt>wxEVT_SCROLLWIN_LINEUP</tt>).
wxEVT_SCROLLWIN_LINEUP :: EventId

-- | usage: (<tt>wxEVT_SCROLLWIN_PAGEDOWN</tt>).
wxEVT_SCROLLWIN_PAGEDOWN :: EventId

-- | usage: (<tt>wxEVT_SCROLLWIN_PAGEUP</tt>).
wxEVT_SCROLLWIN_PAGEUP :: EventId

-- | usage: (<tt>wxEVT_SCROLLWIN_THUMBRELEASE</tt>).
wxEVT_SCROLLWIN_THUMBRELEASE :: EventId

-- | usage: (<tt>wxEVT_SCROLLWIN_THUMBTRACK</tt>).
wxEVT_SCROLLWIN_THUMBTRACK :: EventId

-- | usage: (<tt>wxEVT_SCROLLWIN_TOP</tt>).
wxEVT_SCROLLWIN_TOP :: EventId

-- | usage: (<tt>wxEVT_SCROLL_BOTTOM</tt>).
wxEVT_SCROLL_BOTTOM :: EventId

-- | usage: (<tt>wxEVT_SCROLL_CHANGED</tt>).
wxEVT_SCROLL_CHANGED :: EventId

-- | usage: (<tt>wxEVT_SCROLL_LINEDOWN</tt>).
wxEVT_SCROLL_LINEDOWN :: EventId

-- | usage: (<tt>wxEVT_SCROLL_LINEUP</tt>).
wxEVT_SCROLL_LINEUP :: EventId

-- | usage: (<tt>wxEVT_SCROLL_PAGEDOWN</tt>).
wxEVT_SCROLL_PAGEDOWN :: EventId

-- | usage: (<tt>wxEVT_SCROLL_PAGEUP</tt>).
wxEVT_SCROLL_PAGEUP :: EventId

-- | usage: (<tt>wxEVT_SCROLL_THUMBRELEASE</tt>).
wxEVT_SCROLL_THUMBRELEASE :: EventId

-- | usage: (<tt>wxEVT_SCROLL_THUMBTRACK</tt>).
wxEVT_SCROLL_THUMBTRACK :: EventId

-- | usage: (<tt>wxEVT_SCROLL_TOP</tt>).
wxEVT_SCROLL_TOP :: EventId

-- | usage: (<tt>wxEVT_SET_CURSOR</tt>).
wxEVT_SET_CURSOR :: EventId

-- | usage: (<tt>wxEVT_SET_FOCUS</tt>).
wxEVT_SET_FOCUS :: EventId

-- | usage: (<tt>wxEVT_SHOW</tt>).
wxEVT_SHOW :: EventId

-- | usage: (<tt>wxEVT_SIZE</tt>).
wxEVT_SIZE :: EventId

-- | usage: (<tt>wxEVT_SIZING</tt>).
wxEVT_SIZING :: EventId

-- | usage: (<tt>wxEVT_SOCKET</tt>).
wxEVT_SOCKET :: EventId

-- | usage: (<tt>wxEVT_SORT</tt>).
wxEVT_SORT :: EventId

-- | usage: (<tt>wxEVT_SPIN</tt>).
wxEVT_SPIN :: EventId

-- | usage: (<tt>wxEVT_SPIN_DOWN</tt>).
wxEVT_SPIN_DOWN :: EventId

-- | usage: (<tt>wxEVT_SPIN_UP</tt>).
wxEVT_SPIN_UP :: EventId

-- | usage: (<tt>wxEVT_STC_AUTOCOMP_SELECTION</tt>).
wxEVT_STC_AUTOCOMP_SELECTION :: EventId

-- | usage: (<tt>wxEVT_STC_CALLTIP_CLICK</tt>).
wxEVT_STC_CALLTIP_CLICK :: EventId

-- | usage: (<tt>wxEVT_STC_CHANGE</tt>).
wxEVT_STC_CHANGE :: EventId

-- | usage: (<tt>wxEVT_STC_CHARADDED</tt>).
wxEVT_STC_CHARADDED :: EventId

-- | usage: (<tt>wxEVT_STC_DOUBLECLICK</tt>).
wxEVT_STC_DOUBLECLICK :: EventId

-- | usage: (<tt>wxEVT_STC_DO_DROP</tt>).
wxEVT_STC_DO_DROP :: EventId

-- | usage: (<tt>wxEVT_STC_DRAG_OVER</tt>).
wxEVT_STC_DRAG_OVER :: EventId

-- | usage: (<tt>wxEVT_STC_DWELLEND</tt>).
wxEVT_STC_DWELLEND :: EventId

-- | usage: (<tt>wxEVT_STC_DWELLSTART</tt>).
wxEVT_STC_DWELLSTART :: EventId

-- | usage: (<tt>wxEVT_STC_HOTSPOT_CLICK</tt>).
wxEVT_STC_HOTSPOT_CLICK :: EventId

-- | usage: (<tt>wxEVT_STC_HOTSPOT_DCLICK</tt>).
wxEVT_STC_HOTSPOT_DCLICK :: EventId

-- | usage: (<tt>wxEVT_STC_KEY</tt>).
wxEVT_STC_KEY :: EventId

-- | usage: (<tt>wxEVT_STC_MACRORECORD</tt>).
wxEVT_STC_MACRORECORD :: EventId

-- | usage: (<tt>wxEVT_STC_MARGINCLICK</tt>).
wxEVT_STC_MARGINCLICK :: EventId

-- | usage: (<tt>wxEVT_STC_MODIFIED</tt>).
wxEVT_STC_MODIFIED :: EventId

-- | usage: (<tt>wxEVT_STC_NEEDSHOWN</tt>).
wxEVT_STC_NEEDSHOWN :: EventId

-- | usage: (<tt>wxEVT_STC_PAINTED</tt>).
wxEVT_STC_PAINTED :: EventId

-- | usage: (<tt>wxEVT_STC_ROMODIFYATTEMPT</tt>).
wxEVT_STC_ROMODIFYATTEMPT :: EventId

-- | usage: (<tt>wxEVT_STC_SAVEPOINTLEFT</tt>).
wxEVT_STC_SAVEPOINTLEFT :: EventId

-- | usage: (<tt>wxEVT_STC_SAVEPOINTREACHED</tt>).
wxEVT_STC_SAVEPOINTREACHED :: EventId

-- | usage: (<tt>wxEVT_STC_START_DRAG</tt>).
wxEVT_STC_START_DRAG :: EventId

-- | usage: (<tt>wxEVT_STC_STYLENEEDED</tt>).
wxEVT_STC_STYLENEEDED :: EventId

-- | usage: (<tt>wxEVT_STC_UPDATEUI</tt>).
wxEVT_STC_UPDATEUI :: EventId

-- | usage: (<tt>wxEVT_STC_URIDROPPED</tt>).
wxEVT_STC_URIDROPPED :: EventId

-- | usage: (<tt>wxEVT_STC_USERLISTSELECTION</tt>).
wxEVT_STC_USERLISTSELECTION :: EventId

-- | usage: (<tt>wxEVT_STC_ZOOM</tt>).
wxEVT_STC_ZOOM :: EventId

-- | usage: (<tt>wxEVT_SYS_COLOUR_CHANGED</tt>).
wxEVT_SYS_COLOUR_CHANGED :: EventId

-- | usage: (<tt>wxEVT_TASKBAR_BALLOON_CLICK</tt>).
wxEVT_TASKBAR_BALLOON_CLICK :: EventId

-- | usage: (<tt>wxEVT_TASKBAR_BALLOON_TIMEOUT</tt>).
wxEVT_TASKBAR_BALLOON_TIMEOUT :: EventId

-- | usage: (<tt>wxEVT_TASKBAR_LEFT_DCLICK</tt>).
wxEVT_TASKBAR_LEFT_DCLICK :: EventId

-- | usage: (<tt>wxEVT_TASKBAR_LEFT_DOWN</tt>).
wxEVT_TASKBAR_LEFT_DOWN :: EventId

-- | usage: (<tt>wxEVT_TASKBAR_LEFT_UP</tt>).
wxEVT_TASKBAR_LEFT_UP :: EventId

-- | usage: (<tt>wxEVT_TASKBAR_MOVE</tt>).
wxEVT_TASKBAR_MOVE :: EventId

-- | usage: (<tt>wxEVT_TASKBAR_RIGHT_DCLICK</tt>).
wxEVT_TASKBAR_RIGHT_DCLICK :: EventId

-- | usage: (<tt>wxEVT_TASKBAR_RIGHT_DOWN</tt>).
wxEVT_TASKBAR_RIGHT_DOWN :: EventId

-- | usage: (<tt>wxEVT_TASKBAR_RIGHT_UP</tt>).
wxEVT_TASKBAR_RIGHT_UP :: EventId

-- | usage: (<tt>wxEVT_TIMER</tt>).
wxEVT_TIMER :: EventId

-- | usage: (<tt>wxEVT_UPDATE_UI</tt>).
wxEVT_UPDATE_UI :: EventId

-- | usage: (<tt>wxEVT_WINDOW_MODAL_DIALOG_CLOSED</tt>).
wxEVT_WINDOW_MODAL_DIALOG_CLOSED :: EventId

-- | usage: (<tt>wxEVT_WIZARD_CANCEL</tt>).
wxEVT_WIZARD_CANCEL :: EventId

-- | usage: (<tt>wxEVT_WIZARD_FINISHED</tt>).
wxEVT_WIZARD_FINISHED :: EventId

-- | usage: (<tt>wxEVT_WIZARD_HELP</tt>).
wxEVT_WIZARD_HELP :: EventId

-- | usage: (<tt>wxEVT_WIZARD_PAGE_CHANGED</tt>).
wxEVT_WIZARD_PAGE_CHANGED :: EventId

-- | usage: (<tt>wxEVT_WIZARD_PAGE_CHANGING</tt>).
wxEVT_WIZARD_PAGE_CHANGING :: EventId

-- | usage: (<tt>wxEVT_WIZARD_PAGE_SHOWN</tt>).
wxEVT_WIZARD_PAGE_SHOWN :: EventId

-- | usage: (<tt>popProvider</tt>).
popProvider :: IO Bool

-- | usage: (<tt>pushProvider provider</tt>).
pushProvider :: ArtProvider a -> IO ()

-- | usage: (<tt>quantize src dest desiredNoColours eightBitData
--   flags</tt>).
quantize :: Image a -> Image b -> Int -> Ptr d -> Int -> IO Bool

-- | usage: (<tt>quantizePalette src dest pPalette desiredNoColours
--   eightBitData flags</tt>).
quantizePalette :: Image a -> Image b -> Ptr c -> Int -> Ptr e -> Int -> IO Bool

-- | usage: (<tt>removeProvider provider</tt>).
removeProvider :: ArtProvider a -> IO Bool

-- | usage: (<tt>textDataObjectCreate txt</tt>).
textDataObjectCreate :: String -> IO (TextDataObject ())

-- | usage: (<tt>textDataObjectDelete obj</tt>).
textDataObjectDelete :: TextDataObject a -> IO ()

-- | usage: (<tt>textDataObjectGetText obj</tt>).
textDataObjectGetText :: TextDataObject a -> IO (String)

-- | usage: (<tt>textDataObjectGetTextLength obj</tt>).
textDataObjectGetTextLength :: TextDataObject a -> IO Int

-- | usage: (<tt>textDataObjectSetText obj text</tt>).
textDataObjectSetText :: TextDataObject a -> String -> IO ()

-- | Get the version number of wxWidgets as a number composed of the major
--   version times 1000, minor version times 100, and the release number.
--   For example, release 2.1.15 becomes 2115. *
versionNumber :: IO Int

-- | usage: (<tt>wxBK_HITTEST_NOWHERE</tt>).
wxBK_HITTEST_NOWHERE :: Int

-- | usage: (<tt>wxBK_HITTEST_ONICON</tt>).
wxBK_HITTEST_ONICON :: Int

-- | usage: (<tt>wxBK_HITTEST_ONITEM</tt>).
wxBK_HITTEST_ONITEM :: Int

-- | usage: (<tt>wxBK_HITTEST_ONLABEL</tt>).
wxBK_HITTEST_ONLABEL :: Int

-- | usage: (<tt>wxBK_HITTEST_ONPAGE</tt>).
wxBK_HITTEST_ONPAGE :: Int

-- | usage: (<tt>wxK_ADD</tt>).
wxK_ADD :: Int

-- | usage: (<tt>wxK_ALT</tt>).
wxK_ALT :: Int

-- | usage: (<tt>wxK_BACK</tt>).
wxK_BACK :: Int

-- | usage: (<tt>wxK_CANCEL</tt>).
wxK_CANCEL :: Int

-- | usage: (<tt>wxK_CAPITAL</tt>).
wxK_CAPITAL :: Int

-- | usage: (<tt>wxK_CLEAR</tt>).
wxK_CLEAR :: Int

-- | usage: (<tt>wxK_CONTROL</tt>).
wxK_CONTROL :: Int

-- | usage: (<tt>wxK_DECIMAL</tt>).
wxK_DECIMAL :: Int

-- | usage: (<tt>wxK_DELETE</tt>).
wxK_DELETE :: Int

-- | usage: (<tt>wxK_DIVIDE</tt>).
wxK_DIVIDE :: Int

-- | usage: (<tt>wxK_DOWN</tt>).
wxK_DOWN :: Int

-- | usage: (<tt>wxK_END</tt>).
wxK_END :: Int

-- | usage: (<tt>wxK_ESCAPE</tt>).
wxK_ESCAPE :: Int

-- | usage: (<tt>wxK_EXECUTE</tt>).
wxK_EXECUTE :: Int

-- | usage: (<tt>wxK_F1</tt>).
wxK_F1 :: Int

-- | usage: (<tt>wxK_F10</tt>).
wxK_F10 :: Int

-- | usage: (<tt>wxK_F11</tt>).
wxK_F11 :: Int

-- | usage: (<tt>wxK_F12</tt>).
wxK_F12 :: Int

-- | usage: (<tt>wxK_F13</tt>).
wxK_F13 :: Int

-- | usage: (<tt>wxK_F14</tt>).
wxK_F14 :: Int

-- | usage: (<tt>wxK_F15</tt>).
wxK_F15 :: Int

-- | usage: (<tt>wxK_F16</tt>).
wxK_F16 :: Int

-- | usage: (<tt>wxK_F17</tt>).
wxK_F17 :: Int

-- | usage: (<tt>wxK_F18</tt>).
wxK_F18 :: Int

-- | usage: (<tt>wxK_F19</tt>).
wxK_F19 :: Int

-- | usage: (<tt>wxK_F2</tt>).
wxK_F2 :: Int

-- | usage: (<tt>wxK_F20</tt>).
wxK_F20 :: Int

-- | usage: (<tt>wxK_F21</tt>).
wxK_F21 :: Int

-- | usage: (<tt>wxK_F22</tt>).
wxK_F22 :: Int

-- | usage: (<tt>wxK_F23</tt>).
wxK_F23 :: Int

-- | usage: (<tt>wxK_F24</tt>).
wxK_F24 :: Int

-- | usage: (<tt>wxK_F3</tt>).
wxK_F3 :: Int

-- | usage: (<tt>wxK_F4</tt>).
wxK_F4 :: Int

-- | usage: (<tt>wxK_F5</tt>).
wxK_F5 :: Int

-- | usage: (<tt>wxK_F6</tt>).
wxK_F6 :: Int

-- | usage: (<tt>wxK_F7</tt>).
wxK_F7 :: Int

-- | usage: (<tt>wxK_F8</tt>).
wxK_F8 :: Int

-- | usage: (<tt>wxK_F9</tt>).
wxK_F9 :: Int

-- | usage: (<tt>wxK_HELP</tt>).
wxK_HELP :: Int

-- | usage: (<tt>wxK_HOME</tt>).
wxK_HOME :: Int

-- | usage: (<tt>wxK_INSERT</tt>).
wxK_INSERT :: Int

-- | usage: (<tt>wxK_LBUTTON</tt>).
wxK_LBUTTON :: Int

-- | usage: (<tt>wxK_LEFT</tt>).
wxK_LEFT :: Int

-- | usage: (<tt>wxK_MBUTTON</tt>).
wxK_MBUTTON :: Int

-- | usage: (<tt>wxK_MENU</tt>).
wxK_MENU :: Int

-- | usage: (<tt>wxK_MULTIPLY</tt>).
wxK_MULTIPLY :: Int

-- | usage: (<tt>wxK_NUMLOCK</tt>).
wxK_NUMLOCK :: Int

-- | usage: (<tt>wxK_NUMPAD0</tt>).
wxK_NUMPAD0 :: Int

-- | usage: (<tt>wxK_NUMPAD1</tt>).
wxK_NUMPAD1 :: Int

-- | usage: (<tt>wxK_NUMPAD2</tt>).
wxK_NUMPAD2 :: Int

-- | usage: (<tt>wxK_NUMPAD3</tt>).
wxK_NUMPAD3 :: Int

-- | usage: (<tt>wxK_NUMPAD4</tt>).
wxK_NUMPAD4 :: Int

-- | usage: (<tt>wxK_NUMPAD5</tt>).
wxK_NUMPAD5 :: Int

-- | usage: (<tt>wxK_NUMPAD6</tt>).
wxK_NUMPAD6 :: Int

-- | usage: (<tt>wxK_NUMPAD7</tt>).
wxK_NUMPAD7 :: Int

-- | usage: (<tt>wxK_NUMPAD8</tt>).
wxK_NUMPAD8 :: Int

-- | usage: (<tt>wxK_NUMPAD9</tt>).
wxK_NUMPAD9 :: Int

-- | usage: (<tt>wxK_NUMPAD_ADD</tt>).
wxK_NUMPAD_ADD :: Int

-- | usage: (<tt>wxK_NUMPAD_BEGIN</tt>).
wxK_NUMPAD_BEGIN :: Int

-- | usage: (<tt>wxK_NUMPAD_DECIMAL</tt>).
wxK_NUMPAD_DECIMAL :: Int

-- | usage: (<tt>wxK_NUMPAD_DELETE</tt>).
wxK_NUMPAD_DELETE :: Int

-- | usage: (<tt>wxK_NUMPAD_DIVIDE</tt>).
wxK_NUMPAD_DIVIDE :: Int

-- | usage: (<tt>wxK_NUMPAD_DOWN</tt>).
wxK_NUMPAD_DOWN :: Int

-- | usage: (<tt>wxK_NUMPAD_END</tt>).
wxK_NUMPAD_END :: Int

-- | usage: (<tt>wxK_NUMPAD_ENTER</tt>).
wxK_NUMPAD_ENTER :: Int

-- | usage: (<tt>wxK_NUMPAD_EQUAL</tt>).
wxK_NUMPAD_EQUAL :: Int

-- | usage: (<tt>wxK_NUMPAD_F1</tt>).
wxK_NUMPAD_F1 :: Int

-- | usage: (<tt>wxK_NUMPAD_F2</tt>).
wxK_NUMPAD_F2 :: Int

-- | usage: (<tt>wxK_NUMPAD_F3</tt>).
wxK_NUMPAD_F3 :: Int

-- | usage: (<tt>wxK_NUMPAD_F4</tt>).
wxK_NUMPAD_F4 :: Int

-- | usage: (<tt>wxK_NUMPAD_HOME</tt>).
wxK_NUMPAD_HOME :: Int

-- | usage: (<tt>wxK_NUMPAD_INSERT</tt>).
wxK_NUMPAD_INSERT :: Int

-- | usage: (<tt>wxK_NUMPAD_LEFT</tt>).
wxK_NUMPAD_LEFT :: Int

-- | usage: (<tt>wxK_NUMPAD_MULTIPLY</tt>).
wxK_NUMPAD_MULTIPLY :: Int

-- | usage: (<tt>wxK_NUMPAD_PAGEDOWN</tt>).
wxK_NUMPAD_PAGEDOWN :: Int

-- | usage: (<tt>wxK_NUMPAD_PAGEUP</tt>).
wxK_NUMPAD_PAGEUP :: Int

-- | usage: (<tt>wxK_NUMPAD_RIGHT</tt>).
wxK_NUMPAD_RIGHT :: Int

-- | usage: (<tt>wxK_NUMPAD_SEPARATOR</tt>).
wxK_NUMPAD_SEPARATOR :: Int

-- | usage: (<tt>wxK_NUMPAD_SPACE</tt>).
wxK_NUMPAD_SPACE :: Int

-- | usage: (<tt>wxK_NUMPAD_SUBTRACT</tt>).
wxK_NUMPAD_SUBTRACT :: Int

-- | usage: (<tt>wxK_NUMPAD_TAB</tt>).
wxK_NUMPAD_TAB :: Int

-- | usage: (<tt>wxK_NUMPAD_UP</tt>).
wxK_NUMPAD_UP :: Int

-- | usage: (<tt>wxK_PAGEDOWN</tt>).
wxK_PAGEDOWN :: Int

-- | usage: (<tt>wxK_PAGEUP</tt>).
wxK_PAGEUP :: Int

-- | usage: (<tt>wxK_PAUSE</tt>).
wxK_PAUSE :: Int

-- | usage: (<tt>wxK_PRINT</tt>).
wxK_PRINT :: Int

-- | usage: (<tt>wxK_RBUTTON</tt>).
wxK_RBUTTON :: Int

-- | usage: (<tt>wxK_RETURN</tt>).
wxK_RETURN :: Int

-- | usage: (<tt>wxK_RIGHT</tt>).
wxK_RIGHT :: Int

-- | usage: (<tt>wxK_SCROLL</tt>).
wxK_SCROLL :: Int

-- | usage: (<tt>wxK_SELECT</tt>).
wxK_SELECT :: Int

-- | usage: (<tt>wxK_SEPARATOR</tt>).
wxK_SEPARATOR :: Int

-- | usage: (<tt>wxK_SHIFT</tt>).
wxK_SHIFT :: Int

-- | usage: (<tt>wxK_SNAPSHOT</tt>).
wxK_SNAPSHOT :: Int

-- | usage: (<tt>wxK_SPACE</tt>).
wxK_SPACE :: Int

-- | usage: (<tt>wxK_START</tt>).
wxK_START :: Int

-- | usage: (<tt>wxK_SUBTRACT</tt>).
wxK_SUBTRACT :: Int

-- | usage: (<tt>wxK_TAB</tt>).
wxK_TAB :: Int

-- | usage: (<tt>wxK_UP</tt>).
wxK_UP :: Int

-- | usage: (<tt>wxNB_BOTTOM</tt>).
wxNB_BOTTOM :: Int

-- | usage: (<tt>wxNB_LEFT</tt>).
wxNB_LEFT :: Int

-- | usage: (<tt>wxNB_RIGHT</tt>).
wxNB_RIGHT :: Int

-- | usage: (<tt>wxNB_TOP</tt>).
wxNB_TOP :: Int

-- | usage: (<tt>wxcBeginBusyCursor</tt>).
wxcBeginBusyCursor :: IO ()

-- | usage: (<tt>wxcBell</tt>).
wxcBell :: IO ()

-- | usage: (<tt>wxcEndBusyCursor</tt>).
wxcEndBusyCursor :: IO ()

-- | usage: (<tt>wxcFree p</tt>).
wxcFree :: Ptr a -> IO ()

-- | usage: (<tt>wxcGetMousePosition</tt>).
wxcGetMousePosition :: IO (Point)

-- | usage: (<tt>wxcGetPixelRGB buffer width xy</tt>).
wxcGetPixelRGB :: Ptr Word8 -> Int -> Point -> IO Int

-- | usage: (<tt>wxcGetPixelRGBA buffer width xy</tt>).
wxcGetPixelRGBA :: Ptr Word8 -> Int -> Point -> IO Word

-- | usage: (<tt>wxcInitPixelsRGB buffer widthheight rgba</tt>).
wxcInitPixelsRGB :: Ptr Word8 -> Size -> Int -> IO ()

-- | usage: (<tt>wxcInitPixelsRGBA buffer widthheight rgba</tt>).
wxcInitPixelsRGBA :: Ptr Word8 -> Size -> Word -> IO ()

-- | usage: (<tt>wxcIsBusy</tt>).
wxcIsBusy :: IO ()

-- | usage: (<tt>wxcMalloc size</tt>).
wxcMalloc :: Int -> IO (Ptr ())

-- | usage: (<tt>wxcSetPixelRGB buffer width xy rgb</tt>).
wxcSetPixelRGB :: Ptr Word8 -> Int -> Point -> Int -> IO ()

-- | usage: (<tt>wxcSetPixelRGBA buffer width xy rgba</tt>).
wxcSetPixelRGBA :: Ptr Word8 -> Int -> Point -> Word -> IO ()

-- | usage: (<tt>wxcSetPixelRowRGB buffer width xy rgbStart rgbEnd
--   count</tt>).
wxcSetPixelRowRGB :: Ptr Word8 -> Int -> Point -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>wxcSetPixelRowRGBA buffer width xy rgbaStart rgbEnd
--   count</tt>).
wxcSetPixelRowRGBA :: Ptr Word8 -> Int -> Point -> Int -> Int -> Word -> IO ()

-- | usage: (<tt>wxcSysErrorCode</tt>).
wxcSysErrorCode :: IO Int

-- | usage: (<tt>wxcSysErrorMsg nErrCode</tt>).
wxcSysErrorMsg :: Int -> IO (Ptr ())

-- | usage: (<tt>wxcSystemSettingsGetColour systemColour</tt>).
wxcSystemSettingsGetColour :: Int -> IO (Color)

-- | usage: (<tt>wxcWakeUpIdle</tt>).
wxcWakeUpIdle :: IO ()

-- | usage: (<tt>mdiChildFrameActivate obj</tt>).
mdiChildFrameActivate :: MDIChildFrame a -> IO ()

-- | usage: (<tt>mdiChildFrameCreate prt id txt lfttopwdthgt stl</tt>).
mdiChildFrameCreate :: Window a -> Id -> String -> Rect -> Style -> IO (MDIChildFrame ())

-- | usage: (<tt>mdiParentFrameActivateNext obj</tt>).
mdiParentFrameActivateNext :: MDIParentFrame a -> IO ()

-- | usage: (<tt>mdiParentFrameActivatePrevious obj</tt>).
mdiParentFrameActivatePrevious :: MDIParentFrame a -> IO ()

-- | usage: (<tt>mdiParentFrameArrangeIcons obj</tt>).
mdiParentFrameArrangeIcons :: MDIParentFrame a -> IO ()

-- | usage: (<tt>mdiParentFrameCascade obj</tt>).
mdiParentFrameCascade :: MDIParentFrame a -> IO ()

-- | usage: (<tt>mdiParentFrameCreate prt id txt lfttopwdthgt stl</tt>).
mdiParentFrameCreate :: Window a -> Id -> String -> Rect -> Style -> IO (MDIParentFrame ())

-- | usage: (<tt>mdiParentFrameGetActiveChild obj</tt>).
mdiParentFrameGetActiveChild :: MDIParentFrame a -> IO (MDIChildFrame ())

-- | usage: (<tt>mdiParentFrameGetClientWindow obj</tt>).
mdiParentFrameGetClientWindow :: MDIParentFrame a -> IO (MDIClientWindow ())

-- | usage: (<tt>mdiParentFrameGetWindowMenu obj</tt>).
mdiParentFrameGetWindowMenu :: MDIParentFrame a -> IO (Menu ())

-- | usage: (<tt>mdiParentFrameOnCreateClient obj</tt>).
mdiParentFrameOnCreateClient :: MDIParentFrame a -> IO (MDIClientWindow ())

-- | usage: (<tt>mdiParentFrameSetWindowMenu obj menu</tt>).
mdiParentFrameSetWindowMenu :: MDIParentFrame a -> Menu b -> IO ()

-- | usage: (<tt>mdiParentFrameTile obj</tt>).
mdiParentFrameTile :: MDIParentFrame a -> IO ()

-- | usage: (<tt>maskCreate bitmap</tt>).
maskCreate :: Bitmap a -> IO (Mask ())

-- | usage: (<tt>maskCreateColoured bitmap colour</tt>).
maskCreateColoured :: Bitmap a -> Color -> IO (Ptr ())

-- | usage: (<tt>mediaCtrlCreate parent windowID fileName xywh style
--   szBackend name</tt>).
mediaCtrlCreate :: Window a -> Int -> String -> Rect -> Int -> String -> String -> IO (MediaCtrl ())

-- | usage: (<tt>mediaCtrlDelete self</tt>).
mediaCtrlDelete :: MediaCtrl a -> IO ()

-- | usage: (<tt>mediaCtrlGetBestSize self</tt>).
mediaCtrlGetBestSize :: MediaCtrl a -> IO (Size)

-- | usage: (<tt>mediaCtrlGetPlaybackRate self</tt>).
mediaCtrlGetPlaybackRate :: MediaCtrl a -> IO Double

-- | usage: (<tt>mediaCtrlGetState self</tt>).
mediaCtrlGetState :: MediaCtrl a -> IO Int

-- | usage: (<tt>mediaCtrlGetVolume self</tt>).
mediaCtrlGetVolume :: MediaCtrl a -> IO Double

-- | usage: (<tt>mediaCtrlLength self</tt>).
mediaCtrlLength :: MediaCtrl a -> IO Int64

-- | usage: (<tt>mediaCtrlLoad self fileName</tt>).
mediaCtrlLoad :: MediaCtrl a -> String -> IO Bool

-- | usage: (<tt>mediaCtrlLoadURI self uri</tt>).
mediaCtrlLoadURI :: MediaCtrl a -> String -> IO Bool

-- | usage: (<tt>mediaCtrlLoadURIWithProxy self uri proxy</tt>).
mediaCtrlLoadURIWithProxy :: MediaCtrl a -> String -> String -> IO Bool

-- | usage: (<tt>mediaCtrlPause self</tt>).
mediaCtrlPause :: MediaCtrl a -> IO Bool

-- | usage: (<tt>mediaCtrlPlay self</tt>).
mediaCtrlPlay :: MediaCtrl a -> IO Bool

-- | usage: (<tt>mediaCtrlSeek self offsetWhere mode</tt>).
mediaCtrlSeek :: MediaCtrl a -> Int64 -> Int -> IO Int64

-- | usage: (<tt>mediaCtrlSetPlaybackRate self dRate</tt>).
mediaCtrlSetPlaybackRate :: MediaCtrl a -> Double -> IO Bool

-- | usage: (<tt>mediaCtrlSetVolume self dVolume</tt>).
mediaCtrlSetVolume :: MediaCtrl a -> Double -> IO Bool

-- | usage: (<tt>mediaCtrlShowPlayerControls self flags</tt>).
mediaCtrlShowPlayerControls :: MediaCtrl a -> Int -> IO Bool

-- | usage: (<tt>mediaCtrlStop self</tt>).
mediaCtrlStop :: MediaCtrl a -> IO Bool

-- | usage: (<tt>mediaCtrlTell self</tt>).
mediaCtrlTell :: MediaCtrl a -> IO Int64

-- | usage: (<tt>memoryDCCreate</tt>).
memoryDCCreate :: IO (MemoryDC ())

-- | usage: (<tt>memoryDCCreateCompatible dc</tt>).
memoryDCCreateCompatible :: DC a -> IO (MemoryDC ())

-- | usage: (<tt>memoryDCCreateWithBitmap bitmap</tt>).
memoryDCCreateWithBitmap :: Bitmap a -> IO (MemoryDC ())

-- | usage: (<tt>memoryDCDelete obj</tt>).
memoryDCDelete :: MemoryDC a -> IO ()

-- | usage: (<tt>memoryDCSelectObject obj bitmap</tt>).
memoryDCSelectObject :: MemoryDC a -> Bitmap b -> IO ()

-- | usage: (<tt>memoryInputStreamCreate wxdata len</tt>).
memoryInputStreamCreate :: Ptr a -> Int -> IO (MemoryInputStream ())

-- | usage: (<tt>memoryInputStreamDelete self</tt>).
memoryInputStreamDelete :: MemoryInputStream a -> IO ()

-- | usage: (<tt>menuAppend obj id text help isCheckable</tt>).
menuAppend :: Menu a -> Id -> String -> String -> Bool -> IO ()

-- | usage: (<tt>menuAppendItem obj itm</tt>).
menuAppendItem :: Menu a -> MenuItem b -> IO ()

-- | usage: (<tt>menuAppendRadioItem self id text help</tt>).
menuAppendRadioItem :: Menu a -> Id -> String -> String -> IO ()

-- | usage: (<tt>menuAppendSeparator obj</tt>).
menuAppendSeparator :: Menu a -> IO ()

-- | usage: (<tt>menuAppendSub obj id text submenu help</tt>).
menuAppendSub :: Menu a -> Id -> String -> Menu d -> String -> IO ()

-- | usage: (<tt>menuBreak obj</tt>).
menuBreak :: Menu a -> IO ()

-- | usage: (<tt>menuCheck obj id check</tt>).
menuCheck :: Menu a -> Id -> Bool -> IO ()

-- | usage: (<tt>menuCreate title style</tt>).
menuCreate :: String -> Int -> IO (Menu ())

-- | usage: (<tt>menuDeleteById obj id</tt>).
menuDeleteById :: Menu a -> Id -> IO ()

-- | usage: (<tt>menuDeleteByItem obj itm</tt>).
menuDeleteByItem :: Menu a -> MenuItem b -> IO ()

-- | usage: (<tt>menuDeletePointer obj</tt>).
menuDeletePointer :: Menu a -> IO ()

-- | usage: (<tt>menuDestroyById obj id</tt>).
menuDestroyById :: Menu a -> Id -> IO ()

-- | usage: (<tt>menuDestroyByItem obj itm</tt>).
menuDestroyByItem :: Menu a -> MenuItem b -> IO ()

-- | usage: (<tt>menuEnable obj id enable</tt>).
menuEnable :: Menu a -> Id -> Bool -> IO ()

-- | usage: (<tt>menuFindItem obj id</tt>).
menuFindItem :: Menu a -> Id -> IO (MenuItem ())

-- | usage: (<tt>menuFindItemByLabel obj itemString</tt>).
menuFindItemByLabel :: Menu a -> String -> IO Int

-- | usage: (<tt>menuGetClientData obj</tt>).
menuGetClientData :: Menu a -> IO (ClientData ())

-- | usage: (<tt>menuGetHelpString obj id</tt>).
menuGetHelpString :: Menu a -> Id -> IO (String)

-- | usage: (<tt>menuGetInvokingWindow obj</tt>).
menuGetInvokingWindow :: Menu a -> IO (Window ())

-- | usage: (<tt>menuGetLabelText obj id</tt>).
menuGetLabelText :: Menu a -> Id -> IO (String)

-- | usage: (<tt>menuGetMenuBar obj</tt>).
menuGetMenuBar :: Menu a -> IO (MenuBar ())

-- | usage: (<tt>menuGetMenuItemCount obj</tt>).
menuGetMenuItemCount :: Menu a -> IO Int

-- | usage: (<tt>menuGetMenuItems obj lst</tt>).
menuGetMenuItems :: Menu a -> List b -> IO Int

-- | usage: (<tt>menuGetParent obj</tt>).
menuGetParent :: Menu a -> IO (Menu ())

-- | usage: (<tt>menuGetStyle obj</tt>).
menuGetStyle :: Menu a -> IO Int

-- | usage: (<tt>menuGetTitle obj</tt>).
menuGetTitle :: Menu a -> IO (String)

-- | usage: (<tt>menuInsert obj pos id text help isCheckable</tt>).
menuInsert :: Menu a -> Int -> Id -> String -> String -> Bool -> IO ()

-- | usage: (<tt>menuInsertItem obj pos itm</tt>).
menuInsertItem :: Menu a -> Int -> MenuItem c -> IO ()

-- | usage: (<tt>menuInsertSub obj pos id text submenu help</tt>).
menuInsertSub :: Menu a -> Int -> Id -> String -> Menu e -> String -> IO ()

-- | usage: (<tt>menuIsAttached obj</tt>).
menuIsAttached :: Menu a -> IO Bool

-- | usage: (<tt>menuIsChecked obj id</tt>).
menuIsChecked :: Menu a -> Id -> IO Bool

-- | usage: (<tt>menuIsEnabled obj id</tt>).
menuIsEnabled :: Menu a -> Id -> IO Bool

-- | usage: (<tt>menuPrepend obj id text help isCheckable</tt>).
menuPrepend :: Menu a -> Id -> String -> String -> Bool -> IO ()

-- | usage: (<tt>menuPrependItem obj itm</tt>).
menuPrependItem :: Menu a -> MenuItem b -> IO ()

-- | usage: (<tt>menuPrependSub obj id text submenu help</tt>).
menuPrependSub :: Menu a -> Id -> String -> Menu d -> String -> IO ()

-- | usage: (<tt>menuRemoveById obj id itm</tt>).
menuRemoveById :: Menu a -> Id -> MenuItem c -> IO ()

-- | usage: (<tt>menuRemoveByItem obj item</tt>).
menuRemoveByItem :: Menu a -> Ptr b -> IO ()

-- | usage: (<tt>menuSetClientData obj clientData</tt>).
menuSetClientData :: Menu a -> ClientData b -> IO ()

-- | usage: (<tt>menuSetEventHandler obj handler</tt>).
menuSetEventHandler :: Menu a -> EvtHandler b -> IO ()

-- | usage: (<tt>menuSetHelpString obj id helpString</tt>).
menuSetHelpString :: Menu a -> Id -> String -> IO ()

-- | usage: (<tt>menuSetInvokingWindow obj win</tt>).
menuSetInvokingWindow :: Menu a -> Window b -> IO ()

-- | usage: (<tt>menuSetLabel obj id label</tt>).
menuSetLabel :: Menu a -> Id -> String -> IO ()

-- | usage: (<tt>menuSetParent obj parent</tt>).
menuSetParent :: Menu a -> Window b -> IO ()

-- | usage: (<tt>menuSetTitle obj title</tt>).
menuSetTitle :: Menu a -> String -> IO ()

-- | usage: (<tt>menuUpdateUI obj source</tt>).
menuUpdateUI :: Menu a -> Ptr b -> IO ()

-- | usage: (<tt>menuBarAppend obj menu title</tt>).
menuBarAppend :: MenuBar a -> Menu b -> String -> IO Int

-- | usage: (<tt>menuBarCheck obj id check</tt>).
menuBarCheck :: MenuBar a -> Id -> Bool -> IO ()

-- | usage: (<tt>menuBarCreate style</tt>).
menuBarCreate :: Int -> IO (MenuBar ())

-- | usage: (<tt>menuBarDeletePointer obj</tt>).
menuBarDeletePointer :: MenuBar a -> IO ()

-- | usage: (<tt>menuBarEnable obj enable</tt>).
menuBarEnable :: MenuBar a -> Bool -> IO Int

-- | usage: (<tt>menuBarEnableItem obj id enable</tt>).
menuBarEnableItem :: MenuBar a -> Id -> Bool -> IO ()

-- | usage: (<tt>menuBarEnableTop obj pos enable</tt>).
menuBarEnableTop :: MenuBar a -> Int -> Bool -> IO ()

-- | usage: (<tt>menuBarFindItem obj id</tt>).
menuBarFindItem :: MenuBar a -> Id -> IO (MenuItem ())

-- | usage: (<tt>menuBarFindMenu obj title</tt>).
menuBarFindMenu :: MenuBar a -> String -> IO Int

-- | usage: (<tt>menuBarFindMenuItem obj menuString itemString</tt>).
menuBarFindMenuItem :: MenuBar a -> String -> String -> IO Int

-- | usage: (<tt>menuBarGetFrame obj</tt>).
menuBarGetFrame :: MenuBar a -> IO (Frame ())

-- | usage: (<tt>menuBarGetHelpString obj id</tt>).
menuBarGetHelpString :: MenuBar a -> Id -> IO (String)

-- | usage: (<tt>menuBarGetLabel obj id</tt>).
menuBarGetLabel :: MenuBar a -> Id -> IO (String)

-- | usage: (<tt>menuBarGetMenu obj pos</tt>).
menuBarGetMenu :: MenuBar a -> Int -> IO (Menu ())

-- | usage: (<tt>menuBarGetMenuCount obj</tt>).
menuBarGetMenuCount :: MenuBar a -> IO Int

-- | usage: (<tt>menuBarGetMenuLabel obj pos</tt>).
menuBarGetMenuLabel :: MenuBar a -> Int -> IO (String)

-- | usage: (<tt>menuBarInsert obj pos menu title</tt>).
menuBarInsert :: MenuBar a -> Int -> Menu c -> String -> IO Int

-- | usage: (<tt>menuBarIsChecked obj id</tt>).
menuBarIsChecked :: MenuBar a -> Id -> IO Bool

-- | usage: (<tt>menuBarIsEnabled obj id</tt>).
menuBarIsEnabled :: MenuBar a -> Id -> IO Bool

-- | usage: (<tt>menuBarRemove obj pos</tt>).
menuBarRemove :: MenuBar a -> Int -> IO (Menu ())

-- | usage: (<tt>menuBarReplace obj pos menu title</tt>).
menuBarReplace :: MenuBar a -> Int -> Menu c -> String -> IO (Menu ())

-- | usage: (<tt>menuBarSetHelpString obj id helpString</tt>).
menuBarSetHelpString :: MenuBar a -> Id -> String -> IO ()

-- | usage: (<tt>menuBarSetItemLabel obj id label</tt>).
menuBarSetItemLabel :: MenuBar a -> Id -> String -> IO ()

-- | usage: (<tt>menuBarSetLabel obj s</tt>).
menuBarSetLabel :: MenuBar a -> String -> IO ()

-- | usage: (<tt>menuBarSetMenuLabel obj pos label</tt>).
menuBarSetMenuLabel :: MenuBar a -> Int -> String -> IO ()

-- | usage: (<tt>menuEventCopyObject obj obj</tt>).
menuEventCopyObject :: MenuEvent a -> Ptr b -> IO ()

-- | usage: (<tt>menuEventGetMenuId obj</tt>).
menuEventGetMenuId :: MenuEvent a -> IO Int

-- | usage: (<tt>menuItemCheck obj check</tt>).
menuItemCheck :: MenuItem a -> Bool -> IO ()

-- | usage: (<tt>menuItemCreate</tt>).
menuItemCreate :: IO (MenuItem ())

-- | usage: (<tt>menuItemCreateEx id label help itemkind submenu</tt>).
menuItemCreateEx :: Id -> String -> String -> Int -> Menu e -> IO (MenuItem ())

-- | usage: (<tt>menuItemCreateSeparator</tt>).
menuItemCreateSeparator :: IO (MenuItem ())

-- | usage: (<tt>menuItemDelete obj</tt>).
menuItemDelete :: MenuItem a -> IO ()

-- | usage: (<tt>menuItemEnable obj enable</tt>).
menuItemEnable :: MenuItem a -> Bool -> IO ()

-- | usage: (<tt>menuItemGetHelp obj</tt>).
menuItemGetHelp :: MenuItem a -> IO (String)

-- | usage: (<tt>menuItemGetId obj</tt>).
menuItemGetId :: MenuItem a -> IO Int

-- | usage: (<tt>menuItemGetItemLabel obj</tt>).
menuItemGetItemLabel :: MenuItem a -> IO (String)

-- | usage: (<tt>menuItemGetItemLabelText obj</tt>).
menuItemGetItemLabelText :: MenuItem a -> IO (String)

-- | usage: (<tt>menuItemGetLabelText text</tt>).
menuItemGetLabelText :: String -> IO (String)

-- | usage: (<tt>menuItemGetMenu obj</tt>).
menuItemGetMenu :: MenuItem a -> IO (Menu ())

-- | usage: (<tt>menuItemGetSubMenu obj</tt>).
menuItemGetSubMenu :: MenuItem a -> IO (Menu ())

-- | usage: (<tt>menuItemIsCheckable obj</tt>).
menuItemIsCheckable :: MenuItem a -> IO Bool

-- | usage: (<tt>menuItemIsChecked obj</tt>).
menuItemIsChecked :: MenuItem a -> IO Bool

-- | usage: (<tt>menuItemIsEnabled obj</tt>).
menuItemIsEnabled :: MenuItem a -> IO Bool

-- | usage: (<tt>menuItemIsSeparator obj</tt>).
menuItemIsSeparator :: MenuItem a -> IO Bool

-- | usage: (<tt>menuItemIsSubMenu obj</tt>).
menuItemIsSubMenu :: MenuItem a -> IO Bool

-- | usage: (<tt>menuItemSetCheckable obj checkable</tt>).
menuItemSetCheckable :: MenuItem a -> Bool -> IO ()

-- | usage: (<tt>menuItemSetHelp obj str</tt>).
menuItemSetHelp :: MenuItem a -> String -> IO ()

-- | usage: (<tt>menuItemSetId obj id</tt>).
menuItemSetId :: MenuItem a -> Id -> IO ()

-- | usage: (<tt>menuItemSetItemLabel obj str</tt>).
menuItemSetItemLabel :: MenuItem a -> String -> IO ()

-- | usage: (<tt>menuItemSetSubMenu obj menu</tt>).
menuItemSetSubMenu :: MenuItem a -> Menu b -> IO ()

-- | usage: (<tt>messageDialogCreate prt msg cap stl</tt>).
messageDialogCreate :: Window a -> String -> String -> Style -> IO (MessageDialog ())

-- | usage: (<tt>messageDialogDelete obj</tt>).
messageDialogDelete :: MessageDialog a -> IO ()

-- | usage: (<tt>messageDialogShowModal obj</tt>).
messageDialogShowModal :: MessageDialog a -> IO Int

-- | usage: (<tt>metafileCreate file</tt>).
metafileCreate :: String -> IO (Metafile ())

-- | usage: (<tt>metafileDelete obj</tt>).
metafileDelete :: Metafile a -> IO ()

-- | usage: (<tt>metafileIsOk obj</tt>).
metafileIsOk :: Metafile a -> IO Bool

-- | usage: (<tt>metafilePlay obj dc</tt>).
metafilePlay :: Metafile a -> DC b -> IO Bool

-- | usage: (<tt>metafileSetClipboard obj widthheight</tt>).
metafileSetClipboard :: Metafile a -> Size -> IO Bool

-- | usage: (<tt>metafileDCClose obj</tt>).
metafileDCClose :: MetafileDC a -> IO (Ptr ())

-- | usage: (<tt>metafileDCCreate file</tt>).
metafileDCCreate :: String -> IO (MetafileDC ())

-- | usage: (<tt>metafileDCDelete obj</tt>).
metafileDCDelete :: MetafileDC a -> IO ()

-- | usage: (<tt>mimeTypesManagerAddFallbacks obj types</tt>).
mimeTypesManagerAddFallbacks :: MimeTypesManager a -> Ptr b -> IO ()

-- | usage: (<tt>mimeTypesManagerCreate</tt>).
mimeTypesManagerCreate :: IO (MimeTypesManager ())

-- | usage: (<tt>mimeTypesManagerEnumAllFileTypes obj lst</tt>).
mimeTypesManagerEnumAllFileTypes :: MimeTypesManager a -> List b -> IO Int

-- | usage: (<tt>mimeTypesManagerGetFileTypeFromExtension obj ext</tt>).
mimeTypesManagerGetFileTypeFromExtension :: MimeTypesManager a -> String -> IO (FileType ())

-- | usage: (<tt>mimeTypesManagerGetFileTypeFromMimeType obj name</tt>).
mimeTypesManagerGetFileTypeFromMimeType :: MimeTypesManager a -> String -> IO (FileType ())

-- | usage: (<tt>mimeTypesManagerIsOfType obj wxtype wildcard</tt>).
mimeTypesManagerIsOfType :: MimeTypesManager a -> String -> String -> IO Bool

-- | usage: (<tt>miniFrameCreate prt id txt lfttopwdthgt stl</tt>).
miniFrameCreate :: Window a -> Id -> String -> Rect -> Style -> IO (MiniFrame ())

-- | usage: (<tt>mirrorDCCreate dc</tt>).
mirrorDCCreate :: DC a -> IO (MirrorDC ())

-- | usage: (<tt>mirrorDCDelete obj</tt>).
mirrorDCDelete :: MemoryDC a -> IO ()

-- | usage: (<tt>mouseEventAltDown obj</tt>).
mouseEventAltDown :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventButton obj but</tt>).
mouseEventButton :: MouseEvent a -> Int -> IO Bool

-- | usage: (<tt>mouseEventButtonDClick obj but</tt>).
mouseEventButtonDClick :: MouseEvent a -> Int -> IO Bool

-- | usage: (<tt>mouseEventButtonDown obj but</tt>).
mouseEventButtonDown :: MouseEvent a -> Int -> IO Bool

-- | usage: (<tt>mouseEventButtonIsDown obj but</tt>).
mouseEventButtonIsDown :: MouseEvent a -> Int -> IO Bool

-- | usage: (<tt>mouseEventButtonUp obj but</tt>).
mouseEventButtonUp :: MouseEvent a -> Int -> IO Bool

-- | usage: (<tt>mouseEventControlDown obj</tt>).
mouseEventControlDown :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventCopyObject obj objectdest</tt>).
mouseEventCopyObject :: MouseEvent a -> Ptr b -> IO ()

-- | usage: (<tt>mouseEventDragging obj</tt>).
mouseEventDragging :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventEntering obj</tt>).
mouseEventEntering :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventGetButton obj</tt>).
mouseEventGetButton :: MouseEvent a -> IO Int

-- | usage: (<tt>mouseEventGetLogicalPosition obj dc</tt>).
mouseEventGetLogicalPosition :: MouseEvent a -> DC b -> IO (Point)

-- | usage: (<tt>mouseEventGetPosition obj</tt>).
mouseEventGetPosition :: MouseEvent a -> IO (Point)

-- | usage: (<tt>mouseEventGetWheelDelta obj</tt>).
mouseEventGetWheelDelta :: MouseEvent a -> IO Int

-- | usage: (<tt>mouseEventGetWheelRotation obj</tt>).
mouseEventGetWheelRotation :: MouseEvent a -> IO Int

-- | usage: (<tt>mouseEventGetX obj</tt>).
mouseEventGetX :: MouseEvent a -> IO Int

-- | usage: (<tt>mouseEventGetY obj</tt>).
mouseEventGetY :: MouseEvent a -> IO Int

-- | usage: (<tt>mouseEventIsButton obj</tt>).
mouseEventIsButton :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventLeaving obj</tt>).
mouseEventLeaving :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventLeftDClick obj</tt>).
mouseEventLeftDClick :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventLeftDown obj</tt>).
mouseEventLeftDown :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventLeftIsDown obj</tt>).
mouseEventLeftIsDown :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventLeftUp obj</tt>).
mouseEventLeftUp :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventMetaDown obj</tt>).
mouseEventMetaDown :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventMiddleDClick obj</tt>).
mouseEventMiddleDClick :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventMiddleDown obj</tt>).
mouseEventMiddleDown :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventMiddleIsDown obj</tt>).
mouseEventMiddleIsDown :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventMiddleUp obj</tt>).
mouseEventMiddleUp :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventMoving obj</tt>).
mouseEventMoving :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventRightDClick obj</tt>).
mouseEventRightDClick :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventRightDown obj</tt>).
mouseEventRightDown :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventRightIsDown obj</tt>).
mouseEventRightIsDown :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventRightUp obj</tt>).
mouseEventRightUp :: MouseEvent a -> IO Bool

-- | usage: (<tt>mouseEventShiftDown obj</tt>).
mouseEventShiftDown :: MouseEvent a -> IO Bool

-- | usage: (<tt>moveEventCopyObject obj obj</tt>).
moveEventCopyObject :: MoveEvent a -> Ptr b -> IO ()

-- | usage: (<tt>moveEventGetPosition obj</tt>).
moveEventGetPosition :: MoveEvent a -> IO (Point)

-- | usage: (<tt>navigationKeyEventGetCurrentFocus obj</tt>).
navigationKeyEventGetCurrentFocus :: NavigationKeyEvent a -> IO (Ptr ())

-- | usage: (<tt>navigationKeyEventGetDirection obj</tt>).
navigationKeyEventGetDirection :: NavigationKeyEvent a -> IO Bool

-- | usage: (<tt>navigationKeyEventIsWindowChange obj</tt>).
navigationKeyEventIsWindowChange :: NavigationKeyEvent a -> IO Bool

-- | usage: (<tt>navigationKeyEventSetCurrentFocus obj win</tt>).
navigationKeyEventSetCurrentFocus :: NavigationKeyEvent a -> Window b -> IO ()

-- | usage: (<tt>navigationKeyEventSetDirection obj bForward</tt>).
navigationKeyEventSetDirection :: NavigationKeyEvent a -> Bool -> IO ()

-- | usage: (<tt>navigationKeyEventSetWindowChange obj bIs</tt>).
navigationKeyEventSetWindowChange :: NavigationKeyEvent a -> Bool -> IO ()

-- | usage: (<tt>navigationKeyEventShouldPropagate obj</tt>).
navigationKeyEventShouldPropagate :: NavigationKeyEvent a -> IO Int

-- | usage: (<tt>notebookAddPage obj pPage strText bSelect imageId</tt>).
notebookAddPage :: Notebook a -> Window b -> String -> Bool -> Int -> IO Bool

-- | usage: (<tt>notebookAdvanceSelection obj bForward</tt>).
notebookAdvanceSelection :: Notebook a -> Bool -> IO ()

-- | usage: (<tt>notebookAssignImageList obj imageList</tt>).
notebookAssignImageList :: Notebook a -> ImageList b -> IO ()

-- | usage: (<tt>notebookCreate prt id lfttopwdthgt stl</tt>).
notebookCreate :: Window a -> Id -> Rect -> Style -> IO (Notebook ())

-- | usage: (<tt>notebookDeleteAllPages obj</tt>).
notebookDeleteAllPages :: Notebook a -> IO Bool

-- | usage: (<tt>notebookDeletePage obj nPage</tt>).
notebookDeletePage :: Notebook a -> Int -> IO Bool

-- | usage: (<tt>notebookGetImageList obj</tt>).
notebookGetImageList :: Notebook a -> IO (ImageList ())

-- | usage: (<tt>notebookGetPage obj nPage</tt>).
notebookGetPage :: Notebook a -> Int -> IO (Window ())

-- | usage: (<tt>notebookGetPageCount obj</tt>).
notebookGetPageCount :: Notebook a -> IO Int

-- | usage: (<tt>notebookGetPageImage obj nPage</tt>).
notebookGetPageImage :: Notebook a -> Int -> IO Int

-- | usage: (<tt>notebookGetPageText obj nPage</tt>).
notebookGetPageText :: Notebook a -> Int -> IO (String)

-- | usage: (<tt>notebookGetRowCount obj</tt>).
notebookGetRowCount :: Notebook a -> IO Int

-- | usage: (<tt>notebookGetSelection obj</tt>).
notebookGetSelection :: Notebook a -> IO Int

-- | usage: (<tt>notebookHitTest obj xy flags</tt>).
notebookHitTest :: Notebook a -> Point -> Ptr CInt -> IO Int

-- | usage: (<tt>notebookInsertPage obj nPage pPage strText bSelect
--   imageId</tt>).
notebookInsertPage :: Notebook a -> Int -> Window c -> String -> Bool -> Int -> IO Bool

-- | usage: (<tt>notebookRemovePage obj nPage</tt>).
notebookRemovePage :: Notebook a -> Int -> IO Bool

-- | usage: (<tt>notebookSetImageList obj imageList</tt>).
notebookSetImageList :: Notebook a -> ImageList b -> IO ()

-- | usage: (<tt>notebookSetPadding obj wh</tt>).
notebookSetPadding :: Notebook a -> Size -> IO ()

-- | usage: (<tt>notebookSetPageImage obj nPage nImage</tt>).
notebookSetPageImage :: Notebook a -> Int -> Int -> IO Bool

-- | usage: (<tt>notebookSetPageSize obj wh</tt>).
notebookSetPageSize :: Notebook a -> Size -> IO ()

-- | usage: (<tt>notebookSetPageText obj nPage strText</tt>).
notebookSetPageText :: Notebook a -> Int -> String -> IO Bool

-- | usage: (<tt>notebookSetSelection obj nPage</tt>).
notebookSetSelection :: Notebook a -> Int -> IO Int

-- | usage: (<tt>notifyEventAllow obj</tt>).
notifyEventAllow :: NotifyEvent a -> IO ()

-- | usage: (<tt>notifyEventCopyObject obj objectdest</tt>).
notifyEventCopyObject :: NotifyEvent a -> Ptr b -> IO ()

-- | usage: (<tt>notifyEventIsAllowed obj</tt>).
notifyEventIsAllowed :: NotifyEvent a -> IO Bool

-- | usage: (<tt>notifyEventVeto obj</tt>).
notifyEventVeto :: NotifyEvent a -> IO ()

-- | usage: (<tt>outputStreamDelete obj</tt>).
outputStreamDelete :: OutputStream a -> IO ()

-- | usage: (<tt>outputStreamLastWrite obj</tt>).
outputStreamLastWrite :: OutputStream a -> IO Int

-- | usage: (<tt>outputStreamPutC obj c</tt>).
outputStreamPutC :: OutputStream a -> Char -> IO ()

-- | usage: (<tt>outputStreamSeek obj pos mode</tt>).
outputStreamSeek :: OutputStream a -> Int -> Int -> IO Int

-- | usage: (<tt>outputStreamSync obj</tt>).
outputStreamSync :: OutputStream a -> IO ()

-- | usage: (<tt>outputStreamTell obj</tt>).
outputStreamTell :: OutputStream a -> IO Int

-- | usage: (<tt>outputStreamWrite obj buffer size</tt>).
outputStreamWrite :: OutputStream a -> Ptr b -> Int -> IO ()

-- | usage: (<tt>pGPropertyGetLabel obj</tt>).
pGPropertyGetLabel :: PGProperty a -> IO (String)

-- | usage: (<tt>pGPropertyGetName obj</tt>).
pGPropertyGetName :: PGProperty a -> IO (String)

-- | usage: (<tt>pGPropertyGetValueAsString obj</tt>).
pGPropertyGetValueAsString :: PGProperty a -> IO (String)

-- | usage: (<tt>pGPropertyGetValueType obj</tt>).
pGPropertyGetValueType :: PGProperty a -> IO (String)

-- | usage: (<tt>pGPropertySetHelpString obj helpString</tt>).
pGPropertySetHelpString :: PGProperty a -> String -> IO ()

-- | usage: (<tt>pageSetupDialogCreate parent wxdata</tt>).
pageSetupDialogCreate :: Window a -> PageSetupDialogData b -> IO (PageSetupDialog ())

-- | usage: (<tt>pageSetupDialogGetPageSetupData obj</tt>).
pageSetupDialogGetPageSetupData :: PageSetupDialog a -> IO (PageSetupDialogData ())

-- | usage: (<tt>pageSetupDialogDataAssign obj</tt>).
pageSetupDialogDataAssign :: PageSetupDialogData a -> IO (PageSetupDialogData ())

-- | usage: (<tt>pageSetupDialogDataAssignData obj printData</tt>).
pageSetupDialogDataAssignData :: PageSetupDialogData a -> PrintData b -> IO ()

-- | usage: (<tt>pageSetupDialogDataCalculateIdFromPaperSize obj</tt>).
pageSetupDialogDataCalculateIdFromPaperSize :: PageSetupDialogData a -> IO ()

-- | usage: (<tt>pageSetupDialogDataCalculatePaperSizeFromId obj</tt>).
pageSetupDialogDataCalculatePaperSizeFromId :: PageSetupDialogData a -> IO ()

-- | usage: (<tt>pageSetupDialogDataCreate</tt>).
pageSetupDialogDataCreate :: IO (PageSetupDialogData ())

-- | usage: (<tt>pageSetupDialogDataCreateFromData printData</tt>).
pageSetupDialogDataCreateFromData :: PrintData a -> IO (PageSetupDialogData ())

-- | usage: (<tt>pageSetupDialogDataDelete obj</tt>).
pageSetupDialogDataDelete :: PageSetupDialogData a -> IO ()

-- | usage: (<tt>pageSetupDialogDataEnableHelp obj flag</tt>).
pageSetupDialogDataEnableHelp :: PageSetupDialogData a -> Bool -> IO ()

-- | usage: (<tt>pageSetupDialogDataEnableMargins obj flag</tt>).
pageSetupDialogDataEnableMargins :: PageSetupDialogData a -> Bool -> IO ()

-- | usage: (<tt>pageSetupDialogDataEnableOrientation obj flag</tt>).
pageSetupDialogDataEnableOrientation :: PageSetupDialogData a -> Bool -> IO ()

-- | usage: (<tt>pageSetupDialogDataEnablePaper obj flag</tt>).
pageSetupDialogDataEnablePaper :: PageSetupDialogData a -> Bool -> IO ()

-- | usage: (<tt>pageSetupDialogDataEnablePrinter obj flag</tt>).
pageSetupDialogDataEnablePrinter :: PageSetupDialogData a -> Bool -> IO ()

-- | usage: (<tt>pageSetupDialogDataGetDefaultInfo obj</tt>).
pageSetupDialogDataGetDefaultInfo :: PageSetupDialogData a -> IO Bool

-- | usage: (<tt>pageSetupDialogDataGetDefaultMinMargins obj</tt>).
pageSetupDialogDataGetDefaultMinMargins :: PageSetupDialogData a -> IO Bool

-- | usage: (<tt>pageSetupDialogDataGetEnableHelp obj</tt>).
pageSetupDialogDataGetEnableHelp :: PageSetupDialogData a -> IO Bool

-- | usage: (<tt>pageSetupDialogDataGetEnableMargins obj</tt>).
pageSetupDialogDataGetEnableMargins :: PageSetupDialogData a -> IO Bool

-- | usage: (<tt>pageSetupDialogDataGetEnableOrientation obj</tt>).
pageSetupDialogDataGetEnableOrientation :: PageSetupDialogData a -> IO Bool

-- | usage: (<tt>pageSetupDialogDataGetEnablePaper obj</tt>).
pageSetupDialogDataGetEnablePaper :: PageSetupDialogData a -> IO Bool

-- | usage: (<tt>pageSetupDialogDataGetEnablePrinter obj</tt>).
pageSetupDialogDataGetEnablePrinter :: PageSetupDialogData a -> IO Bool

-- | usage: (<tt>pageSetupDialogDataGetMarginBottomRight obj</tt>).
pageSetupDialogDataGetMarginBottomRight :: PageSetupDialogData a -> IO (Point)

-- | usage: (<tt>pageSetupDialogDataGetMarginTopLeft obj</tt>).
pageSetupDialogDataGetMarginTopLeft :: PageSetupDialogData a -> IO (Point)

-- | usage: (<tt>pageSetupDialogDataGetMinMarginBottomRight obj</tt>).
pageSetupDialogDataGetMinMarginBottomRight :: PageSetupDialogData a -> IO (Point)

-- | usage: (<tt>pageSetupDialogDataGetMinMarginTopLeft obj</tt>).
pageSetupDialogDataGetMinMarginTopLeft :: PageSetupDialogData a -> IO (Point)

-- | usage: (<tt>pageSetupDialogDataGetPaperId obj</tt>).
pageSetupDialogDataGetPaperId :: PageSetupDialogData a -> IO Int

-- | usage: (<tt>pageSetupDialogDataGetPaperSize obj</tt>).
pageSetupDialogDataGetPaperSize :: PageSetupDialogData a -> IO (Size)

-- | usage: (<tt>pageSetupDialogDataGetPrintData obj</tt>).
pageSetupDialogDataGetPrintData :: PageSetupDialogData a -> IO (PrintData ())

-- | usage: (<tt>pageSetupDialogDataSetDefaultInfo obj flag</tt>).
pageSetupDialogDataSetDefaultInfo :: PageSetupDialogData a -> Bool -> IO ()

-- | usage: (<tt>pageSetupDialogDataSetDefaultMinMargins obj flag</tt>).
pageSetupDialogDataSetDefaultMinMargins :: PageSetupDialogData a -> Int -> IO ()

-- | usage: (<tt>pageSetupDialogDataSetMarginBottomRight obj xy</tt>).
pageSetupDialogDataSetMarginBottomRight :: PageSetupDialogData a -> Point -> IO ()

-- | usage: (<tt>pageSetupDialogDataSetMarginTopLeft obj xy</tt>).
pageSetupDialogDataSetMarginTopLeft :: PageSetupDialogData a -> Point -> IO ()

-- | usage: (<tt>pageSetupDialogDataSetMinMarginBottomRight obj xy</tt>).
pageSetupDialogDataSetMinMarginBottomRight :: PageSetupDialogData a -> Point -> IO ()

-- | usage: (<tt>pageSetupDialogDataSetMinMarginTopLeft obj xy</tt>).
pageSetupDialogDataSetMinMarginTopLeft :: PageSetupDialogData a -> Point -> IO ()

-- | usage: (<tt>pageSetupDialogDataSetPaperId obj id</tt>).
pageSetupDialogDataSetPaperId :: PageSetupDialogData a -> Ptr b -> IO ()

-- | usage: (<tt>pageSetupDialogDataSetPaperSize obj wh</tt>).
pageSetupDialogDataSetPaperSize :: PageSetupDialogData a -> Size -> IO ()

-- | usage: (<tt>pageSetupDialogDataSetPaperSizeId obj id</tt>).
pageSetupDialogDataSetPaperSizeId :: PageSetupDialogData a -> Id -> IO ()

-- | usage: (<tt>pageSetupDialogDataSetPrintData obj printData</tt>).
pageSetupDialogDataSetPrintData :: PageSetupDialogData a -> PrintData b -> IO ()

-- | usage: (<tt>paintDCCreate win</tt>).
paintDCCreate :: Window a -> IO (PaintDC ())

-- | usage: (<tt>paintDCDelete obj</tt>).
paintDCDelete :: PaintDC a -> IO ()

-- | usage: (<tt>paletteAssign obj palette</tt>).
paletteAssign :: Palette a -> Palette b -> IO ()

-- | usage: (<tt>paletteCreateDefault</tt>).
paletteCreateDefault :: IO (Palette ())

-- | usage: (<tt>paletteCreateRGB n red green blue</tt>).
paletteCreateRGB :: Int -> Ptr b -> Ptr c -> Ptr d -> IO (Palette ())

-- | usage: (<tt>paletteDelete obj</tt>).
paletteDelete :: Palette a -> IO ()

-- | usage: (<tt>paletteGetPixel obj redgreenblue</tt>).
paletteGetPixel :: Palette a -> Color -> IO Int

-- | usage: (<tt>paletteGetRGB obj pixel red green blue</tt>).
paletteGetRGB :: Palette a -> Int -> Ptr c -> Ptr d -> Ptr e -> IO Bool

-- | usage: (<tt>paletteIsEqual obj palette</tt>).
paletteIsEqual :: Palette a -> Palette b -> IO Bool

-- | usage: (<tt>paletteIsOk obj</tt>).
paletteIsOk :: Palette a -> IO Bool

-- | usage: (<tt>paletteChangedEventCopyObject obj obj</tt>).
paletteChangedEventCopyObject :: PaletteChangedEvent a -> Ptr b -> IO ()

-- | usage: (<tt>paletteChangedEventGetChangedWindow obj</tt>).
paletteChangedEventGetChangedWindow :: PaletteChangedEvent a -> IO (Ptr ())

-- | usage: (<tt>paletteChangedEventSetChangedWindow obj win</tt>).
paletteChangedEventSetChangedWindow :: PaletteChangedEvent a -> Window b -> IO ()

-- | usage: (<tt>panelCreate prt id lfttopwdthgt stl</tt>).
panelCreate :: Window a -> Id -> Rect -> Style -> IO (Panel ())

-- | usage: (<tt>panelInitDialog obj</tt>).
panelInitDialog :: Panel a -> IO ()

-- | usage: (<tt>panelSetFocus obj</tt>).
panelSetFocus :: Panel a -> IO ()

-- | usage: (<tt>penAssign obj pen</tt>).
penAssign :: Pen a -> Pen b -> IO ()

-- | usage: (<tt>penCreateDefault</tt>).
penCreateDefault :: IO (Pen ())

-- | usage: (<tt>penCreateFromBitmap stipple width</tt>).
penCreateFromBitmap :: Bitmap a -> Int -> IO (Pen ())

-- | usage: (<tt>penCreateFromColour col width style</tt>).
penCreateFromColour :: Color -> Int -> Int -> IO (Pen ())

-- | usage: (<tt>penCreateFromStock id</tt>).
penCreateFromStock :: Id -> IO (Pen ())

-- | usage: (<tt>penDelete obj</tt>).
penDelete :: Pen a -> IO ()

-- | usage: (<tt>penGetCap obj</tt>).
penGetCap :: Pen a -> IO Int

-- | usage: (<tt>penGetColour obj</tt>).
penGetColour :: Pen a -> IO (Color)

-- | usage: (<tt>penGetDashes obj ptr</tt>).
penGetDashes :: Pen a -> Ptr b -> IO Int

-- | usage: (<tt>penGetJoin obj</tt>).
penGetJoin :: Pen a -> IO Int

-- | usage: (<tt>penGetStipple obj</tt>).
penGetStipple :: Pen a -> IO (Bitmap ())

-- | usage: (<tt>penGetStyle obj</tt>).
penGetStyle :: Pen a -> IO Int

-- | usage: (<tt>penGetWidth obj</tt>).
penGetWidth :: Pen a -> IO Int

-- | usage: (<tt>penIsEqual obj pen</tt>).
penIsEqual :: Pen a -> Pen b -> IO Bool

-- | usage: (<tt>penIsOk obj</tt>).
penIsOk :: Pen a -> IO Bool

-- | usage: (<tt>penIsStatic self</tt>).
penIsStatic :: Pen a -> IO Bool

-- | usage: (<tt>penSafeDelete self</tt>).
penSafeDelete :: Pen a -> IO ()

-- | usage: (<tt>penSetCap obj cap</tt>).
penSetCap :: Pen a -> Int -> IO ()

-- | usage: (<tt>penSetColour obj col</tt>).
penSetColour :: Pen a -> Color -> IO ()

-- | usage: (<tt>penSetColourSingle obj r g b</tt>).
penSetColourSingle :: Pen a -> Char -> Char -> Char -> IO ()

-- | usage: (<tt>penSetDashes obj nbdashes dash</tt>).
penSetDashes :: Pen a -> Int -> Ptr c -> IO ()

-- | usage: (<tt>penSetJoin obj join</tt>).
penSetJoin :: Pen a -> Int -> IO ()

-- | usage: (<tt>penSetStipple obj stipple</tt>).
penSetStipple :: Pen a -> Bitmap b -> IO ()

-- | usage: (<tt>penSetStyle obj style</tt>).
penSetStyle :: Pen a -> Int -> IO ()

-- | usage: (<tt>penSetWidth obj width</tt>).
penSetWidth :: Pen a -> Int -> IO ()

-- | usage: (<tt>postScriptDCCreate wxdata</tt>).
postScriptDCCreate :: PrintData a -> IO (PostScriptDC ())

-- | usage: (<tt>postScriptDCDelete self</tt>).
postScriptDCDelete :: PostScriptDC a -> IO ()

-- | usage: (<tt>postScriptDCGetResolution self</tt>).
postScriptDCGetResolution :: PostScriptDC a -> IO Int

-- | usage: (<tt>postScriptDCSetResolution self ppi</tt>).
postScriptDCSetResolution :: PostScriptDC a -> Int -> IO ()

-- | usage: (<tt>postScriptPrintNativeDataCreate</tt>).
postScriptPrintNativeDataCreate :: IO (PostScriptPrintNativeData ())

-- | usage: (<tt>postScriptPrintNativeDataDelete obj</tt>).
postScriptPrintNativeDataDelete :: PostScriptPrintNativeData a -> IO ()

-- | usage: (<tt>previewCanvasCreate preview parent xywh style</tt>).
previewCanvasCreate :: PrintPreview a -> Window b -> Rect -> Int -> IO (PreviewCanvas ())

-- | Usage: <tt>previewFrameCreate printPreview parent title rect name
--   </tt>. *
previewFrameCreate :: PrintPreview a -> Frame b -> String -> Rect -> Style -> String -> IO (PreviewFrame ())

-- | usage: (<tt>previewFrameDelete self</tt>).
previewFrameDelete :: PreviewFrame a -> IO ()

-- | Usage: <tt>previewFrameInitialize self</tt>, call this before showing
--   the frame. *
previewFrameInitialize :: PreviewFrame a -> IO ()

-- | usage: (<tt>printDataAssign obj wxdata</tt>).
printDataAssign :: PrintData a -> PrintData b -> IO ()

-- | usage: (<tt>printDataCreate</tt>).
printDataCreate :: IO (PrintData ())

-- | usage: (<tt>printDataDelete obj</tt>).
printDataDelete :: PrintData a -> IO ()

-- | usage: (<tt>printDataGetCollate obj</tt>).
printDataGetCollate :: PrintData a -> IO Bool

-- | usage: (<tt>printDataGetColour obj</tt>).
printDataGetColour :: PrintData a -> IO Bool

-- | usage: (<tt>printDataGetDuplex obj</tt>).
printDataGetDuplex :: PrintData a -> IO Int

-- | usage: (<tt>printDataGetFilename obj</tt>).
printDataGetFilename :: PrintData a -> IO (String)

-- | usage: (<tt>printDataGetFontMetricPath obj</tt>).
printDataGetFontMetricPath :: PrintData a -> IO (String)

-- | usage: (<tt>printDataGetNoCopies obj</tt>).
printDataGetNoCopies :: PrintData a -> IO Int

-- | usage: (<tt>printDataGetOrientation obj</tt>).
printDataGetOrientation :: PrintData a -> IO Int

-- | usage: (<tt>printDataGetPaperId obj</tt>).
printDataGetPaperId :: PrintData a -> IO Int

-- | usage: (<tt>printDataGetPaperSize obj</tt>).
printDataGetPaperSize :: PrintData a -> IO (Size)

-- | usage: (<tt>printDataGetPreviewCommand obj</tt>).
printDataGetPreviewCommand :: PrintData a -> IO (String)

-- | usage: (<tt>printDataGetPrintMode obj</tt>).
printDataGetPrintMode :: PrintData a -> IO Int

-- | usage: (<tt>printDataGetPrinterCommand obj</tt>).
printDataGetPrinterCommand :: PrintData a -> IO (String)

-- | usage: (<tt>printDataGetPrinterName obj</tt>).
printDataGetPrinterName :: PrintData a -> IO (String)

-- | usage: (<tt>printDataGetPrinterOptions obj</tt>).
printDataGetPrinterOptions :: PrintData a -> IO (String)

-- | usage: (<tt>printDataGetPrinterScaleX obj</tt>).
printDataGetPrinterScaleX :: PrintData a -> IO Double

-- | usage: (<tt>printDataGetPrinterScaleY obj</tt>).
printDataGetPrinterScaleY :: PrintData a -> IO Double

-- | usage: (<tt>printDataGetPrinterTranslateX obj</tt>).
printDataGetPrinterTranslateX :: PrintData a -> IO Int

-- | usage: (<tt>printDataGetPrinterTranslateY obj</tt>).
printDataGetPrinterTranslateY :: PrintData a -> IO Int

-- | usage: (<tt>printDataGetQuality obj</tt>).
printDataGetQuality :: PrintData a -> IO Int

-- | usage: (<tt>printDataSetCollate obj flag</tt>).
printDataSetCollate :: PrintData a -> Bool -> IO ()

-- | usage: (<tt>printDataSetColour obj colour</tt>).
printDataSetColour :: PrintData a -> Bool -> IO ()

-- | usage: (<tt>printDataSetDuplex obj duplex</tt>).
printDataSetDuplex :: PrintData a -> Int -> IO ()

-- | usage: (<tt>printDataSetFilename obj filename</tt>).
printDataSetFilename :: PrintData a -> String -> IO ()

-- | usage: (<tt>printDataSetFontMetricPath obj path</tt>).
printDataSetFontMetricPath :: PrintData a -> String -> IO ()

-- | usage: (<tt>printDataSetNoCopies obj v</tt>).
printDataSetNoCopies :: PrintData a -> Int -> IO ()

-- | usage: (<tt>printDataSetOrientation obj orient</tt>).
printDataSetOrientation :: PrintData a -> Int -> IO ()

-- | usage: (<tt>printDataSetPaperId obj sizeId</tt>).
printDataSetPaperId :: PrintData a -> Int -> IO ()

-- | usage: (<tt>printDataSetPaperSize obj wh</tt>).
printDataSetPaperSize :: PrintData a -> Size -> IO ()

-- | usage: (<tt>printDataSetPreviewCommand obj command</tt>).
printDataSetPreviewCommand :: PrintData a -> Command b -> IO ()

-- | usage: (<tt>printDataSetPrintMode obj printMode</tt>).
printDataSetPrintMode :: PrintData a -> Int -> IO ()

-- | usage: (<tt>printDataSetPrinterCommand obj command</tt>).
printDataSetPrinterCommand :: PrintData a -> Command b -> IO ()

-- | usage: (<tt>printDataSetPrinterName obj name</tt>).
printDataSetPrinterName :: PrintData a -> String -> IO ()

-- | usage: (<tt>printDataSetPrinterOptions obj options</tt>).
printDataSetPrinterOptions :: PrintData a -> String -> IO ()

-- | usage: (<tt>printDataSetPrinterScaleX obj x</tt>).
printDataSetPrinterScaleX :: PrintData a -> Double -> IO ()

-- | usage: (<tt>printDataSetPrinterScaleY obj y</tt>).
printDataSetPrinterScaleY :: PrintData a -> Double -> IO ()

-- | usage: (<tt>printDataSetPrinterScaling obj x y</tt>).
printDataSetPrinterScaling :: PrintData a -> Double -> Double -> IO ()

-- | usage: (<tt>printDataSetPrinterTranslateX obj x</tt>).
printDataSetPrinterTranslateX :: PrintData a -> Int -> IO ()

-- | usage: (<tt>printDataSetPrinterTranslateY obj y</tt>).
printDataSetPrinterTranslateY :: PrintData a -> Int -> IO ()

-- | usage: (<tt>printDataSetPrinterTranslation obj xy</tt>).
printDataSetPrinterTranslation :: PrintData a -> Point -> IO ()

-- | usage: (<tt>printDataSetQuality obj quality</tt>).
printDataSetQuality :: PrintData a -> Int -> IO ()

-- | usage: (<tt>printDialogCreate parent wxdata</tt>).
printDialogCreate :: Window a -> PrintDialogData b -> IO (PrintDialog ())

-- | usage: (<tt>printDialogGetPrintDC obj</tt>).
printDialogGetPrintDC :: PrintDialog a -> IO (DC ())

-- | usage: (<tt>printDialogGetPrintData obj</tt>).
printDialogGetPrintData :: PrintDialog a -> IO (PrintData ())

-- | usage: (<tt>printDialogGetPrintDialogData obj</tt>).
printDialogGetPrintDialogData :: PrintDialog a -> IO (PrintDialogData ())

-- | usage: (<tt>printDialogDataAssign obj wxdata</tt>).
printDialogDataAssign :: PrintDialogData a -> PrintDialogData b -> IO ()

-- | usage: (<tt>printDialogDataAssignData obj wxdata</tt>).
printDialogDataAssignData :: PrintDialogData a -> PrintData b -> IO ()

-- | usage: (<tt>printDialogDataCreateDefault</tt>).
printDialogDataCreateDefault :: IO (PrintDialogData ())

-- | usage: (<tt>printDialogDataCreateFromData printData</tt>).
printDialogDataCreateFromData :: PrintData a -> IO (PrintDialogData ())

-- | usage: (<tt>printDialogDataDelete obj</tt>).
printDialogDataDelete :: PrintDialogData a -> IO ()

-- | usage: (<tt>printDialogDataEnableHelp obj flag</tt>).
printDialogDataEnableHelp :: PrintDialogData a -> Bool -> IO ()

-- | usage: (<tt>printDialogDataEnablePageNumbers obj flag</tt>).
printDialogDataEnablePageNumbers :: PrintDialogData a -> Bool -> IO ()

-- | usage: (<tt>printDialogDataEnablePrintToFile obj flag</tt>).
printDialogDataEnablePrintToFile :: PrintDialogData a -> Bool -> IO ()

-- | usage: (<tt>printDialogDataEnableSelection obj flag</tt>).
printDialogDataEnableSelection :: PrintDialogData a -> Bool -> IO ()

-- | usage: (<tt>printDialogDataGetAllPages obj</tt>).
printDialogDataGetAllPages :: PrintDialogData a -> IO Int

-- | usage: (<tt>printDialogDataGetCollate obj</tt>).
printDialogDataGetCollate :: PrintDialogData a -> IO Bool

-- | usage: (<tt>printDialogDataGetEnableHelp obj</tt>).
printDialogDataGetEnableHelp :: PrintDialogData a -> IO Bool

-- | usage: (<tt>printDialogDataGetEnablePageNumbers obj</tt>).
printDialogDataGetEnablePageNumbers :: PrintDialogData a -> IO Bool

-- | usage: (<tt>printDialogDataGetEnablePrintToFile obj</tt>).
printDialogDataGetEnablePrintToFile :: PrintDialogData a -> IO Bool

-- | usage: (<tt>printDialogDataGetEnableSelection obj</tt>).
printDialogDataGetEnableSelection :: PrintDialogData a -> IO Bool

-- | usage: (<tt>printDialogDataGetFromPage obj</tt>).
printDialogDataGetFromPage :: PrintDialogData a -> IO Int

-- | usage: (<tt>printDialogDataGetMaxPage obj</tt>).
printDialogDataGetMaxPage :: PrintDialogData a -> IO Int

-- | usage: (<tt>printDialogDataGetMinPage obj</tt>).
printDialogDataGetMinPage :: PrintDialogData a -> IO Int

-- | usage: (<tt>printDialogDataGetNoCopies obj</tt>).
printDialogDataGetNoCopies :: PrintDialogData a -> IO Int

-- | usage: (<tt>printDialogDataGetPrintData obj</tt>).
printDialogDataGetPrintData :: PrintDialogData a -> IO (PrintData ())

-- | usage: (<tt>printDialogDataGetPrintToFile obj</tt>).
printDialogDataGetPrintToFile :: PrintDialogData a -> IO Bool

-- | usage: (<tt>printDialogDataGetSelection obj</tt>).
printDialogDataGetSelection :: PrintDialogData a -> IO Bool

-- | usage: (<tt>printDialogDataGetToPage obj</tt>).
printDialogDataGetToPage :: PrintDialogData a -> IO Int

-- | usage: (<tt>printDialogDataSetAllPages obj flag</tt>).
printDialogDataSetAllPages :: PrintDialogData a -> Bool -> IO ()

-- | usage: (<tt>printDialogDataSetCollate obj flag</tt>).
printDialogDataSetCollate :: PrintDialogData a -> Bool -> IO ()

-- | usage: (<tt>printDialogDataSetFromPage obj v</tt>).
printDialogDataSetFromPage :: PrintDialogData a -> Int -> IO ()

-- | usage: (<tt>printDialogDataSetMaxPage obj v</tt>).
printDialogDataSetMaxPage :: PrintDialogData a -> Int -> IO ()

-- | usage: (<tt>printDialogDataSetMinPage obj v</tt>).
printDialogDataSetMinPage :: PrintDialogData a -> Int -> IO ()

-- | usage: (<tt>printDialogDataSetNoCopies obj v</tt>).
printDialogDataSetNoCopies :: PrintDialogData a -> Int -> IO ()

-- | usage: (<tt>printDialogDataSetPrintData obj printData</tt>).
printDialogDataSetPrintData :: PrintDialogData a -> PrintData b -> IO ()

-- | usage: (<tt>printDialogDataSetPrintToFile obj flag</tt>).
printDialogDataSetPrintToFile :: PrintDialogData a -> Bool -> IO ()

-- | usage: (<tt>printDialogDataSetSelection obj flag</tt>).
printDialogDataSetSelection :: PrintDialogData a -> Bool -> IO ()

-- | usage: (<tt>printDialogDataSetToPage obj v</tt>).
printDialogDataSetToPage :: PrintDialogData a -> Int -> IO ()

-- | usage: (<tt>printPreviewCreateFromData printout printoutForPrinting
--   wxdata</tt>).
printPreviewCreateFromData :: Printout a -> Printout b -> PrintData c -> IO (PrintPreview ())

-- | usage: (<tt>printPreviewCreateFromDialogData printout
--   printoutForPrinting wxdata</tt>).
printPreviewCreateFromDialogData :: Printout a -> Printout b -> PrintDialogData c -> IO (PrintPreview ())

-- | usage: (<tt>printPreviewDelete obj</tt>).
printPreviewDelete :: PrintPreview a -> IO ()

-- | usage: (<tt>printPreviewDetermineScaling obj</tt>).
printPreviewDetermineScaling :: PrintPreview a -> IO ()

-- | usage: (<tt>printPreviewDrawBlankPage obj canvas dc</tt>).
printPreviewDrawBlankPage :: PrintPreview a -> PreviewCanvas b -> DC c -> IO Bool

-- | usage: (<tt>printPreviewGetCanvas obj</tt>).
printPreviewGetCanvas :: PrintPreview a -> IO (PreviewCanvas ())

-- | usage: (<tt>printPreviewGetCurrentPage obj</tt>).
printPreviewGetCurrentPage :: PrintPreview a -> IO Int

-- | usage: (<tt>printPreviewGetFrame obj</tt>).
printPreviewGetFrame :: PrintPreview a -> IO (Frame ())

-- | usage: (<tt>printPreviewGetMaxPage obj</tt>).
printPreviewGetMaxPage :: PrintPreview a -> IO Int

-- | usage: (<tt>printPreviewGetMinPage obj</tt>).
printPreviewGetMinPage :: PrintPreview a -> IO Int

-- | usage: (<tt>printPreviewGetPrintDialogData obj</tt>).
printPreviewGetPrintDialogData :: PrintPreview a -> IO (PrintDialogData ())

-- | usage: (<tt>printPreviewGetPrintout obj</tt>).
printPreviewGetPrintout :: PrintPreview a -> IO (Printout ())

-- | usage: (<tt>printPreviewGetPrintoutForPrinting obj</tt>).
printPreviewGetPrintoutForPrinting :: PrintPreview a -> IO (Printout ())

-- | usage: (<tt>printPreviewGetZoom obj</tt>).
printPreviewGetZoom :: PrintPreview a -> IO Int

-- | usage: (<tt>printPreviewIsOk obj</tt>).
printPreviewIsOk :: PrintPreview a -> IO Bool

-- | usage: (<tt>printPreviewPaintPage obj canvas dc</tt>).
printPreviewPaintPage :: PrintPreview a -> PrintPreview b -> DC c -> IO Bool

-- | usage: (<tt>printPreviewPrint obj interactive</tt>).
printPreviewPrint :: PrintPreview a -> Bool -> IO Bool

-- | usage: (<tt>printPreviewRenderPage obj pageNum</tt>).
printPreviewRenderPage :: PrintPreview a -> Int -> IO Bool

-- | usage: (<tt>printPreviewSetCanvas obj canvas</tt>).
printPreviewSetCanvas :: PrintPreview a -> PreviewCanvas b -> IO ()

-- | usage: (<tt>printPreviewSetCurrentPage obj pageNum</tt>).
printPreviewSetCurrentPage :: PrintPreview a -> Int -> IO Bool

-- | usage: (<tt>printPreviewSetFrame obj frame</tt>).
printPreviewSetFrame :: PrintPreview a -> Frame b -> IO ()

-- | usage: (<tt>printPreviewSetOk obj ok</tt>).
printPreviewSetOk :: PrintPreview a -> Bool -> IO ()

-- | usage: (<tt>printPreviewSetPrintout obj printout</tt>).
printPreviewSetPrintout :: PrintPreview a -> Printout b -> IO ()

-- | usage: (<tt>printPreviewSetZoom obj percent</tt>).
printPreviewSetZoom :: PrintPreview a -> Int -> IO ()

-- | usage: (<tt>printerCreate wxdata</tt>).
printerCreate :: PrintDialogData a -> IO (Printer ())

-- | usage: (<tt>printerCreateAbortWindow obj parent printout</tt>).
printerCreateAbortWindow :: Printer a -> Window b -> Printout c -> IO (Window ())

-- | usage: (<tt>printerDelete obj</tt>).
printerDelete :: Printer a -> IO ()

-- | usage: (<tt>printerGetAbort obj</tt>).
printerGetAbort :: Printer a -> IO Bool

-- | usage: (<tt>printerGetLastError obj</tt>).
printerGetLastError :: Printer a -> IO Int

-- | usage: (<tt>printerGetPrintDialogData obj</tt>).
printerGetPrintDialogData :: Printer a -> IO (PrintDialogData ())

-- | usage: (<tt>printerPrint obj parent printout prompt</tt>).
printerPrint :: Printer a -> Window b -> Printout c -> Bool -> IO Bool

-- | usage: (<tt>printerPrintDialog obj parent</tt>).
printerPrintDialog :: Printer a -> Window b -> IO (DC ())

-- | usage: (<tt>printerReportError obj parent printout message</tt>).
printerReportError :: Printer a -> Window b -> Printout c -> String -> IO ()

-- | usage: (<tt>printerSetup obj parent</tt>).
printerSetup :: Printer a -> Window b -> IO Bool

-- | usage: (<tt>printerDCCreate wxdata</tt>).
printerDCCreate :: PrintData a -> IO (PrinterDC ())

-- | usage: (<tt>printerDCDelete self</tt>).
printerDCDelete :: PrinterDC a -> IO ()

-- | usage: (<tt>printerDCGetPaperRect self</tt>).
printerDCGetPaperRect :: PrinterDC a -> IO (Rect)

-- | usage: (<tt>printoutGetDC obj</tt>).
printoutGetDC :: Printout a -> IO (DC ())

-- | usage: (<tt>printoutGetPPIPrinter obj</tt>).
printoutGetPPIPrinter :: Printout a -> IO Point

-- | usage: (<tt>printoutGetPPIScreen obj</tt>).
printoutGetPPIScreen :: Printout a -> IO Point

-- | usage: (<tt>printoutGetPageSizeMM obj</tt>).
printoutGetPageSizeMM :: Printout a -> IO Size

-- | usage: (<tt>printoutGetPageSizePixels obj</tt>).
printoutGetPageSizePixels :: Printout a -> IO Size

-- | usage: (<tt>printoutGetTitle obj</tt>).
printoutGetTitle :: Printout a -> IO (String)

-- | usage: (<tt>printoutIsPreview obj</tt>).
printoutIsPreview :: Printout a -> IO Bool

-- | usage: (<tt>printoutSetDC obj dc</tt>).
printoutSetDC :: Printout a -> DC b -> IO ()

-- | usage: (<tt>printoutSetPPIPrinter obj xy</tt>).
printoutSetPPIPrinter :: Printout a -> Point -> IO ()

-- | usage: (<tt>printoutSetPPIScreen obj xy</tt>).
printoutSetPPIScreen :: Printout a -> Point -> IO ()

-- | usage: (<tt>printoutSetPageSizeMM obj wh</tt>).
printoutSetPageSizeMM :: Printout a -> Size -> IO ()

-- | usage: (<tt>printoutSetPageSizePixels obj wh</tt>).
printoutSetPageSizePixels :: Printout a -> Size -> IO ()

-- | usage: (<tt>processCloseOutput obj</tt>).
processCloseOutput :: Process a -> IO ()

-- | usage: (<tt>processCreateDefault prt id</tt>).
processCreateDefault :: Window a -> Id -> IO (Process ())

-- | usage: (<tt>processCreateRedirect prt rdr</tt>).
processCreateRedirect :: Window a -> Bool -> IO (Process ())

-- | usage: (<tt>processDelete obj</tt>).
processDelete :: Process a -> IO ()

-- | usage: (<tt>processDetach obj</tt>).
processDetach :: Process a -> IO ()

-- | usage: (<tt>processGetErrorStream obj</tt>).
processGetErrorStream :: Process a -> IO (InputStream ())

-- | usage: (<tt>processGetInputStream obj</tt>).
processGetInputStream :: Process a -> IO (InputStream ())

-- | usage: (<tt>processGetOutputStream obj</tt>).
processGetOutputStream :: Process a -> IO (OutputStream ())

-- | usage: (<tt>processIsErrorAvailable obj</tt>).
processIsErrorAvailable :: Process a -> IO Bool

-- | usage: (<tt>processIsInputAvailable obj</tt>).
processIsInputAvailable :: Process a -> IO Bool

-- | usage: (<tt>processIsInputOpened obj</tt>).
processIsInputOpened :: Process a -> IO Bool

-- | usage: (<tt>processIsRedirected obj</tt>).
processIsRedirected :: Process a -> IO Bool

-- | usage: (<tt>processOpen cmd flags</tt>).
processOpen :: String -> Int -> IO (Process ())

-- | usage: (<tt>processRedirect obj</tt>).
processRedirect :: Process a -> IO ()

-- | usage: (<tt>processEventGetExitCode obj</tt>).
processEventGetExitCode :: ProcessEvent a -> IO Int

-- | usage: (<tt>processEventGetPid obj</tt>).
processEventGetPid :: ProcessEvent a -> IO Int

-- | usage: (<tt>progressDialogCreate title message max parent style</tt>).
progressDialogCreate :: String -> String -> Int -> Window d -> Int -> IO (ProgressDialog ())

-- | usage: (<tt>progressDialogResume obj</tt>).
progressDialogResume :: ProgressDialog a -> IO ()

-- | usage: (<tt>progressDialogUpdate obj value</tt>).
progressDialogUpdate :: ProgressDialog a -> Int -> IO Bool

-- | usage: (<tt>progressDialogUpdateWithMessage obj value message</tt>).
progressDialogUpdateWithMessage :: ProgressDialog a -> Int -> String -> IO Bool

-- | usage: (<tt>propertyCategoryCreate label</tt>).
propertyCategoryCreate :: String -> IO (PropertyCategory ())

-- | usage: (<tt>propertyGridAppend obj prop</tt>).
propertyGridAppend :: PropertyGrid a -> PGProperty b -> IO (PGProperty ())

-- | usage: (<tt>propertyGridCreate prt id lfttopwdthgt stl</tt>).
propertyGridCreate :: Window a -> Id -> Rect -> Style -> IO (PropertyGrid ())

-- | usage: (<tt>propertyGridDisableProperty obj propName</tt>).
propertyGridDisableProperty :: PropertyGrid a -> String -> IO Bool

-- | usage: (<tt>propertyGridEventGetProperty obj</tt>).
propertyGridEventGetProperty :: PropertyGridEvent a -> IO (PGProperty ())

-- | usage: (<tt>propertyGridEventHasProperty obj</tt>).
propertyGridEventHasProperty :: PropertyGridEvent a -> IO Bool

-- | usage: (<tt>queryLayoutInfoEventCreate id</tt>).
queryLayoutInfoEventCreate :: Id -> IO (QueryLayoutInfoEvent ())

-- | usage: (<tt>queryLayoutInfoEventGetAlignment obj</tt>).
queryLayoutInfoEventGetAlignment :: QueryLayoutInfoEvent a -> IO Int

-- | usage: (<tt>queryLayoutInfoEventGetFlags obj</tt>).
queryLayoutInfoEventGetFlags :: QueryLayoutInfoEvent a -> IO Int

-- | usage: (<tt>queryLayoutInfoEventGetOrientation obj</tt>).
queryLayoutInfoEventGetOrientation :: QueryLayoutInfoEvent a -> IO Int

-- | usage: (<tt>queryLayoutInfoEventGetRequestedLength obj</tt>).
queryLayoutInfoEventGetRequestedLength :: QueryLayoutInfoEvent a -> IO Int

-- | usage: (<tt>queryLayoutInfoEventGetSize obj</tt>).
queryLayoutInfoEventGetSize :: QueryLayoutInfoEvent a -> IO (Size)

-- | usage: (<tt>queryLayoutInfoEventSetAlignment obj align</tt>).
queryLayoutInfoEventSetAlignment :: QueryLayoutInfoEvent a -> Int -> IO ()

-- | usage: (<tt>queryLayoutInfoEventSetFlags obj flags</tt>).
queryLayoutInfoEventSetFlags :: QueryLayoutInfoEvent a -> Int -> IO ()

-- | usage: (<tt>queryLayoutInfoEventSetOrientation obj orient</tt>).
queryLayoutInfoEventSetOrientation :: QueryLayoutInfoEvent a -> Int -> IO ()

-- | usage: (<tt>queryLayoutInfoEventSetRequestedLength obj length</tt>).
queryLayoutInfoEventSetRequestedLength :: QueryLayoutInfoEvent a -> Int -> IO ()

-- | usage: (<tt>queryLayoutInfoEventSetSize obj wh</tt>).
queryLayoutInfoEventSetSize :: QueryLayoutInfoEvent a -> Size -> IO ()

-- | usage: (<tt>queryNewPaletteEventCopyObject obj obj</tt>).
queryNewPaletteEventCopyObject :: QueryNewPaletteEvent a -> WxObject b -> IO ()

-- | usage: (<tt>queryNewPaletteEventGetPaletteRealized obj</tt>).
queryNewPaletteEventGetPaletteRealized :: QueryNewPaletteEvent a -> IO Bool

-- | usage: (<tt>queryNewPaletteEventSetPaletteRealized obj realized</tt>).
queryNewPaletteEventSetPaletteRealized :: QueryNewPaletteEvent a -> Bool -> IO ()

-- | usage: (<tt>radioBoxCreate prt id txt lfttopwdthgt nstr dim stl</tt>).
radioBoxCreate :: Window a -> Id -> String -> Rect -> [String] -> Int -> Style -> IO (RadioBox ())

-- | usage: (<tt>radioBoxEnableItem obj item enable</tt>).
radioBoxEnableItem :: RadioBox a -> Int -> Bool -> IO ()

-- | usage: (<tt>radioBoxFindString obj s</tt>).
radioBoxFindString :: RadioBox a -> String -> IO Int

-- | usage: (<tt>radioBoxGetItemLabel obj item</tt>).
radioBoxGetItemLabel :: RadioBox a -> Int -> IO (String)

-- | usage: (<tt>radioBoxGetNumberOfRowsOrCols obj</tt>).
radioBoxGetNumberOfRowsOrCols :: RadioBox a -> IO Int

-- | usage: (<tt>radioBoxGetSelection obj</tt>).
radioBoxGetSelection :: RadioBox a -> IO Int

-- | usage: (<tt>radioBoxGetStringSelection obj</tt>).
radioBoxGetStringSelection :: RadioBox a -> IO (String)

-- | usage: (<tt>radioBoxNumber obj</tt>).
radioBoxNumber :: RadioBox a -> IO Int

-- | usage: (<tt>radioBoxSetItemBitmap obj item bitmap</tt>).
radioBoxSetItemBitmap :: RadioBox a -> Int -> Bitmap c -> IO ()

-- | usage: (<tt>radioBoxSetItemLabel obj item label</tt>).
radioBoxSetItemLabel :: RadioBox a -> Int -> String -> IO ()

-- | usage: (<tt>radioBoxSetNumberOfRowsOrCols obj n</tt>).
radioBoxSetNumberOfRowsOrCols :: RadioBox a -> Int -> IO ()

-- | usage: (<tt>radioBoxSetSelection obj n</tt>).
radioBoxSetSelection :: RadioBox a -> Int -> IO ()

-- | usage: (<tt>radioBoxSetStringSelection obj s</tt>).
radioBoxSetStringSelection :: RadioBox a -> String -> IO ()

-- | usage: (<tt>radioBoxShowItem obj item show</tt>).
radioBoxShowItem :: RadioBox a -> Int -> Bool -> IO ()

-- | usage: (<tt>radioButtonCreate prt id txt lfttopwdthgt stl</tt>).
radioButtonCreate :: Window a -> Id -> String -> Rect -> Style -> IO (RadioButton ())

-- | usage: (<tt>radioButtonGetValue obj</tt>).
radioButtonGetValue :: RadioButton a -> IO Bool

-- | usage: (<tt>radioButtonSetValue obj value</tt>).
radioButtonSetValue :: RadioButton a -> Bool -> IO ()

-- | usage: (<tt>regionAssign obj region</tt>).
regionAssign :: Region a -> Region b -> IO ()

-- | usage: (<tt>regionClear obj</tt>).
regionClear :: Region a -> IO ()

-- | usage: (<tt>regionContainsPoint obj xy</tt>).
regionContainsPoint :: Region a -> Point -> IO Bool

-- | usage: (<tt>regionContainsRect obj xywidthheight</tt>).
regionContainsRect :: Region a -> Rect -> IO Bool

-- | usage: (<tt>regionCreateDefault</tt>).
regionCreateDefault :: IO (Region ())

-- | usage: (<tt>regionCreateFromRect xywh</tt>).
regionCreateFromRect :: Rect -> IO (Region ())

-- | usage: (<tt>regionDelete obj</tt>).
regionDelete :: Region a -> IO ()

-- | usage: (<tt>regionGetBox obj</tt>).
regionGetBox :: Region a -> IO Rect

-- | usage: (<tt>regionIntersectRect obj xywidthheight</tt>).
regionIntersectRect :: Region a -> Rect -> IO Bool

-- | usage: (<tt>regionIntersectRegion obj region</tt>).
regionIntersectRegion :: Region a -> Region b -> IO Bool

-- | usage: (<tt>regionIsEmpty obj</tt>).
regionIsEmpty :: Region a -> IO Bool

-- | usage: (<tt>regionSubtractRect obj xywidthheight</tt>).
regionSubtractRect :: Region a -> Rect -> IO Bool

-- | usage: (<tt>regionSubtractRegion obj region</tt>).
regionSubtractRegion :: Region a -> Region b -> IO Bool

-- | usage: (<tt>regionUnionRect obj xywidthheight</tt>).
regionUnionRect :: Region a -> Rect -> IO Bool

-- | usage: (<tt>regionUnionRegion obj region</tt>).
regionUnionRegion :: Region a -> Region b -> IO Bool

-- | usage: (<tt>regionXorRect obj xywidthheight</tt>).
regionXorRect :: Region a -> Rect -> IO Bool

-- | usage: (<tt>regionXorRegion obj region</tt>).
regionXorRegion :: Region a -> Region b -> IO Bool

-- | usage: (<tt>regionIteratorCreate</tt>).
regionIteratorCreate :: IO (RegionIterator ())

-- | usage: (<tt>regionIteratorCreateFromRegion region</tt>).
regionIteratorCreateFromRegion :: Region a -> IO (RegionIterator ())

-- | usage: (<tt>regionIteratorDelete obj</tt>).
regionIteratorDelete :: RegionIterator a -> IO ()

-- | usage: (<tt>regionIteratorGetHeight obj</tt>).
regionIteratorGetHeight :: RegionIterator a -> IO Int

-- | usage: (<tt>regionIteratorGetWidth obj</tt>).
regionIteratorGetWidth :: RegionIterator a -> IO Int

-- | usage: (<tt>regionIteratorGetX obj</tt>).
regionIteratorGetX :: RegionIterator a -> IO Int

-- | usage: (<tt>regionIteratorGetY obj</tt>).
regionIteratorGetY :: RegionIterator a -> IO Int

-- | usage: (<tt>regionIteratorHaveRects obj</tt>).
regionIteratorHaveRects :: RegionIterator a -> IO Bool

-- | usage: (<tt>regionIteratorNext obj</tt>).
regionIteratorNext :: RegionIterator a -> IO ()

-- | usage: (<tt>regionIteratorReset obj</tt>).
regionIteratorReset :: RegionIterator a -> IO ()

-- | usage: (<tt>regionIteratorResetToRegion obj region</tt>).
regionIteratorResetToRegion :: RegionIterator a -> Region b -> IO ()

-- | usage: (<tt>svgFileDCCreate fileName</tt>).
svgFileDCCreate :: String -> IO (SVGFileDC ())

-- | usage: (<tt>svgFileDCCreateWithSize fileName wh</tt>).
svgFileDCCreateWithSize :: String -> Size -> IO (SVGFileDC ())

-- | usage: (<tt>svgFileDCCreateWithSizeAndResolution fileName wh
--   adpi</tt>).
svgFileDCCreateWithSizeAndResolution :: String -> Size -> Float -> IO (SVGFileDC ())

-- | usage: (<tt>svgFileDCDelete obj</tt>).
svgFileDCDelete :: SVGFileDC a -> IO ()

-- | usage: (<tt>sashEventCreate id edge</tt>).
sashEventCreate :: Id -> Int -> IO (SashEvent ())

-- | usage: (<tt>sashEventGetDragRect obj</tt>).
sashEventGetDragRect :: SashEvent a -> IO (Rect)

-- | usage: (<tt>sashEventGetDragStatus obj</tt>).
sashEventGetDragStatus :: SashEvent a -> IO Int

-- | usage: (<tt>sashEventGetEdge obj</tt>).
sashEventGetEdge :: SashEvent a -> IO Int

-- | usage: (<tt>sashEventSetDragRect obj xywh</tt>).
sashEventSetDragRect :: SashEvent a -> Rect -> IO ()

-- | usage: (<tt>sashEventSetDragStatus obj status</tt>).
sashEventSetDragStatus :: SashEvent a -> Int -> IO ()

-- | usage: (<tt>sashEventSetEdge obj edge</tt>).
sashEventSetEdge :: SashEvent a -> Int -> IO ()

-- | usage: (<tt>sashLayoutWindowCreate par id xywh stl</tt>).
sashLayoutWindowCreate :: Window a -> Id -> Rect -> Style -> IO (SashLayoutWindow ())

-- | usage: (<tt>sashLayoutWindowGetAlignment obj</tt>).
sashLayoutWindowGetAlignment :: SashLayoutWindow a -> IO Int

-- | usage: (<tt>sashLayoutWindowGetOrientation obj</tt>).
sashLayoutWindowGetOrientation :: SashLayoutWindow a -> IO Int

-- | usage: (<tt>sashLayoutWindowSetAlignment obj align</tt>).
sashLayoutWindowSetAlignment :: SashLayoutWindow a -> Int -> IO ()

-- | usage: (<tt>sashLayoutWindowSetDefaultSize obj wh</tt>).
sashLayoutWindowSetDefaultSize :: SashLayoutWindow a -> Size -> IO ()

-- | usage: (<tt>sashLayoutWindowSetOrientation obj orient</tt>).
sashLayoutWindowSetOrientation :: SashLayoutWindow a -> Int -> IO ()

-- | usage: (<tt>sashWindowCreate par id xywh stl</tt>).
sashWindowCreate :: Window a -> Id -> Rect -> Style -> IO (SashWindow ())

-- | usage: (<tt>sashWindowGetDefaultBorderSize obj</tt>).
sashWindowGetDefaultBorderSize :: SashWindow a -> IO Int

-- | usage: (<tt>sashWindowGetEdgeMargin obj edge</tt>).
sashWindowGetEdgeMargin :: SashWindow a -> Int -> IO Int

-- | usage: (<tt>sashWindowGetExtraBorderSize obj</tt>).
sashWindowGetExtraBorderSize :: SashWindow a -> IO Int

-- | usage: (<tt>sashWindowGetMaximumSizeX obj</tt>).
sashWindowGetMaximumSizeX :: SashWindow a -> IO Int

-- | usage: (<tt>sashWindowGetMaximumSizeY obj</tt>).
sashWindowGetMaximumSizeY :: SashWindow a -> IO Int

-- | usage: (<tt>sashWindowGetMinimumSizeX obj</tt>).
sashWindowGetMinimumSizeX :: SashWindow a -> IO Int

-- | usage: (<tt>sashWindowGetMinimumSizeY obj</tt>).
sashWindowGetMinimumSizeY :: SashWindow a -> IO Int

-- | usage: (<tt>sashWindowGetSashVisible obj edge</tt>).
sashWindowGetSashVisible :: SashWindow a -> Int -> IO Bool

-- | usage: (<tt>sashWindowHasBorder obj edge</tt>).
sashWindowHasBorder :: SashWindow a -> Int -> IO Bool

-- | usage: (<tt>sashWindowSetDefaultBorderSize obj width</tt>).
sashWindowSetDefaultBorderSize :: SashWindow a -> Int -> IO ()

-- | usage: (<tt>sashWindowSetExtraBorderSize obj width</tt>).
sashWindowSetExtraBorderSize :: SashWindow a -> Int -> IO ()

-- | usage: (<tt>sashWindowSetMaximumSizeX obj max</tt>).
sashWindowSetMaximumSizeX :: SashWindow a -> Int -> IO ()

-- | usage: (<tt>sashWindowSetMaximumSizeY obj max</tt>).
sashWindowSetMaximumSizeY :: SashWindow a -> Int -> IO ()

-- | usage: (<tt>sashWindowSetMinimumSizeX obj min</tt>).
sashWindowSetMinimumSizeX :: SashWindow a -> Int -> IO ()

-- | usage: (<tt>sashWindowSetMinimumSizeY obj min</tt>).
sashWindowSetMinimumSizeY :: SashWindow a -> Int -> IO ()

-- | usage: (<tt>sashWindowSetSashBorder obj edge border</tt>).
sashWindowSetSashBorder :: SashWindow a -> Int -> Bool -> IO ()

-- | usage: (<tt>sashWindowSetSashVisible obj edge sash</tt>).
sashWindowSetSashVisible :: SashWindow a -> Int -> Bool -> IO ()

-- | usage: (<tt>screenDCCreate</tt>).
screenDCCreate :: IO (ScreenDC ())

-- | usage: (<tt>screenDCDelete obj</tt>).
screenDCDelete :: ScreenDC a -> IO ()

-- | usage: (<tt>screenDCEndDrawingOnTop obj</tt>).
screenDCEndDrawingOnTop :: ScreenDC a -> IO Bool

-- | usage: (<tt>screenDCStartDrawingOnTop obj xywh</tt>).
screenDCStartDrawingOnTop :: ScreenDC a -> Rect -> IO Bool

-- | usage: (<tt>screenDCStartDrawingOnTopOfWin obj win</tt>).
screenDCStartDrawingOnTopOfWin :: ScreenDC a -> Window b -> IO Bool

-- | usage: (<tt>scrollBarCreate prt id lfttopwdthgt stl</tt>).
scrollBarCreate :: Window a -> Id -> Rect -> Style -> IO (ScrollBar ())

-- | usage: (<tt>scrollBarGetPageSize obj</tt>).
scrollBarGetPageSize :: ScrollBar a -> IO Int

-- | usage: (<tt>scrollBarGetRange obj</tt>).
scrollBarGetRange :: ScrollBar a -> IO Int

-- | usage: (<tt>scrollBarGetThumbPosition obj</tt>).
scrollBarGetThumbPosition :: ScrollBar a -> IO Int

-- | usage: (<tt>scrollBarGetThumbSize obj</tt>).
scrollBarGetThumbSize :: ScrollBar a -> IO Int

-- | usage: (<tt>scrollBarSetScrollbar obj position thumbSize range
--   pageSize refresh</tt>).
scrollBarSetScrollbar :: ScrollBar a -> Int -> Int -> Int -> Int -> Bool -> IO ()

-- | usage: (<tt>scrollBarSetThumbPosition obj viewStart</tt>).
scrollBarSetThumbPosition :: ScrollBar a -> Int -> IO ()

-- | usage: (<tt>scrollEventGetOrientation obj</tt>).
scrollEventGetOrientation :: ScrollEvent a -> IO Int

-- | usage: (<tt>scrollEventGetPosition obj</tt>).
scrollEventGetPosition :: ScrollEvent a -> IO Int

-- | usage: (<tt>scrollWinEventGetOrientation obj</tt>).
scrollWinEventGetOrientation :: ScrollWinEvent a -> IO Int

-- | usage: (<tt>scrollWinEventGetPosition obj</tt>).
scrollWinEventGetPosition :: ScrollWinEvent a -> IO Int

-- | usage: (<tt>scrollWinEventSetOrientation obj orient</tt>).
scrollWinEventSetOrientation :: ScrollWinEvent a -> Int -> IO ()

-- | usage: (<tt>scrollWinEventSetPosition obj pos</tt>).
scrollWinEventSetPosition :: ScrollWinEvent a -> Int -> IO ()

-- | usage: (<tt>scrolledWindowAdjustScrollbars obj</tt>).
scrolledWindowAdjustScrollbars :: ScrolledWindow a -> IO ()

-- | usage: (<tt>scrolledWindowCalcScrolledPosition obj xy</tt>).
scrolledWindowCalcScrolledPosition :: ScrolledWindow a -> Point -> IO Point

-- | usage: (<tt>scrolledWindowCalcUnscrolledPosition obj xy</tt>).
scrolledWindowCalcUnscrolledPosition :: ScrolledWindow a -> Point -> IO Point

-- | usage: (<tt>scrolledWindowCreate prt id lfttopwdthgt stl</tt>).
scrolledWindowCreate :: Window a -> Id -> Rect -> Style -> IO (ScrolledWindow ())

-- | usage: (<tt>scrolledWindowEnableScrolling obj xscrolling
--   yscrolling</tt>).
scrolledWindowEnableScrolling :: ScrolledWindow a -> Bool -> Bool -> IO ()

-- | usage: (<tt>scrolledWindowGetScaleX obj</tt>).
scrolledWindowGetScaleX :: ScrolledWindow a -> IO Double

-- | usage: (<tt>scrolledWindowGetScaleY obj</tt>).
scrolledWindowGetScaleY :: ScrolledWindow a -> IO Double

-- | usage: (<tt>scrolledWindowGetScrollPageSize obj orient</tt>).
scrolledWindowGetScrollPageSize :: ScrolledWindow a -> Int -> IO Int

-- | usage: (<tt>scrolledWindowGetScrollPixelsPerUnit obj</tt>).
scrolledWindowGetScrollPixelsPerUnit :: ScrolledWindow a -> IO Point

-- | usage: (<tt>scrolledWindowGetTargetWindow obj</tt>).
scrolledWindowGetTargetWindow :: ScrolledWindow a -> IO (Window ())

-- | usage: (<tt>scrolledWindowGetViewStart obj</tt>).
scrolledWindowGetViewStart :: ScrolledWindow a -> IO Point

-- | usage: (<tt>scrolledWindowGetVirtualSize obj</tt>).
scrolledWindowGetVirtualSize :: ScrolledWindow a -> IO Size

-- | usage: (<tt>scrolledWindowOnDraw obj dc</tt>).
scrolledWindowOnDraw :: ScrolledWindow a -> DC b -> IO ()

-- | usage: (<tt>scrolledWindowPrepareDC obj dc</tt>).
scrolledWindowPrepareDC :: ScrolledWindow a -> DC b -> IO ()

-- | usage: (<tt>scrolledWindowScroll obj xposypos</tt>).
scrolledWindowScroll :: ScrolledWindow a -> Point -> IO ()

-- | usage: (<tt>scrolledWindowSetScale obj xs ys</tt>).
scrolledWindowSetScale :: ScrolledWindow a -> Double -> Double -> IO ()

-- | usage: (<tt>scrolledWindowSetScrollPageSize obj orient pageSize</tt>).
scrolledWindowSetScrollPageSize :: ScrolledWindow a -> Int -> Int -> IO ()

-- | usage: (<tt>scrolledWindowSetScrollRate obj xstep ystep</tt>).
scrolledWindowSetScrollRate :: ScrolledWindow a -> Int -> Int -> IO ()

-- | usage: (<tt>scrolledWindowSetScrollbars obj pixelsPerUnitX
--   pixelsPerUnitY noUnitsX noUnitsY xPos yPos noRefresh</tt>).
scrolledWindowSetScrollbars :: ScrolledWindow a -> Int -> Int -> Int -> Int -> Int -> Int -> Bool -> IO ()

-- | usage: (<tt>scrolledWindowSetTargetWindow obj target</tt>).
scrolledWindowSetTargetWindow :: ScrolledWindow a -> Window b -> IO ()

-- | usage: (<tt>scrolledWindowShowScrollbars obj showh showv</tt>).
scrolledWindowShowScrollbars :: ScrolledWindow a -> Int -> Int -> IO ()

-- | usage: (<tt>scrolledWindowViewStart obj</tt>).
scrolledWindowViewStart :: ScrolledWindow a -> IO Point

-- | usage: (<tt>setCursorEventGetCursor obj</tt>).
setCursorEventGetCursor :: SetCursorEvent a -> IO (Cursor ())

-- | usage: (<tt>setCursorEventGetX obj</tt>).
setCursorEventGetX :: SetCursorEvent a -> IO Int

-- | usage: (<tt>setCursorEventGetY obj</tt>).
setCursorEventGetY :: SetCursorEvent a -> IO Int

-- | usage: (<tt>setCursorEventHasCursor obj</tt>).
setCursorEventHasCursor :: SetCursorEvent a -> IO Bool

-- | usage: (<tt>setCursorEventSetCursor obj cursor</tt>).
setCursorEventSetCursor :: SetCursorEvent a -> Cursor b -> IO ()

-- | usage: (<tt>showEventCopyObject obj obj</tt>).
showEventCopyObject :: ShowEvent a -> WxObject b -> IO ()

-- | usage: (<tt>showEventIsShown obj</tt>).
showEventIsShown :: ShowEvent a -> IO Bool

-- | usage: (<tt>showEventSetShow obj show</tt>).
showEventSetShow :: ShowEvent a -> Bool -> IO ()

-- | usage: (<tt>simpleHelpProviderCreate</tt>).
simpleHelpProviderCreate :: IO (SimpleHelpProvider ())

-- | usage: (<tt>singleInstanceCheckerCreate obj name path</tt>).
singleInstanceCheckerCreate :: Ptr a -> String -> String -> IO Bool

-- | usage: (<tt>singleInstanceCheckerCreateDefault</tt>).
singleInstanceCheckerCreateDefault :: IO (SingleInstanceChecker ())

-- | usage: (<tt>singleInstanceCheckerDelete obj</tt>).
singleInstanceCheckerDelete :: SingleInstanceChecker a -> IO ()

-- | usage: (<tt>singleInstanceCheckerIsAnotherRunning obj</tt>).
singleInstanceCheckerIsAnotherRunning :: SingleInstanceChecker a -> IO Bool

-- | usage: (<tt>sizeEventCopyObject obj obj</tt>).
sizeEventCopyObject :: SizeEvent a -> Ptr b -> IO ()

-- | usage: (<tt>sizeEventGetSize obj</tt>).
sizeEventGetSize :: SizeEvent a -> IO (Size)

-- | usage: (<tt>sizerAdd obj widthheight option flag border
--   userData</tt>).
sizerAdd :: Sizer a -> Size -> Int -> Int -> Int -> Ptr f -> IO ()

-- | usage: (<tt>sizerAddSizer obj sizer option flag border userData</tt>).
sizerAddSizer :: Sizer a -> Sizer b -> Int -> Int -> Int -> Ptr f -> IO ()

-- | usage: (<tt>sizerAddSpacer obj size</tt>).
sizerAddSpacer :: Sizer a -> Int -> IO ()

-- | usage: (<tt>sizerAddStretchSpacer obj size</tt>).
sizerAddStretchSpacer :: Sizer a -> Int -> IO ()

-- | usage: (<tt>sizerAddWindow obj window option flag border
--   userData</tt>).
sizerAddWindow :: Sizer a -> Window b -> Int -> Int -> Int -> Ptr f -> IO ()

-- | usage: (<tt>sizerCalcMin obj</tt>).
sizerCalcMin :: Sizer a -> IO (Size)

-- | usage: (<tt>sizerClear obj deletewindows</tt>).
sizerClear :: Sizer a -> Bool -> IO ()

-- | usage: (<tt>sizerDetach obj index</tt>).
sizerDetach :: Sizer a -> Int -> IO Bool

-- | usage: (<tt>sizerDetachSizer obj sizer</tt>).
sizerDetachSizer :: Sizer a -> Sizer b -> IO Bool

-- | usage: (<tt>sizerDetachWindow obj window</tt>).
sizerDetachWindow :: Sizer a -> Window b -> IO Bool

-- | usage: (<tt>sizerFit obj window</tt>).
sizerFit :: Sizer a -> Window b -> IO ()

-- | usage: (<tt>sizerFitInside obj window</tt>).
sizerFitInside :: Sizer a -> Window b -> IO ()

-- | usage: (<tt>sizerGetChildren obj res cnt</tt>).
sizerGetChildren :: Sizer a -> Ptr b -> Int -> IO Int

-- | usage: (<tt>sizerGetContainingWindow obj</tt>).
sizerGetContainingWindow :: Sizer a -> IO (Window ())

-- | usage: (<tt>sizerGetItem obj index</tt>).
sizerGetItem :: Sizer a -> Int -> IO (SizerItem ())

-- | usage: (<tt>sizerGetItemSizer obj window recursive</tt>).
sizerGetItemSizer :: Sizer a -> Sizer b -> Bool -> IO (SizerItem ())

-- | usage: (<tt>sizerGetItemWindow obj window recursive</tt>).
sizerGetItemWindow :: Sizer a -> Window b -> Bool -> IO (SizerItem ())

-- | usage: (<tt>sizerGetMinSize obj</tt>).
sizerGetMinSize :: Sizer a -> IO (Size)

-- | usage: (<tt>sizerGetPosition obj</tt>).
sizerGetPosition :: Sizer a -> IO (Point)

-- | usage: (<tt>sizerGetSize obj</tt>).
sizerGetSize :: Sizer a -> IO (Size)

-- | usage: (<tt>sizerHide obj index</tt>).
sizerHide :: Window a -> Int -> IO Bool

-- | usage: (<tt>sizerHideSizer obj sizer</tt>).
sizerHideSizer :: Window a -> Sizer b -> IO Bool

-- | usage: (<tt>sizerHideWindow obj window</tt>).
sizerHideWindow :: Window a -> Window b -> IO Bool

-- | usage: (<tt>sizerInsert obj before widthheight option flag border
--   userData</tt>).
sizerInsert :: Sizer a -> Int -> Size -> Int -> Int -> Int -> Ptr g -> IO ()

-- | usage: (<tt>sizerInsertSizer obj before sizer option flag border
--   userData</tt>).
sizerInsertSizer :: Sizer a -> Int -> Sizer c -> Int -> Int -> Int -> Ptr g -> IO ()

-- | usage: (<tt>sizerInsertSpacer obj index size</tt>).
sizerInsertSpacer :: Sizer a -> Int -> Int -> IO (SizerItem ())

-- | usage: (<tt>sizerInsertStretchSpacer obj index prop</tt>).
sizerInsertStretchSpacer :: Sizer a -> Int -> Int -> IO (SizerItem ())

-- | usage: (<tt>sizerInsertWindow obj before window option flag border
--   userData</tt>).
sizerInsertWindow :: Sizer a -> Int -> Window c -> Int -> Int -> Int -> Ptr g -> IO ()

-- | usage: (<tt>sizerIsShown obj index</tt>).
sizerIsShown :: Sizer a -> Int -> IO Bool

-- | usage: (<tt>sizerIsShownSizer obj sizer</tt>).
sizerIsShownSizer :: Sizer a -> Ptr (Ptr (TSizer b)) -> IO Bool

-- | usage: (<tt>sizerIsShownWindow obj window</tt>).
sizerIsShownWindow :: Sizer a -> Ptr (Ptr (TWindow b)) -> IO Bool

-- | usage: (<tt>sizerLayout obj</tt>).
sizerLayout :: Sizer a -> IO ()

-- | usage: (<tt>sizerPrepend obj widthheight option flag border
--   userData</tt>).
sizerPrepend :: Sizer a -> Size -> Int -> Int -> Int -> Ptr f -> IO ()

-- | usage: (<tt>sizerPrependSizer obj sizer option flag border
--   userData</tt>).
sizerPrependSizer :: Sizer a -> Sizer b -> Int -> Int -> Int -> Ptr f -> IO ()

-- | usage: (<tt>sizerPrependSpacer obj size</tt>).
sizerPrependSpacer :: Sizer a -> Int -> IO (SizerItem ())

-- | usage: (<tt>sizerPrependStretchSpacer obj prop</tt>).
sizerPrependStretchSpacer :: Sizer a -> Int -> IO (SizerItem ())

-- | usage: (<tt>sizerPrependWindow obj window option flag border
--   userData</tt>).
sizerPrependWindow :: Sizer a -> Window b -> Int -> Int -> Int -> Ptr f -> IO ()

-- | usage: (<tt>sizerRecalcSizes obj</tt>).
sizerRecalcSizes :: Sizer a -> IO ()

-- | usage: (<tt>sizerReplace obj oldindex newitem</tt>).
sizerReplace :: Sizer a -> Int -> SizerItem c -> IO Bool

-- | usage: (<tt>sizerReplaceSizer obj oldsz newsz recursive</tt>).
sizerReplaceSizer :: Sizer a -> Sizer b -> Sizer c -> Bool -> IO Bool

-- | usage: (<tt>sizerReplaceWindow obj oldwin newwin recursive</tt>).
sizerReplaceWindow :: Sizer a -> Window b -> Window c -> Bool -> IO Bool

-- | usage: (<tt>sizerSetDimension obj xywidthheight</tt>).
sizerSetDimension :: Sizer a -> Rect -> IO ()

-- | usage: (<tt>sizerSetItemMinSize obj pos widthheight</tt>).
sizerSetItemMinSize :: Sizer a -> Int -> Size -> IO ()

-- | usage: (<tt>sizerSetItemMinSizeSizer obj sizer widthheight</tt>).
sizerSetItemMinSizeSizer :: Sizer a -> Sizer b -> Size -> IO ()

-- | usage: (<tt>sizerSetItemMinSizeWindow obj window widthheight</tt>).
sizerSetItemMinSizeWindow :: Sizer a -> Window b -> Size -> IO ()

-- | usage: (<tt>sizerSetMinSize obj widthheight</tt>).
sizerSetMinSize :: Sizer a -> Size -> IO ()

-- | usage: (<tt>sizerSetSizeHints obj window</tt>).
sizerSetSizeHints :: Sizer a -> Window b -> IO ()

-- | usage: (<tt>sizerShow obj sizer index show</tt>).
sizerShow :: Sizer a -> Sizer b -> Int -> Bool -> IO Bool

-- | usage: (<tt>sizerShowSizer obj sizer show recursive</tt>).
sizerShowSizer :: Sizer a -> Sizer b -> Bool -> Bool -> IO Bool

-- | usage: (<tt>sizerShowWindow obj window show recursive</tt>).
sizerShowWindow :: Sizer a -> Window b -> Bool -> Bool -> IO Bool

-- | usage: (<tt>sizerItemAssignSizer obj sizer</tt>).
sizerItemAssignSizer :: SizerItem a -> Sizer b -> IO ()

-- | usage: (<tt>sizerItemAssignSpacer obj widthheight</tt>).
sizerItemAssignSpacer :: SizerItem a -> Size -> IO ()

-- | usage: (<tt>sizerItemAssignWindow obj window</tt>).
sizerItemAssignWindow :: SizerItem a -> Window b -> IO ()

-- | usage: (<tt>sizerItemCalcMin obj</tt>).
sizerItemCalcMin :: SizerItem a -> IO (Size)

-- | usage: (<tt>sizerItemCreate widthheight option flag border
--   userData</tt>).
sizerItemCreate :: Size -> Int -> Int -> Int -> Ptr e -> IO (SizerItem ())

-- | usage: (<tt>sizerItemCreateInSizer sizer option flag border
--   userData</tt>).
sizerItemCreateInSizer :: Sizer a -> Int -> Int -> Int -> Ptr e -> IO (Ptr ())

-- | usage: (<tt>sizerItemCreateInWindow window option flag border
--   userData</tt>).
sizerItemCreateInWindow :: Window a -> Int -> Int -> Int -> Ptr e -> IO (Ptr ())

-- | usage: (<tt>sizerItemDelete obj</tt>).
sizerItemDelete :: SizerItem a -> IO ()

-- | usage: (<tt>sizerItemDeleteWindows obj</tt>).
sizerItemDeleteWindows :: SizerItem a -> IO ()

-- | usage: (<tt>sizerItemDetachSizer obj</tt>).
sizerItemDetachSizer :: SizerItem a -> IO ()

-- | usage: (<tt>sizerItemGetBorder obj</tt>).
sizerItemGetBorder :: SizerItem a -> IO Int

-- | usage: (<tt>sizerItemGetFlag obj</tt>).
sizerItemGetFlag :: SizerItem a -> IO Int

-- | usage: (<tt>sizerItemGetMinSize obj</tt>).
sizerItemGetMinSize :: SizerItem a -> IO (Size)

-- | usage: (<tt>sizerItemGetPosition obj</tt>).
sizerItemGetPosition :: SizerItem a -> IO (Point)

-- | usage: (<tt>sizerItemGetProportion obj</tt>).
sizerItemGetProportion :: SizerItem a -> IO Int

-- | usage: (<tt>sizerItemGetRatio obj</tt>).
sizerItemGetRatio :: SizerItem a -> IO Float

-- | usage: (<tt>sizerItemGetRect obj</tt>).
sizerItemGetRect :: SizerItem a -> IO (Rect)

-- | usage: (<tt>sizerItemGetSize obj</tt>).
sizerItemGetSize :: SizerItem a -> IO (Size)

-- | usage: (<tt>sizerItemGetSizer obj</tt>).
sizerItemGetSizer :: SizerItem a -> IO (Sizer ())

-- | usage: (<tt>sizerItemGetSpacer obj</tt>).
sizerItemGetSpacer :: SizerItem a -> IO (Size)

-- | usage: (<tt>sizerItemGetUserData obj</tt>).
sizerItemGetUserData :: SizerItem a -> IO (Ptr ())

-- | usage: (<tt>sizerItemGetWindow obj</tt>).
sizerItemGetWindow :: SizerItem a -> IO (Window ())

-- | usage: (<tt>sizerItemIsShown obj</tt>).
sizerItemIsShown :: SizerItem a -> IO Bool

-- | usage: (<tt>sizerItemIsSizer obj</tt>).
sizerItemIsSizer :: SizerItem a -> IO Bool

-- | usage: (<tt>sizerItemIsSpacer obj</tt>).
sizerItemIsSpacer :: SizerItem a -> IO Bool

-- | usage: (<tt>sizerItemIsWindow obj</tt>).
sizerItemIsWindow :: SizerItem a -> IO Bool

-- | usage: (<tt>sizerItemSetBorder obj border</tt>).
sizerItemSetBorder :: SizerItem a -> Int -> IO ()

-- | usage: (<tt>sizerItemSetDimension obj xywh</tt>).
sizerItemSetDimension :: SizerItem a -> Rect -> IO ()

-- | usage: (<tt>sizerItemSetFlag obj flag</tt>).
sizerItemSetFlag :: SizerItem a -> Int -> IO ()

-- | usage: (<tt>sizerItemSetFloatRatio obj ratio</tt>).
sizerItemSetFloatRatio :: SizerItem a -> Float -> IO ()

-- | usage: (<tt>sizerItemSetInitSize obj xy</tt>).
sizerItemSetInitSize :: SizerItem a -> Point -> IO ()

-- | usage: (<tt>sizerItemSetProportion obj proportion</tt>).
sizerItemSetProportion :: SizerItem a -> Int -> IO ()

-- | usage: (<tt>sizerItemSetRatio obj widthheight</tt>).
sizerItemSetRatio :: SizerItem a -> Size -> IO ()

-- | usage: (<tt>sizerItemShow obj show</tt>).
sizerItemShow :: SizerItem a -> Int -> IO ()

-- | usage: (<tt>sliderClearSel obj</tt>).
sliderClearSel :: Slider a -> IO ()

-- | usage: (<tt>sliderClearTicks obj</tt>).
sliderClearTicks :: Slider a -> IO ()

-- | usage: (<tt>sliderCreate prt id wxinit min max lfttopwdthgt stl</tt>).
sliderCreate :: Window a -> Id -> Int -> Int -> Int -> Rect -> Style -> IO (Slider ())

-- | usage: (<tt>sliderGetLineSize obj</tt>).
sliderGetLineSize :: Slider a -> IO Int

-- | usage: (<tt>sliderGetMax obj</tt>).
sliderGetMax :: Slider a -> IO Int

-- | usage: (<tt>sliderGetMin obj</tt>).
sliderGetMin :: Slider a -> IO Int

-- | usage: (<tt>sliderGetPageSize obj</tt>).
sliderGetPageSize :: Slider a -> IO Int

-- | usage: (<tt>sliderGetSelEnd obj</tt>).
sliderGetSelEnd :: Slider a -> IO Int

-- | usage: (<tt>sliderGetSelStart obj</tt>).
sliderGetSelStart :: Slider a -> IO Int

-- | usage: (<tt>sliderGetThumbLength obj</tt>).
sliderGetThumbLength :: Slider a -> IO Int

-- | usage: (<tt>sliderGetTickFreq obj</tt>).
sliderGetTickFreq :: Slider a -> IO Int

-- | usage: (<tt>sliderGetValue obj</tt>).
sliderGetValue :: Slider a -> IO Int

-- | usage: (<tt>sliderSetLineSize obj lineSize</tt>).
sliderSetLineSize :: Slider a -> Int -> IO ()

-- | usage: (<tt>sliderSetPageSize obj pageSize</tt>).
sliderSetPageSize :: Slider a -> Int -> IO ()

-- | usage: (<tt>sliderSetRange obj minValue maxValue</tt>).
sliderSetRange :: Slider a -> Int -> Int -> IO ()

-- | usage: (<tt>sliderSetSelection obj minPos maxPos</tt>).
sliderSetSelection :: Slider a -> Int -> Int -> IO ()

-- | usage: (<tt>sliderSetThumbLength obj len</tt>).
sliderSetThumbLength :: Slider a -> Int -> IO ()

-- | usage: (<tt>sliderSetTick obj tickPos</tt>).
sliderSetTick :: Slider a -> Int -> IO ()

-- | usage: (<tt>sliderSetValue obj value</tt>).
sliderSetValue :: Slider a -> Int -> IO ()

-- | Usage: <tt>soundCreate fileName isResource</tt>. As yet (Nov 2003)
--   unsupported on MacOS X *
soundCreate :: String -> Bool -> IO (Sound ())

-- | usage: (<tt>soundDelete self</tt>).
soundDelete :: Sound a -> IO ()

-- | usage: (<tt>soundIsOk self</tt>).
soundIsOk :: Sound a -> IO Bool

-- | usage: (<tt>soundPlay self flag</tt>).
soundPlay :: Sound a -> Int -> IO Bool

-- | usage: (<tt>soundStop self</tt>).
soundStop :: Sound a -> IO ()

-- | usage: (<tt>spinButtonCreate prt id lfttopwdthgt stl</tt>).
spinButtonCreate :: Window a -> Id -> Rect -> Style -> IO (SpinButton ())

-- | usage: (<tt>spinButtonGetMax obj</tt>).
spinButtonGetMax :: SpinButton a -> IO Int

-- | usage: (<tt>spinButtonGetMin obj</tt>).
spinButtonGetMin :: SpinButton a -> IO Int

-- | usage: (<tt>spinButtonGetValue obj</tt>).
spinButtonGetValue :: SpinButton a -> IO Int

-- | usage: (<tt>spinButtonSetRange obj minVal maxVal</tt>).
spinButtonSetRange :: SpinButton a -> Int -> Int -> IO ()

-- | usage: (<tt>spinButtonSetValue obj val</tt>).
spinButtonSetValue :: SpinButton a -> Int -> IO ()

-- | usage: (<tt>spinCtrlCreate prt id txt lfttopwdthgt stl min max
--   wxinit</tt>).
spinCtrlCreate :: Window a -> Id -> String -> Rect -> Style -> Int -> Int -> Int -> IO (SpinCtrl ())

-- | usage: (<tt>spinCtrlGetMax obj</tt>).
spinCtrlGetMax :: SpinCtrl a -> IO Int

-- | usage: (<tt>spinCtrlGetMin obj</tt>).
spinCtrlGetMin :: SpinCtrl a -> IO Int

-- | usage: (<tt>spinCtrlGetValue obj</tt>).
spinCtrlGetValue :: SpinCtrl a -> IO Int

-- | usage: (<tt>spinCtrlSetRange obj minval maxval</tt>).
spinCtrlSetRange :: SpinCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>spinCtrlSetValue obj val</tt>).
spinCtrlSetValue :: SpinCtrl a -> Int -> IO ()

-- | usage: (<tt>spinEventGetPosition obj</tt>).
spinEventGetPosition :: SpinEvent a -> IO Int

-- | usage: (<tt>spinEventSetPosition obj pos</tt>).
spinEventSetPosition :: SpinEvent a -> Int -> IO ()

-- | usage: (<tt>splashScreenCreate bmp sstl ms parent id lfttopwdthgt
--   stl</tt>).
splashScreenCreate :: Bitmap a -> Int -> Int -> Window d -> Id -> Rect -> Style -> IO (SplashScreen ())

-- | usage: (<tt>splashScreenGetSplashStyle obj</tt>).
splashScreenGetSplashStyle :: SplashScreen a -> IO Int

-- | usage: (<tt>splashScreenGetTimeout obj</tt>).
splashScreenGetTimeout :: SplashScreen a -> IO Int

-- | usage: (<tt>splitterWindowCreate prt id lfttopwdthgt stl</tt>).
splitterWindowCreate :: Window a -> Id -> Rect -> Style -> IO (SplitterWindow ())

-- | usage: (<tt>splitterWindowGetBorderSize obj</tt>).
splitterWindowGetBorderSize :: SplitterWindow a -> IO Int

-- | usage: (<tt>splitterWindowGetMinimumPaneSize obj</tt>).
splitterWindowGetMinimumPaneSize :: SplitterWindow a -> IO Int

-- | usage: (<tt>splitterWindowGetSashGravity obj</tt>).
splitterWindowGetSashGravity :: SplitterWindow a -> IO Double

-- | usage: (<tt>splitterWindowGetSashPosition obj</tt>).
splitterWindowGetSashPosition :: SplitterWindow a -> IO Int

-- | usage: (<tt>splitterWindowGetSashSize obj</tt>).
splitterWindowGetSashSize :: SplitterWindow a -> IO Int

-- | usage: (<tt>splitterWindowGetSplitMode obj</tt>).
splitterWindowGetSplitMode :: SplitterWindow a -> IO Int

-- | usage: (<tt>splitterWindowGetWindow1 obj</tt>).
splitterWindowGetWindow1 :: SplitterWindow a -> IO (Window ())

-- | usage: (<tt>splitterWindowGetWindow2 obj</tt>).
splitterWindowGetWindow2 :: SplitterWindow a -> IO (Window ())

-- | usage: (<tt>splitterWindowInitialize obj window</tt>).
splitterWindowInitialize :: SplitterWindow a -> Window b -> IO ()

-- | usage: (<tt>splitterWindowIsSplit obj</tt>).
splitterWindowIsSplit :: SplitterWindow a -> IO Bool

-- | usage: (<tt>splitterWindowReplaceWindow obj winOld winNew</tt>).
splitterWindowReplaceWindow :: SplitterWindow a -> Window b -> Window c -> IO Bool

-- | usage: (<tt>splitterWindowSetBorderSize obj width</tt>).
splitterWindowSetBorderSize :: SplitterWindow a -> Int -> IO ()

-- | usage: (<tt>splitterWindowSetMinimumPaneSize obj min</tt>).
splitterWindowSetMinimumPaneSize :: SplitterWindow a -> Int -> IO ()

-- | usage: (<tt>splitterWindowSetSashGravity obj gravity</tt>).
splitterWindowSetSashGravity :: SplitterWindow a -> Double -> IO ()

-- | usage: (<tt>splitterWindowSetSashPosition obj position redraw</tt>).
splitterWindowSetSashPosition :: SplitterWindow a -> Int -> Bool -> IO ()

-- | usage: (<tt>splitterWindowSetSplitMode obj mode</tt>).
splitterWindowSetSplitMode :: SplitterWindow a -> Int -> IO ()

-- | usage: (<tt>splitterWindowSplitHorizontally obj window1 window2
--   sashPosition</tt>).
splitterWindowSplitHorizontally :: SplitterWindow a -> Window b -> Window c -> Int -> IO Bool

-- | usage: (<tt>splitterWindowSplitVertically obj window1 window2
--   sashPosition</tt>).
splitterWindowSplitVertically :: SplitterWindow a -> Window b -> Window c -> Int -> IO Bool

-- | usage: (<tt>splitterWindowUnsplit obj toRemove</tt>).
splitterWindowUnsplit :: SplitterWindow a -> Window b -> IO Bool

-- | usage: (<tt>staticBitmapCreate prt id bitmap lfttopwdthgt stl</tt>).
staticBitmapCreate :: Window a -> Id -> Bitmap c -> Rect -> Style -> IO (StaticBitmap ())

-- | usage: (<tt>staticBitmapDelete obj</tt>).
staticBitmapDelete :: StaticBitmap a -> IO ()

-- | usage: (<tt>staticBitmapGetBitmap obj</tt>).
staticBitmapGetBitmap :: StaticBitmap a -> IO (Bitmap ())

-- | usage: (<tt>staticBitmapGetIcon obj</tt>).
staticBitmapGetIcon :: StaticBitmap a -> IO (Icon ())

-- | usage: (<tt>staticBitmapSetBitmap obj bitmap</tt>).
staticBitmapSetBitmap :: StaticBitmap a -> Bitmap b -> IO ()

-- | usage: (<tt>staticBitmapSetIcon obj icon</tt>).
staticBitmapSetIcon :: StaticBitmap a -> Icon b -> IO ()

-- | usage: (<tt>staticBoxCreate prt id txt lfttopwdthgt stl</tt>).
staticBoxCreate :: Window a -> Id -> String -> Rect -> Style -> IO (StaticBox ())

-- | usage: (<tt>staticBoxSizerCalcMin obj</tt>).
staticBoxSizerCalcMin :: StaticBoxSizer a -> IO (Size)

-- | usage: (<tt>staticBoxSizerCreate box orient</tt>).
staticBoxSizerCreate :: StaticBox a -> Int -> IO (StaticBoxSizer ())

-- | usage: (<tt>staticBoxSizerGetStaticBox obj</tt>).
staticBoxSizerGetStaticBox :: StaticBoxSizer a -> IO (StaticBox ())

-- | usage: (<tt>staticBoxSizerRecalcSizes obj</tt>).
staticBoxSizerRecalcSizes :: StaticBoxSizer a -> IO ()

-- | usage: (<tt>staticLineCreate prt id lfttopwdthgt stl</tt>).
staticLineCreate :: Window a -> Id -> Rect -> Style -> IO (StaticLine ())

-- | usage: (<tt>staticLineGetDefaultSize obj</tt>).
staticLineGetDefaultSize :: StaticLine a -> IO Int

-- | usage: (<tt>staticLineIsVertical obj</tt>).
staticLineIsVertical :: StaticLine a -> IO Bool

-- | usage: (<tt>staticTextCreate prt id txt lfttopwdthgt stl</tt>).
staticTextCreate :: Window a -> Id -> String -> Rect -> Style -> IO (StaticText ())

-- | usage: (<tt>statusBarCreate prt id lfttopwdthgt stl</tt>).
statusBarCreate :: Window a -> Id -> Rect -> Style -> IO (StatusBar ())

-- | usage: (<tt>statusBarGetBorderX obj</tt>).
statusBarGetBorderX :: StatusBar a -> IO Int

-- | usage: (<tt>statusBarGetBorderY obj</tt>).
statusBarGetBorderY :: StatusBar a -> IO Int

-- | usage: (<tt>statusBarGetFieldsCount obj</tt>).
statusBarGetFieldsCount :: StatusBar a -> IO Int

-- | usage: (<tt>statusBarGetStatusText obj number</tt>).
statusBarGetStatusText :: StatusBar a -> Int -> IO (String)

-- | usage: (<tt>statusBarSetFieldsCount obj number widths</tt>).
statusBarSetFieldsCount :: StatusBar a -> Int -> Ptr CInt -> IO ()

-- | usage: (<tt>statusBarSetMinHeight obj height</tt>).
statusBarSetMinHeight :: StatusBar a -> Int -> IO ()

-- | usage: (<tt>statusBarSetStatusText obj text number</tt>).
statusBarSetStatusText :: StatusBar a -> String -> Int -> IO ()

-- | usage: (<tt>statusBarSetStatusWidths obj n widths</tt>).
statusBarSetStatusWidths :: StatusBar a -> Int -> Ptr CInt -> IO ()

-- | usage: (<tt>stopWatchCreate</tt>).
stopWatchCreate :: IO (StopWatch ())

-- | usage: (<tt>stopWatchDelete obj</tt>).
stopWatchDelete :: StopWatch a -> IO ()

-- | usage: (<tt>stopWatchPause obj</tt>).
stopWatchPause :: StopWatch a -> IO ()

-- | usage: (<tt>stopWatchResume obj</tt>).
stopWatchResume :: StopWatch a -> IO ()

-- | usage: (<tt>stopWatchStart obj msec</tt>).
stopWatchStart :: StopWatch a -> Int -> IO ()

-- | usage: (<tt>stopWatchTime obj</tt>).
stopWatchTime :: StopWatch a -> IO Int

-- | usage: (<tt>streamBaseDelete obj</tt>).
streamBaseDelete :: StreamBase a -> IO ()

-- | usage: (<tt>streamBaseGetLastError obj</tt>).
streamBaseGetLastError :: StreamBase a -> IO Int

-- | usage: (<tt>streamBaseGetSize obj</tt>).
streamBaseGetSize :: StreamBase a -> IO Int

-- | usage: (<tt>streamBaseIsOk obj</tt>).
streamBaseIsOk :: StreamBase a -> IO Bool

-- | usage: (<tt>stringPropertyCreate label name value</tt>).
stringPropertyCreate :: String -> String -> String -> IO (StringProperty ())

-- | usage: (<tt>styledTextCtrlAddRefDocument obj docPointer</tt>).
styledTextCtrlAddRefDocument :: StyledTextCtrl a -> STCDoc b -> IO ()

-- | usage: (<tt>styledTextCtrlAddStyledText obj wxdata</tt>).
styledTextCtrlAddStyledText :: StyledTextCtrl a -> MemoryBuffer b -> IO ()

-- | usage: (<tt>styledTextCtrlAddText obj text</tt>).
styledTextCtrlAddText :: StyledTextCtrl a -> String -> IO ()

-- | usage: (<tt>styledTextCtrlAppendText obj text</tt>).
styledTextCtrlAppendText :: StyledTextCtrl a -> String -> IO ()

-- | usage: (<tt>styledTextCtrlAutoCompActive obj</tt>).
styledTextCtrlAutoCompActive :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlAutoCompCancel obj</tt>).
styledTextCtrlAutoCompCancel :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlAutoCompComplete obj</tt>).
styledTextCtrlAutoCompComplete :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlAutoCompGetAutoHide obj</tt>).
styledTextCtrlAutoCompGetAutoHide :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlAutoCompGetCancelAtStart obj</tt>).
styledTextCtrlAutoCompGetCancelAtStart :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlAutoCompGetChooseSingle obj</tt>).
styledTextCtrlAutoCompGetChooseSingle :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlAutoCompGetDropRestOfWord obj</tt>).
styledTextCtrlAutoCompGetDropRestOfWord :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlAutoCompGetIgnoreCase obj</tt>).
styledTextCtrlAutoCompGetIgnoreCase :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlAutoCompGetSeparator obj</tt>).
styledTextCtrlAutoCompGetSeparator :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlAutoCompGetTypeSeparator obj</tt>).
styledTextCtrlAutoCompGetTypeSeparator :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlAutoCompPosStart obj</tt>).
styledTextCtrlAutoCompPosStart :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlAutoCompSelect obj text</tt>).
styledTextCtrlAutoCompSelect :: StyledTextCtrl a -> String -> IO ()

-- | usage: (<tt>styledTextCtrlAutoCompSetAutoHide obj autoHide</tt>).
styledTextCtrlAutoCompSetAutoHide :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlAutoCompSetCancelAtStart obj cancel</tt>).
styledTextCtrlAutoCompSetCancelAtStart :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlAutoCompSetChooseSingle obj
--   chooseSingle</tt>).
styledTextCtrlAutoCompSetChooseSingle :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlAutoCompSetDropRestOfWord obj
--   dropRestOfWord</tt>).
styledTextCtrlAutoCompSetDropRestOfWord :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlAutoCompSetFillUps obj characterSet</tt>).
styledTextCtrlAutoCompSetFillUps :: StyledTextCtrl a -> String -> IO ()

-- | usage: (<tt>styledTextCtrlAutoCompSetIgnoreCase obj ignoreCase</tt>).
styledTextCtrlAutoCompSetIgnoreCase :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlAutoCompSetSeparator obj
--   separatorCharacter</tt>).
styledTextCtrlAutoCompSetSeparator :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlAutoCompSetTypeSeparator obj
--   separatorCharacter</tt>).
styledTextCtrlAutoCompSetTypeSeparator :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlAutoCompShow obj lenEntered itemList</tt>).
styledTextCtrlAutoCompShow :: StyledTextCtrl a -> Int -> String -> IO ()

-- | usage: (<tt>styledTextCtrlAutoCompStops obj characterSet</tt>).
styledTextCtrlAutoCompStops :: StyledTextCtrl a -> String -> IO ()

-- | usage: (<tt>styledTextCtrlBeginUndoAction obj</tt>).
styledTextCtrlBeginUndoAction :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlBraceBadLight obj pos</tt>).
styledTextCtrlBraceBadLight :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlBraceHighlight obj pos1 pos2</tt>).
styledTextCtrlBraceHighlight :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlBraceMatch obj pos</tt>).
styledTextCtrlBraceMatch :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlCallTipActive obj</tt>).
styledTextCtrlCallTipActive :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlCallTipCancel obj</tt>).
styledTextCtrlCallTipCancel :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlCallTipPosAtStart obj</tt>).
styledTextCtrlCallTipPosAtStart :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlCallTipSetBackground obj
--   backrbackgbackb</tt>).
styledTextCtrlCallTipSetBackground :: StyledTextCtrl a -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlCallTipSetForeground obj
--   forerforegforeb</tt>).
styledTextCtrlCallTipSetForeground :: StyledTextCtrl a -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlCallTipSetForegroundHighlight obj
--   forerforegforeb</tt>).
styledTextCtrlCallTipSetForegroundHighlight :: StyledTextCtrl a -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlCallTipSetHighlight obj start end</tt>).
styledTextCtrlCallTipSetHighlight :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlCallTipShow obj pos definition</tt>).
styledTextCtrlCallTipShow :: StyledTextCtrl a -> Int -> String -> IO ()

-- | usage: (<tt>styledTextCtrlCanPaste obj</tt>).
styledTextCtrlCanPaste :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlCanRedo obj</tt>).
styledTextCtrlCanRedo :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlCanUndo obj</tt>).
styledTextCtrlCanUndo :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlChooseCaretX obj</tt>).
styledTextCtrlChooseCaretX :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlClear obj</tt>).
styledTextCtrlClear :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlClearAll obj</tt>).
styledTextCtrlClearAll :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlClearDocumentStyle obj</tt>).
styledTextCtrlClearDocumentStyle :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlClearRegisteredImages obj</tt>).
styledTextCtrlClearRegisteredImages :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlCmdKeyAssign obj key modifiers cmd</tt>).
styledTextCtrlCmdKeyAssign :: StyledTextCtrl a -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlCmdKeyClear obj key modifiers</tt>).
styledTextCtrlCmdKeyClear :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlCmdKeyClearAll obj</tt>).
styledTextCtrlCmdKeyClearAll :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlCmdKeyExecute obj cmd</tt>).
styledTextCtrlCmdKeyExecute :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlColourise obj start end</tt>).
styledTextCtrlColourise :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlConvertEOLs obj eolMode</tt>).
styledTextCtrlConvertEOLs :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlCopy obj</tt>).
styledTextCtrlCopy :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlCopyRange obj start end</tt>).
styledTextCtrlCopyRange :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlCopyText obj length text</tt>).
styledTextCtrlCopyText :: StyledTextCtrl a -> Int -> String -> IO ()

-- | usage: (<tt>styledTextCtrlCreate prt id txt lfttopwdthgt style</tt>).
styledTextCtrlCreate :: Window a -> Id -> String -> Rect -> Int -> IO (StyledTextCtrl ())

-- | usage: (<tt>styledTextCtrlCreateDocument obj</tt>).
styledTextCtrlCreateDocument :: StyledTextCtrl a -> IO (STCDoc ())

-- | usage: (<tt>styledTextCtrlCut obj</tt>).
styledTextCtrlCut :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlDelLineLeft obj</tt>).
styledTextCtrlDelLineLeft :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlDelLineRight obj</tt>).
styledTextCtrlDelLineRight :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlDocLineFromVisible obj lineDisplay</tt>).
styledTextCtrlDocLineFromVisible :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlEmptyUndoBuffer obj</tt>).
styledTextCtrlEmptyUndoBuffer :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlEndUndoAction obj</tt>).
styledTextCtrlEndUndoAction :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlEnsureCaretVisible obj</tt>).
styledTextCtrlEnsureCaretVisible :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlEnsureVisible obj line</tt>).
styledTextCtrlEnsureVisible :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlEnsureVisibleEnforcePolicy obj line</tt>).
styledTextCtrlEnsureVisibleEnforcePolicy :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlFindText obj minPos maxPos text flags</tt>).
styledTextCtrlFindText :: StyledTextCtrl a -> Int -> Int -> String -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlFormatRange obj doDraw startPos endPos draw
--   target renderRect pageRect</tt>).
styledTextCtrlFormatRange :: StyledTextCtrl a -> Bool -> Int -> Int -> DC e -> DC f -> Rect -> Rect -> IO Int

-- | usage: (<tt>styledTextCtrlGetAnchor obj</tt>).
styledTextCtrlGetAnchor :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetBackSpaceUnIndents obj</tt>).
styledTextCtrlGetBackSpaceUnIndents :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetBufferedDraw obj</tt>).
styledTextCtrlGetBufferedDraw :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetCaretForeground obj</tt>).
styledTextCtrlGetCaretForeground :: StyledTextCtrl a -> IO (Color)

-- | usage: (<tt>styledTextCtrlGetCaretLineBackground obj</tt>).
styledTextCtrlGetCaretLineBackground :: StyledTextCtrl a -> IO (Color)

-- | usage: (<tt>styledTextCtrlGetCaretLineVisible obj</tt>).
styledTextCtrlGetCaretLineVisible :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetCaretPeriod obj</tt>).
styledTextCtrlGetCaretPeriod :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetCaretWidth obj</tt>).
styledTextCtrlGetCaretWidth :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetCharAt obj pos</tt>).
styledTextCtrlGetCharAt :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlGetCodePage obj</tt>).
styledTextCtrlGetCodePage :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetColumn obj pos</tt>).
styledTextCtrlGetColumn :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlGetControlCharSymbol obj</tt>).
styledTextCtrlGetControlCharSymbol :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetCurrentLine obj</tt>).
styledTextCtrlGetCurrentLine :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetCurrentPos obj</tt>).
styledTextCtrlGetCurrentPos :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetDocPointer obj</tt>).
styledTextCtrlGetDocPointer :: StyledTextCtrl a -> IO (STCDoc ())

-- | usage: (<tt>styledTextCtrlGetEOLMode obj</tt>).
styledTextCtrlGetEOLMode :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetEdgeColour obj</tt>).
styledTextCtrlGetEdgeColour :: StyledTextCtrl a -> IO (Color)

-- | usage: (<tt>styledTextCtrlGetEdgeColumn obj</tt>).
styledTextCtrlGetEdgeColumn :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetEdgeMode obj</tt>).
styledTextCtrlGetEdgeMode :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetEndAtLastLine obj</tt>).
styledTextCtrlGetEndAtLastLine :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetEndStyled obj</tt>).
styledTextCtrlGetEndStyled :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetFirstVisibleLine obj</tt>).
styledTextCtrlGetFirstVisibleLine :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetFoldExpanded obj line</tt>).
styledTextCtrlGetFoldExpanded :: StyledTextCtrl a -> Int -> IO Bool

-- | usage: (<tt>styledTextCtrlGetFoldLevel obj line</tt>).
styledTextCtrlGetFoldLevel :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlGetFoldParent obj line</tt>).
styledTextCtrlGetFoldParent :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlGetHighlightGuide obj</tt>).
styledTextCtrlGetHighlightGuide :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetIndent obj</tt>).
styledTextCtrlGetIndent :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetIndentationGuides obj</tt>).
styledTextCtrlGetIndentationGuides :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetLastChild obj line level</tt>).
styledTextCtrlGetLastChild :: StyledTextCtrl a -> Int -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlGetLastKeydownProcessed obj</tt>).
styledTextCtrlGetLastKeydownProcessed :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetLayoutCache obj</tt>).
styledTextCtrlGetLayoutCache :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetLength obj</tt>).
styledTextCtrlGetLength :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetLexer obj</tt>).
styledTextCtrlGetLexer :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetLine obj line</tt>).
styledTextCtrlGetLine :: StyledTextCtrl a -> Int -> IO (String)

-- | usage: (<tt>styledTextCtrlGetLineCount obj</tt>).
styledTextCtrlGetLineCount :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetLineEndPosition obj line</tt>).
styledTextCtrlGetLineEndPosition :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlGetLineIndentPosition obj line</tt>).
styledTextCtrlGetLineIndentPosition :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlGetLineIndentation obj line</tt>).
styledTextCtrlGetLineIndentation :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlGetLineState obj line</tt>).
styledTextCtrlGetLineState :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlGetLineVisible obj line</tt>).
styledTextCtrlGetLineVisible :: StyledTextCtrl a -> Int -> IO Bool

-- | usage: (<tt>styledTextCtrlGetMarginLeft obj</tt>).
styledTextCtrlGetMarginLeft :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetMarginMask obj margin</tt>).
styledTextCtrlGetMarginMask :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlGetMarginRight obj</tt>).
styledTextCtrlGetMarginRight :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetMarginSensitive obj margin</tt>).
styledTextCtrlGetMarginSensitive :: StyledTextCtrl a -> Int -> IO Bool

-- | usage: (<tt>styledTextCtrlGetMarginType obj margin</tt>).
styledTextCtrlGetMarginType :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlGetMarginWidth obj margin</tt>).
styledTextCtrlGetMarginWidth :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlGetMaxLineState obj</tt>).
styledTextCtrlGetMaxLineState :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetModEventMask obj</tt>).
styledTextCtrlGetModEventMask :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetModify obj</tt>).
styledTextCtrlGetModify :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetMouseDownCaptures obj</tt>).
styledTextCtrlGetMouseDownCaptures :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetMouseDwellTime obj</tt>).
styledTextCtrlGetMouseDwellTime :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetOvertype obj</tt>).
styledTextCtrlGetOvertype :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetPrintColourMode obj</tt>).
styledTextCtrlGetPrintColourMode :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetPrintMagnification obj</tt>).
styledTextCtrlGetPrintMagnification :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetPrintWrapMode obj</tt>).
styledTextCtrlGetPrintWrapMode :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetReadOnly obj</tt>).
styledTextCtrlGetReadOnly :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetSTCCursor obj</tt>).
styledTextCtrlGetSTCCursor :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetSTCFocus obj</tt>).
styledTextCtrlGetSTCFocus :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetScrollWidth obj</tt>).
styledTextCtrlGetScrollWidth :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetSearchFlags obj</tt>).
styledTextCtrlGetSearchFlags :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetSelectedText obj</tt>).
styledTextCtrlGetSelectedText :: StyledTextCtrl a -> IO (String)

-- | usage: (<tt>styledTextCtrlGetSelection obj startPos endPos</tt>).
styledTextCtrlGetSelection :: StyledTextCtrl a -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (<tt>styledTextCtrlGetSelectionEnd obj</tt>).
styledTextCtrlGetSelectionEnd :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetSelectionStart obj</tt>).
styledTextCtrlGetSelectionStart :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetStatus obj</tt>).
styledTextCtrlGetStatus :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetStyleAt obj pos</tt>).
styledTextCtrlGetStyleAt :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlGetStyleBits obj</tt>).
styledTextCtrlGetStyleBits :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetTabIndents obj</tt>).
styledTextCtrlGetTabIndents :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetTabWidth obj</tt>).
styledTextCtrlGetTabWidth :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetTargetEnd obj</tt>).
styledTextCtrlGetTargetEnd :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetTargetStart obj</tt>).
styledTextCtrlGetTargetStart :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetText obj</tt>).
styledTextCtrlGetText :: StyledTextCtrl a -> IO (String)

-- | usage: (<tt>styledTextCtrlGetTextLength obj</tt>).
styledTextCtrlGetTextLength :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetTextRange obj startPos endPos</tt>).
styledTextCtrlGetTextRange :: StyledTextCtrl a -> Int -> Int -> IO (String)

-- | usage: (<tt>styledTextCtrlGetTwoPhaseDraw obj</tt>).
styledTextCtrlGetTwoPhaseDraw :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetUndoCollection obj</tt>).
styledTextCtrlGetUndoCollection :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetUseHorizontalScrollBar obj</tt>).
styledTextCtrlGetUseHorizontalScrollBar :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetUseTabs obj</tt>).
styledTextCtrlGetUseTabs :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetUseVerticalScrollBar obj</tt>).
styledTextCtrlGetUseVerticalScrollBar :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetViewEOL obj</tt>).
styledTextCtrlGetViewEOL :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlGetViewWhiteSpace obj</tt>).
styledTextCtrlGetViewWhiteSpace :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetWrapMode obj</tt>).
styledTextCtrlGetWrapMode :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetXOffset obj</tt>).
styledTextCtrlGetXOffset :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGetZoom obj</tt>).
styledTextCtrlGetZoom :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlGotoLine obj line</tt>).
styledTextCtrlGotoLine :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlGotoPos obj pos</tt>).
styledTextCtrlGotoPos :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlHideLines obj lineStart lineEnd</tt>).
styledTextCtrlHideLines :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlHideSelection obj normal</tt>).
styledTextCtrlHideSelection :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlHomeDisplay obj</tt>).
styledTextCtrlHomeDisplay :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlHomeDisplayExtend obj</tt>).
styledTextCtrlHomeDisplayExtend :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlIndicatorGetForeground obj indic</tt>).
styledTextCtrlIndicatorGetForeground :: StyledTextCtrl a -> Int -> IO (Color)

-- | usage: (<tt>styledTextCtrlIndicatorGetStyle obj indic</tt>).
styledTextCtrlIndicatorGetStyle :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlIndicatorSetForeground obj indic
--   forerforegforeb</tt>).
styledTextCtrlIndicatorSetForeground :: StyledTextCtrl a -> Int -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlIndicatorSetStyle obj indic style</tt>).
styledTextCtrlIndicatorSetStyle :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlInsertText obj pos text</tt>).
styledTextCtrlInsertText :: StyledTextCtrl a -> Int -> String -> IO ()

-- | usage: (<tt>styledTextCtrlLineCopy obj</tt>).
styledTextCtrlLineCopy :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlLineDuplicate obj</tt>).
styledTextCtrlLineDuplicate :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlLineEndDisplay obj</tt>).
styledTextCtrlLineEndDisplay :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlLineEndDisplayExtend obj</tt>).
styledTextCtrlLineEndDisplayExtend :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlLineFromPosition obj pos</tt>).
styledTextCtrlLineFromPosition :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlLineLength obj line</tt>).
styledTextCtrlLineLength :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlLineScroll obj columns lines</tt>).
styledTextCtrlLineScroll :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlLinesJoin obj</tt>).
styledTextCtrlLinesJoin :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlLinesOnScreen obj</tt>).
styledTextCtrlLinesOnScreen :: StyledTextCtrl a -> IO Int

-- | usage: (<tt>styledTextCtrlLinesSplit obj pixelWidth</tt>).
styledTextCtrlLinesSplit :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlLoadFile obj filename</tt>).
styledTextCtrlLoadFile :: StyledTextCtrl a -> String -> IO Bool

-- | usage: (<tt>styledTextCtrlMarkerAdd obj line markerNumber</tt>).
styledTextCtrlMarkerAdd :: StyledTextCtrl a -> Int -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlMarkerDefine obj markerNumber markerSymbol
--   foregroundrforegroundgforegroundb
--   backgroundrbackgroundgbackgroundb</tt>).
styledTextCtrlMarkerDefine :: StyledTextCtrl a -> Int -> Int -> Color -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlMarkerDefineBitmap obj markerNumber
--   bmp</tt>).
styledTextCtrlMarkerDefineBitmap :: StyledTextCtrl a -> Int -> Bitmap c -> IO ()

-- | usage: (<tt>styledTextCtrlMarkerDelete obj line markerNumber</tt>).
styledTextCtrlMarkerDelete :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlMarkerDeleteAll obj markerNumber</tt>).
styledTextCtrlMarkerDeleteAll :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlMarkerDeleteHandle obj handle</tt>).
styledTextCtrlMarkerDeleteHandle :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlMarkerGet obj line</tt>).
styledTextCtrlMarkerGet :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlMarkerLineFromHandle obj handle</tt>).
styledTextCtrlMarkerLineFromHandle :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlMarkerNext obj lineStart markerMask</tt>).
styledTextCtrlMarkerNext :: StyledTextCtrl a -> Int -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlMarkerPrevious obj lineStart
--   markerMask</tt>).
styledTextCtrlMarkerPrevious :: StyledTextCtrl a -> Int -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlMarkerSetBackground obj markerNumber
--   backrbackgbackb</tt>).
styledTextCtrlMarkerSetBackground :: StyledTextCtrl a -> Int -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlMarkerSetForeground obj markerNumber
--   forerforegforeb</tt>).
styledTextCtrlMarkerSetForeground :: StyledTextCtrl a -> Int -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlMoveCaretInsideView obj</tt>).
styledTextCtrlMoveCaretInsideView :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlPaste obj</tt>).
styledTextCtrlPaste :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlPointFromPosition obj</tt>).
styledTextCtrlPointFromPosition :: StyledTextCtrl a -> IO (Point)

-- | usage: (<tt>styledTextCtrlPositionAfter obj pos</tt>).
styledTextCtrlPositionAfter :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlPositionBefore obj pos</tt>).
styledTextCtrlPositionBefore :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlPositionFromLine obj line</tt>).
styledTextCtrlPositionFromLine :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlPositionFromPoint obj ptxpty</tt>).
styledTextCtrlPositionFromPoint :: StyledTextCtrl a -> Point -> IO Int

-- | usage: (<tt>styledTextCtrlPositionFromPointClose obj xy</tt>).
styledTextCtrlPositionFromPointClose :: StyledTextCtrl a -> Point -> IO Int

-- | usage: (<tt>styledTextCtrlRedo obj</tt>).
styledTextCtrlRedo :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlRegisterImage obj wxtype bmp</tt>).
styledTextCtrlRegisterImage :: StyledTextCtrl a -> Int -> Bitmap c -> IO ()

-- | usage: (<tt>styledTextCtrlReleaseDocument obj docPointer</tt>).
styledTextCtrlReleaseDocument :: StyledTextCtrl a -> STCDoc b -> IO ()

-- | usage: (<tt>styledTextCtrlReplaceSelection obj text</tt>).
styledTextCtrlReplaceSelection :: StyledTextCtrl a -> String -> IO ()

-- | usage: (<tt>styledTextCtrlReplaceTarget obj text</tt>).
styledTextCtrlReplaceTarget :: StyledTextCtrl a -> String -> IO Int

-- | usage: (<tt>styledTextCtrlReplaceTargetRE obj text</tt>).
styledTextCtrlReplaceTargetRE :: StyledTextCtrl a -> String -> IO Int

-- | usage: (<tt>styledTextCtrlSaveFile obj filename</tt>).
styledTextCtrlSaveFile :: StyledTextCtrl a -> String -> IO Bool

-- | usage: (<tt>styledTextCtrlScrollToColumn obj column</tt>).
styledTextCtrlScrollToColumn :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlScrollToLine obj line</tt>).
styledTextCtrlScrollToLine :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSearchAnchor obj</tt>).
styledTextCtrlSearchAnchor :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlSearchInTarget obj text</tt>).
styledTextCtrlSearchInTarget :: StyledTextCtrl a -> String -> IO Int

-- | usage: (<tt>styledTextCtrlSearchNext obj flags text</tt>).
styledTextCtrlSearchNext :: StyledTextCtrl a -> Int -> String -> IO Int

-- | usage: (<tt>styledTextCtrlSearchPrev obj flags text</tt>).
styledTextCtrlSearchPrev :: StyledTextCtrl a -> Int -> String -> IO Int

-- | usage: (<tt>styledTextCtrlSelectAll obj</tt>).
styledTextCtrlSelectAll :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlSelectionIsRectangle obj</tt>).
styledTextCtrlSelectionIsRectangle :: StyledTextCtrl a -> IO Bool

-- | usage: (<tt>styledTextCtrlSetAnchor obj posAnchor</tt>).
styledTextCtrlSetAnchor :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetBackSpaceUnIndents obj bsUnIndents</tt>).
styledTextCtrlSetBackSpaceUnIndents :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetBufferedDraw obj buffered</tt>).
styledTextCtrlSetBufferedDraw :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetCaretForeground obj
--   forerforegforeb</tt>).
styledTextCtrlSetCaretForeground :: StyledTextCtrl a -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlSetCaretLineBackground obj
--   backrbackgbackb</tt>).
styledTextCtrlSetCaretLineBackground :: StyledTextCtrl a -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlSetCaretLineVisible obj show</tt>).
styledTextCtrlSetCaretLineVisible :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetCaretPeriod obj periodMilliseconds</tt>).
styledTextCtrlSetCaretPeriod :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetCaretWidth obj pixelWidth</tt>).
styledTextCtrlSetCaretWidth :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetCodePage obj codePage</tt>).
styledTextCtrlSetCodePage :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetControlCharSymbol obj symbol</tt>).
styledTextCtrlSetControlCharSymbol :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetCurrentPos obj pos</tt>).
styledTextCtrlSetCurrentPos :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetDocPointer obj docPointer</tt>).
styledTextCtrlSetDocPointer :: StyledTextCtrl a -> STCDoc b -> IO ()

-- | usage: (<tt>styledTextCtrlSetEOLMode obj eolMode</tt>).
styledTextCtrlSetEOLMode :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetEdgeColour obj
--   edgeColourredgeColourgedgeColourb</tt>).
styledTextCtrlSetEdgeColour :: StyledTextCtrl a -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlSetEdgeColumn obj column</tt>).
styledTextCtrlSetEdgeColumn :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetEdgeMode obj mode</tt>).
styledTextCtrlSetEdgeMode :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetEndAtLastLine obj endAtLastLine</tt>).
styledTextCtrlSetEndAtLastLine :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetFoldExpanded obj line expanded</tt>).
styledTextCtrlSetFoldExpanded :: StyledTextCtrl a -> Int -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetFoldFlags obj flags</tt>).
styledTextCtrlSetFoldFlags :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetFoldLevel obj line level</tt>).
styledTextCtrlSetFoldLevel :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetFoldMarginColour obj useSetting
--   backrbackgbackb</tt>).
styledTextCtrlSetFoldMarginColour :: StyledTextCtrl a -> Bool -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlSetFoldMarginHiColour obj useSetting
--   forerforegforeb</tt>).
styledTextCtrlSetFoldMarginHiColour :: StyledTextCtrl a -> Bool -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlSetHScrollBar obj bar</tt>).
styledTextCtrlSetHScrollBar :: StyledTextCtrl a -> ScrollBar b -> IO ()

-- | usage: (<tt>styledTextCtrlSetHighlightGuide obj column</tt>).
styledTextCtrlSetHighlightGuide :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetHotspotActiveBackground obj useSetting
--   backrbackgbackb</tt>).
styledTextCtrlSetHotspotActiveBackground :: StyledTextCtrl a -> Bool -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlSetHotspotActiveForeground obj useSetting
--   forerforegforeb</tt>).
styledTextCtrlSetHotspotActiveForeground :: StyledTextCtrl a -> Bool -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlSetHotspotActiveUnderline obj
--   underline</tt>).
styledTextCtrlSetHotspotActiveUnderline :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetIndent obj indentSize</tt>).
styledTextCtrlSetIndent :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetIndentationGuides obj show</tt>).
styledTextCtrlSetIndentationGuides :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetKeyWords obj keywordSet keyWords</tt>).
styledTextCtrlSetKeyWords :: StyledTextCtrl a -> Int -> String -> IO ()

-- | usage: (<tt>styledTextCtrlSetLastKeydownProcessed obj val</tt>).
styledTextCtrlSetLastKeydownProcessed :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetLayoutCache obj mode</tt>).
styledTextCtrlSetLayoutCache :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetLexer obj lexer</tt>).
styledTextCtrlSetLexer :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetLexerLanguage obj language</tt>).
styledTextCtrlSetLexerLanguage :: StyledTextCtrl a -> String -> IO ()

-- | usage: (<tt>styledTextCtrlSetLineIndentation obj line
--   indentSize</tt>).
styledTextCtrlSetLineIndentation :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetLineState obj line state</tt>).
styledTextCtrlSetLineState :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetMarginLeft obj pixelWidth</tt>).
styledTextCtrlSetMarginLeft :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetMarginMask obj margin mask</tt>).
styledTextCtrlSetMarginMask :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetMarginRight obj pixelWidth</tt>).
styledTextCtrlSetMarginRight :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetMarginSensitive obj margin
--   sensitive</tt>).
styledTextCtrlSetMarginSensitive :: StyledTextCtrl a -> Int -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetMarginType obj margin marginType</tt>).
styledTextCtrlSetMarginType :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetMarginWidth obj margin pixelWidth</tt>).
styledTextCtrlSetMarginWidth :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetMargins obj left right</tt>).
styledTextCtrlSetMargins :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetModEventMask obj mask</tt>).
styledTextCtrlSetModEventMask :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetMouseDownCaptures obj captures</tt>).
styledTextCtrlSetMouseDownCaptures :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetMouseDwellTime obj
--   periodMilliseconds</tt>).
styledTextCtrlSetMouseDwellTime :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetOvertype obj overtype</tt>).
styledTextCtrlSetOvertype :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetPrintColourMode obj mode</tt>).
styledTextCtrlSetPrintColourMode :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetPrintMagnification obj
--   magnification</tt>).
styledTextCtrlSetPrintMagnification :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetPrintWrapMode obj mode</tt>).
styledTextCtrlSetPrintWrapMode :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetProperty obj key value</tt>).
styledTextCtrlSetProperty :: StyledTextCtrl a -> String -> String -> IO ()

-- | usage: (<tt>styledTextCtrlSetReadOnly obj readOnly</tt>).
styledTextCtrlSetReadOnly :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetSTCCursor obj cursorType</tt>).
styledTextCtrlSetSTCCursor :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetSTCFocus obj focus</tt>).
styledTextCtrlSetSTCFocus :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetSavePoint obj</tt>).
styledTextCtrlSetSavePoint :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlSetScrollWidth obj pixelWidth</tt>).
styledTextCtrlSetScrollWidth :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetSearchFlags obj flags</tt>).
styledTextCtrlSetSearchFlags :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetSelBackground obj useSetting
--   backrbackgbackb</tt>).
styledTextCtrlSetSelBackground :: StyledTextCtrl a -> Bool -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlSetSelForeground obj useSetting
--   forerforegforeb</tt>).
styledTextCtrlSetSelForeground :: StyledTextCtrl a -> Bool -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlSetSelection obj start end</tt>).
styledTextCtrlSetSelection :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetSelectionEnd obj pos</tt>).
styledTextCtrlSetSelectionEnd :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetSelectionStart obj pos</tt>).
styledTextCtrlSetSelectionStart :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetStatus obj statusCode</tt>).
styledTextCtrlSetStatus :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetStyleBits obj bits</tt>).
styledTextCtrlSetStyleBits :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetStyleBytes obj length styleBytes</tt>).
styledTextCtrlSetStyleBytes :: StyledTextCtrl a -> Int -> String -> IO ()

-- | usage: (<tt>styledTextCtrlSetStyling obj length style</tt>).
styledTextCtrlSetStyling :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetTabIndents obj tabIndents</tt>).
styledTextCtrlSetTabIndents :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetTabWidth obj tabWidth</tt>).
styledTextCtrlSetTabWidth :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetTargetEnd obj pos</tt>).
styledTextCtrlSetTargetEnd :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetTargetStart obj pos</tt>).
styledTextCtrlSetTargetStart :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetText obj text</tt>).
styledTextCtrlSetText :: StyledTextCtrl a -> String -> IO ()

-- | usage: (<tt>styledTextCtrlSetTwoPhaseDraw obj twoPhase</tt>).
styledTextCtrlSetTwoPhaseDraw :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetUndoCollection obj collectUndo</tt>).
styledTextCtrlSetUndoCollection :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetUseHorizontalScrollBar obj show</tt>).
styledTextCtrlSetUseHorizontalScrollBar :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetUseTabs obj useTabs</tt>).
styledTextCtrlSetUseTabs :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetUseVerticalScrollBar obj show</tt>).
styledTextCtrlSetUseVerticalScrollBar :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetVScrollBar obj bar</tt>).
styledTextCtrlSetVScrollBar :: StyledTextCtrl a -> ScrollBar b -> IO ()

-- | usage: (<tt>styledTextCtrlSetViewEOL obj visible</tt>).
styledTextCtrlSetViewEOL :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlSetViewWhiteSpace obj viewWS</tt>).
styledTextCtrlSetViewWhiteSpace :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetVisiblePolicy obj visiblePolicy
--   visibleSlop</tt>).
styledTextCtrlSetVisiblePolicy :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetWhitespaceBackground obj useSetting
--   backrbackgbackb</tt>).
styledTextCtrlSetWhitespaceBackground :: StyledTextCtrl a -> Bool -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlSetWhitespaceForeground obj useSetting
--   forerforegforeb</tt>).
styledTextCtrlSetWhitespaceForeground :: StyledTextCtrl a -> Bool -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlSetWordChars obj characters</tt>).
styledTextCtrlSetWordChars :: StyledTextCtrl a -> String -> IO ()

-- | usage: (<tt>styledTextCtrlSetWrapMode obj mode</tt>).
styledTextCtrlSetWrapMode :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetXCaretPolicy obj caretPolicy
--   caretSlop</tt>).
styledTextCtrlSetXCaretPolicy :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetXOffset obj newOffset</tt>).
styledTextCtrlSetXOffset :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetYCaretPolicy obj caretPolicy
--   caretSlop</tt>).
styledTextCtrlSetYCaretPolicy :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlSetZoom obj zoom</tt>).
styledTextCtrlSetZoom :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlShowLines obj lineStart lineEnd</tt>).
styledTextCtrlShowLines :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlStartRecord obj</tt>).
styledTextCtrlStartRecord :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlStartStyling obj pos mask</tt>).
styledTextCtrlStartStyling :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlStopRecord obj</tt>).
styledTextCtrlStopRecord :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlStyleClearAll obj</tt>).
styledTextCtrlStyleClearAll :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlStyleResetDefault obj</tt>).
styledTextCtrlStyleResetDefault :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetBackground obj style
--   backrbackgbackb</tt>).
styledTextCtrlStyleSetBackground :: StyledTextCtrl a -> Int -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetBold obj style bold</tt>).
styledTextCtrlStyleSetBold :: StyledTextCtrl a -> Int -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetCase obj style caseForce</tt>).
styledTextCtrlStyleSetCase :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetChangeable obj style
--   changeable</tt>).
styledTextCtrlStyleSetChangeable :: StyledTextCtrl a -> Int -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetCharacterSet obj style
--   characterSet</tt>).
styledTextCtrlStyleSetCharacterSet :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetEOLFilled obj style filled</tt>).
styledTextCtrlStyleSetEOLFilled :: StyledTextCtrl a -> Int -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetFaceName obj style fontName</tt>).
styledTextCtrlStyleSetFaceName :: StyledTextCtrl a -> Int -> String -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetFont obj styleNum font</tt>).
styledTextCtrlStyleSetFont :: StyledTextCtrl a -> Int -> Font c -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetFontAttr obj styleNum size faceName
--   bold italic underline</tt>).
styledTextCtrlStyleSetFontAttr :: StyledTextCtrl a -> Int -> Int -> String -> Bool -> Bool -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetForeground obj style
--   forerforegforeb</tt>).
styledTextCtrlStyleSetForeground :: StyledTextCtrl a -> Int -> Color -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetHotSpot obj style hotspot</tt>).
styledTextCtrlStyleSetHotSpot :: StyledTextCtrl a -> Int -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetItalic obj style italic</tt>).
styledTextCtrlStyleSetItalic :: StyledTextCtrl a -> Int -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetSize obj style sizePoints</tt>).
styledTextCtrlStyleSetSize :: StyledTextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetSpec obj styleNum spec</tt>).
styledTextCtrlStyleSetSpec :: StyledTextCtrl a -> Int -> String -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetUnderline obj style underline</tt>).
styledTextCtrlStyleSetUnderline :: StyledTextCtrl a -> Int -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlStyleSetVisible obj style visible</tt>).
styledTextCtrlStyleSetVisible :: StyledTextCtrl a -> Int -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlTargetFromSelection obj</tt>).
styledTextCtrlTargetFromSelection :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlTextHeight obj line</tt>).
styledTextCtrlTextHeight :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlTextWidth obj style text</tt>).
styledTextCtrlTextWidth :: StyledTextCtrl a -> Int -> String -> IO Int

-- | usage: (<tt>styledTextCtrlToggleFold obj line</tt>).
styledTextCtrlToggleFold :: StyledTextCtrl a -> Int -> IO ()

-- | usage: (<tt>styledTextCtrlUndo obj</tt>).
styledTextCtrlUndo :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlUsePopUp obj allowPopUp</tt>).
styledTextCtrlUsePopUp :: StyledTextCtrl a -> Bool -> IO ()

-- | usage: (<tt>styledTextCtrlUserListShow obj listType itemList</tt>).
styledTextCtrlUserListShow :: StyledTextCtrl a -> Int -> String -> IO ()

-- | usage: (<tt>styledTextCtrlVisibleFromDocLine obj line</tt>).
styledTextCtrlVisibleFromDocLine :: StyledTextCtrl a -> Int -> IO Int

-- | usage: (<tt>styledTextCtrlWordEndPosition obj pos
--   onlyWordCharacters</tt>).
styledTextCtrlWordEndPosition :: StyledTextCtrl a -> Int -> Bool -> IO Int

-- | usage: (<tt>styledTextCtrlWordPartLeft obj</tt>).
styledTextCtrlWordPartLeft :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlWordPartLeftExtend obj</tt>).
styledTextCtrlWordPartLeftExtend :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlWordPartRight obj</tt>).
styledTextCtrlWordPartRight :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlWordPartRightExtend obj</tt>).
styledTextCtrlWordPartRightExtend :: StyledTextCtrl a -> IO ()

-- | usage: (<tt>styledTextCtrlWordStartPosition obj pos
--   onlyWordCharacters</tt>).
styledTextCtrlWordStartPosition :: StyledTextCtrl a -> Int -> Bool -> IO Int

-- | usage: (<tt>styledTextEventClone obj</tt>).
styledTextEventClone :: StyledTextEvent a -> IO (StyledTextEvent ())

-- | usage: (<tt>styledTextEventGetAlt obj</tt>).
styledTextEventGetAlt :: StyledTextEvent a -> IO Bool

-- | usage: (<tt>styledTextEventGetControl obj</tt>).
styledTextEventGetControl :: StyledTextEvent a -> IO Bool

-- | usage: (<tt>styledTextEventGetDragAllowMove obj</tt>).
styledTextEventGetDragAllowMove :: StyledTextEvent a -> IO Bool

-- | usage: (<tt>styledTextEventGetDragResult obj</tt>).
styledTextEventGetDragResult :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetDragText obj</tt>).
styledTextEventGetDragText :: StyledTextEvent a -> IO (String)

-- | usage: (<tt>styledTextEventGetFoldLevelNow obj</tt>).
styledTextEventGetFoldLevelNow :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetFoldLevelPrev obj</tt>).
styledTextEventGetFoldLevelPrev :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetKey obj</tt>).
styledTextEventGetKey :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetLParam obj</tt>).
styledTextEventGetLParam :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetLength obj</tt>).
styledTextEventGetLength :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetLine obj</tt>).
styledTextEventGetLine :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetLinesAdded obj</tt>).
styledTextEventGetLinesAdded :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetListType obj</tt>).
styledTextEventGetListType :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetMargin obj</tt>).
styledTextEventGetMargin :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetMessage obj</tt>).
styledTextEventGetMessage :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetModificationType obj</tt>).
styledTextEventGetModificationType :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetModifiers obj</tt>).
styledTextEventGetModifiers :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetPosition obj</tt>).
styledTextEventGetPosition :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetShift obj</tt>).
styledTextEventGetShift :: StyledTextEvent a -> IO Bool

-- | usage: (<tt>styledTextEventGetText obj</tt>).
styledTextEventGetText :: StyledTextEvent a -> IO (String)

-- | usage: (<tt>styledTextEventGetWParam obj</tt>).
styledTextEventGetWParam :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetX obj</tt>).
styledTextEventGetX :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventGetY obj</tt>).
styledTextEventGetY :: StyledTextEvent a -> IO Int

-- | usage: (<tt>styledTextEventSetDragAllowMove obj val</tt>).
styledTextEventSetDragAllowMove :: StyledTextEvent a -> Bool -> IO ()

-- | usage: (<tt>styledTextEventSetDragResult obj val</tt>).
styledTextEventSetDragResult :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetDragText obj val</tt>).
styledTextEventSetDragText :: StyledTextEvent a -> String -> IO ()

-- | usage: (<tt>styledTextEventSetFoldLevelNow obj val</tt>).
styledTextEventSetFoldLevelNow :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetFoldLevelPrev obj val</tt>).
styledTextEventSetFoldLevelPrev :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetKey obj k</tt>).
styledTextEventSetKey :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetLParam obj val</tt>).
styledTextEventSetLParam :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetLength obj len</tt>).
styledTextEventSetLength :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetLine obj val</tt>).
styledTextEventSetLine :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetLinesAdded obj num</tt>).
styledTextEventSetLinesAdded :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetListType obj val</tt>).
styledTextEventSetListType :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetMargin obj val</tt>).
styledTextEventSetMargin :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetMessage obj val</tt>).
styledTextEventSetMessage :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetModificationType obj t</tt>).
styledTextEventSetModificationType :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetModifiers obj m</tt>).
styledTextEventSetModifiers :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetPosition obj pos</tt>).
styledTextEventSetPosition :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetText obj t</tt>).
styledTextEventSetText :: StyledTextEvent a -> String -> IO ()

-- | usage: (<tt>styledTextEventSetWParam obj val</tt>).
styledTextEventSetWParam :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetX obj val</tt>).
styledTextEventSetX :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>styledTextEventSetY obj val</tt>).
styledTextEventSetY :: StyledTextEvent a -> Int -> IO ()

-- | usage: (<tt>systemSettingsGetColour index</tt>).
systemSettingsGetColour :: Int -> IO (Color)

-- | usage: (<tt>systemSettingsGetFont index</tt>).
systemSettingsGetFont :: Int -> IO (Font ())

-- | usage: (<tt>systemSettingsGetMetric index</tt>).
systemSettingsGetMetric :: Int -> IO Int

-- | usage: (<tt>systemSettingsGetScreenType</tt>).
systemSettingsGetScreenType :: IO Int

-- | usage: (<tt>taskBarIconCreate</tt>).
taskBarIconCreate :: IO (TaskBarIcon ())

-- | usage: (<tt>taskBarIconDelete obj</tt>).
taskBarIconDelete :: TaskBarIcon a -> IO ()

-- | usage: (<tt>taskBarIconIsIconInstalled obj</tt>).
taskBarIconIsIconInstalled :: TaskBarIcon a -> IO Bool

-- | usage: (<tt>taskBarIconIsOk obj</tt>).
taskBarIconIsOk :: TaskBarIcon a -> IO Bool

-- | usage: (<tt>taskBarIconPopupMenu obj menu</tt>).
taskBarIconPopupMenu :: TaskBarIcon a -> Menu b -> IO Bool

-- | usage: (<tt>taskBarIconRemoveIcon obj</tt>).
taskBarIconRemoveIcon :: TaskBarIcon a -> IO Bool

-- | usage: (<tt>taskBarIconSetIcon obj icon text</tt>).
taskBarIconSetIcon :: TaskBarIcon a -> Icon b -> String -> IO Bool

-- | usage: (<tt>textAttrCreate colText colBack font</tt>).
textAttrCreate :: Color -> Color -> Font c -> IO (TextAttr ())

-- | usage: (<tt>textAttrCreateDefault</tt>).
textAttrCreateDefault :: IO (TextAttr ())

-- | usage: (<tt>textAttrDelete obj</tt>).
textAttrDelete :: TextAttr a -> IO ()

-- | usage: (<tt>textAttrGetBackgroundColour obj</tt>).
textAttrGetBackgroundColour :: TextAttr a -> IO (Color)

-- | usage: (<tt>textAttrGetFont obj</tt>).
textAttrGetFont :: TextAttr a -> IO (Font ())

-- | usage: (<tt>textAttrGetTextColour obj</tt>).
textAttrGetTextColour :: TextAttr a -> IO (Color)

-- | usage: (<tt>textAttrHasBackgroundColour obj</tt>).
textAttrHasBackgroundColour :: TextAttr a -> IO Bool

-- | usage: (<tt>textAttrHasFont obj</tt>).
textAttrHasFont :: TextAttr a -> IO Bool

-- | usage: (<tt>textAttrHasTextColour obj</tt>).
textAttrHasTextColour :: TextAttr a -> IO Bool

-- | usage: (<tt>textAttrIsDefault obj</tt>).
textAttrIsDefault :: TextAttr a -> IO Bool

-- | usage: (<tt>textAttrSetBackgroundColour obj colour</tt>).
textAttrSetBackgroundColour :: TextAttr a -> Color -> IO ()

-- | usage: (<tt>textAttrSetFont obj font</tt>).
textAttrSetFont :: TextAttr a -> Font b -> IO ()

-- | usage: (<tt>textAttrSetTextColour obj colour</tt>).
textAttrSetTextColour :: TextAttr a -> Color -> IO ()

-- | usage: (<tt>textCtrlAppendText obj text</tt>).
textCtrlAppendText :: TextCtrl a -> String -> IO ()

-- | usage: (<tt>textCtrlCanCopy obj</tt>).
textCtrlCanCopy :: TextCtrl a -> IO Bool

-- | usage: (<tt>textCtrlCanCut obj</tt>).
textCtrlCanCut :: TextCtrl a -> IO Bool

-- | usage: (<tt>textCtrlCanPaste obj</tt>).
textCtrlCanPaste :: TextCtrl a -> IO Bool

-- | usage: (<tt>textCtrlCanRedo obj</tt>).
textCtrlCanRedo :: TextCtrl a -> IO Bool

-- | usage: (<tt>textCtrlCanUndo obj</tt>).
textCtrlCanUndo :: TextCtrl a -> IO Bool

-- | usage: (<tt>textCtrlChangeValue obj text</tt>).
textCtrlChangeValue :: TextCtrl a -> String -> IO ()

-- | usage: (<tt>textCtrlClear obj</tt>).
textCtrlClear :: TextCtrl a -> IO ()

-- | usage: (<tt>textCtrlCopy obj</tt>).
textCtrlCopy :: TextCtrl a -> IO ()

-- | usage: (<tt>textCtrlCreate prt id txt lfttopwdthgt stl</tt>).
textCtrlCreate :: Window a -> Id -> String -> Rect -> Style -> IO (TextCtrl ())

-- | usage: (<tt>textCtrlCut obj</tt>).
textCtrlCut :: TextCtrl a -> IO ()

-- | usage: (<tt>textCtrlDiscardEdits obj</tt>).
textCtrlDiscardEdits :: TextCtrl a -> IO ()

-- | usage: (<tt>textCtrlEmulateKeyPress obj keyevent</tt>).
textCtrlEmulateKeyPress :: TextCtrl a -> KeyEvent b -> IO Bool

-- | usage: (<tt>textCtrlGetDefaultStyle obj</tt>).
textCtrlGetDefaultStyle :: TextCtrl a -> IO (TextAttr ())

-- | usage: (<tt>textCtrlGetInsertionPoint obj</tt>).
textCtrlGetInsertionPoint :: TextCtrl a -> IO Int

-- | usage: (<tt>textCtrlGetLastPosition obj</tt>).
textCtrlGetLastPosition :: TextCtrl a -> IO Int

-- | usage: (<tt>textCtrlGetLineLength obj lineNo</tt>).
textCtrlGetLineLength :: TextCtrl a -> Int -> IO Int

-- | usage: (<tt>textCtrlGetLineText obj lineNo</tt>).
textCtrlGetLineText :: TextCtrl a -> Int -> IO (String)

-- | usage: (<tt>textCtrlGetNumberOfLines obj</tt>).
textCtrlGetNumberOfLines :: TextCtrl a -> IO Int

-- | usage: (<tt>textCtrlGetRange obj from to</tt>).
textCtrlGetRange :: TextCtrl a -> Int -> Int -> IO (String)

-- | usage: (<tt>textCtrlGetSelection obj from to</tt>).
textCtrlGetSelection :: TextCtrl a -> Ptr b -> Ptr c -> IO ()

-- | usage: (<tt>textCtrlGetStringSelection obj</tt>).
textCtrlGetStringSelection :: TextCtrl a -> IO (String)

-- | usage: (<tt>textCtrlGetValue obj</tt>).
textCtrlGetValue :: TextCtrl a -> IO (String)

-- | usage: (<tt>textCtrlIsEditable obj</tt>).
textCtrlIsEditable :: TextCtrl a -> IO Bool

-- | usage: (<tt>textCtrlIsModified obj</tt>).
textCtrlIsModified :: TextCtrl a -> IO Bool

-- | usage: (<tt>textCtrlIsMultiLine obj</tt>).
textCtrlIsMultiLine :: TextCtrl a -> IO Bool

-- | usage: (<tt>textCtrlIsSingleLine obj</tt>).
textCtrlIsSingleLine :: TextCtrl a -> IO Bool

-- | usage: (<tt>textCtrlLoadFile obj file</tt>).
textCtrlLoadFile :: TextCtrl a -> String -> IO Bool

-- | usage: (<tt>textCtrlPaste obj</tt>).
textCtrlPaste :: TextCtrl a -> IO ()

-- | usage: (<tt>textCtrlPositionToXY obj pos x y</tt>).
textCtrlPositionToXY :: TextCtrl a -> Int -> Ptr CInt -> Ptr CInt -> IO Int

-- | usage: (<tt>textCtrlRedo obj</tt>).
textCtrlRedo :: TextCtrl a -> IO ()

-- | usage: (<tt>textCtrlRemove obj from to</tt>).
textCtrlRemove :: TextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>textCtrlReplace obj from to value</tt>).
textCtrlReplace :: TextCtrl a -> Int -> Int -> String -> IO ()

-- | usage: (<tt>textCtrlSaveFile obj file</tt>).
textCtrlSaveFile :: TextCtrl a -> String -> IO Bool

-- | usage: (<tt>textCtrlSetDefaultStyle obj style</tt>).
textCtrlSetDefaultStyle :: TextCtrl a -> TextAttr b -> IO Bool

-- | usage: (<tt>textCtrlSetEditable obj editable</tt>).
textCtrlSetEditable :: TextCtrl a -> Bool -> IO ()

-- | usage: (<tt>textCtrlSetInsertionPoint obj pos</tt>).
textCtrlSetInsertionPoint :: TextCtrl a -> Int -> IO ()

-- | usage: (<tt>textCtrlSetInsertionPointEnd obj</tt>).
textCtrlSetInsertionPointEnd :: TextCtrl a -> IO ()

-- | usage: (<tt>textCtrlSetMaxLength obj len</tt>).
textCtrlSetMaxLength :: TextCtrl a -> Int -> IO ()

-- | usage: (<tt>textCtrlSetSelection obj from to</tt>).
textCtrlSetSelection :: TextCtrl a -> Int -> Int -> IO ()

-- | usage: (<tt>textCtrlSetStyle obj start end style</tt>).
textCtrlSetStyle :: TextCtrl a -> Int -> Int -> TextAttr d -> IO Bool

-- | usage: (<tt>textCtrlSetValue obj value</tt>).
textCtrlSetValue :: TextCtrl a -> String -> IO ()

-- | usage: (<tt>textCtrlShowPosition obj pos</tt>).
textCtrlShowPosition :: TextCtrl a -> Int -> IO ()

-- | usage: (<tt>textCtrlUndo obj</tt>).
textCtrlUndo :: TextCtrl a -> IO ()

-- | usage: (<tt>textCtrlWriteText obj text</tt>).
textCtrlWriteText :: TextCtrl a -> String -> IO ()

-- | usage: (<tt>textCtrlXYToPosition obj xy</tt>).
textCtrlXYToPosition :: TextCtrl a -> Point -> IO Int

-- | usage: (<tt>textInputStreamCreate inputStream sep</tt>).
textInputStreamCreate :: InputStream a -> String -> IO (TextInputStream ())

-- | usage: (<tt>textInputStreamDelete self</tt>).
textInputStreamDelete :: TextInputStream a -> IO ()

-- | usage: (<tt>textInputStreamReadLine self</tt>).
textInputStreamReadLine :: TextInputStream a -> IO (String)

-- | usage: (<tt>textOutputStreamCreate outputStream mode</tt>).
textOutputStreamCreate :: OutputStream a -> Int -> IO (TextOutputStream ())

-- | usage: (<tt>textOutputStreamDelete self</tt>).
textOutputStreamDelete :: TextOutputStream a -> IO ()

-- | usage: (<tt>textOutputStreamWriteString self txt</tt>).
textOutputStreamWriteString :: TextOutputStream a -> String -> IO ()

-- | usage: (<tt>textValidatorClone obj</tt>).
textValidatorClone :: TextValidator a -> IO (Validator ())

-- | usage: (<tt>textValidatorCreate style val</tt>).
textValidatorCreate :: Int -> Ptr b -> IO (TextValidator ())

-- | usage: (<tt>textValidatorGetExcludes obj</tt>).
textValidatorGetExcludes :: TextValidator a -> IO [String]

-- | usage: (<tt>textValidatorGetIncludes obj</tt>).
textValidatorGetIncludes :: TextValidator a -> IO [String]

-- | usage: (<tt>textValidatorGetStyle obj</tt>).
textValidatorGetStyle :: TextValidator a -> IO Int

-- | usage: (<tt>textValidatorOnChar obj event</tt>).
textValidatorOnChar :: TextValidator a -> Event b -> IO ()

-- | usage: (<tt>textValidatorSetExcludes obj list count</tt>).
textValidatorSetExcludes :: TextValidator a -> String -> Int -> IO ()

-- | usage: (<tt>textValidatorSetIncludes obj list count</tt>).
textValidatorSetIncludes :: TextValidator a -> String -> Int -> IO ()

-- | usage: (<tt>textValidatorSetStyle obj style</tt>).
textValidatorSetStyle :: TextValidator a -> Int -> IO ()

-- | usage: (<tt>textValidatorTransferFromWindow obj</tt>).
textValidatorTransferFromWindow :: TextValidator a -> IO Bool

-- | usage: (<tt>textValidatorTransferToWindow obj</tt>).
textValidatorTransferToWindow :: TextValidator a -> IO Bool

-- | usage: (<tt>timerCreate prt id</tt>).
timerCreate :: Window a -> Id -> IO (Timer ())

-- | usage: (<tt>timerDelete obj</tt>).
timerDelete :: Timer a -> IO ()

-- | usage: (<tt>timerGetInterval obj</tt>).
timerGetInterval :: Timer a -> IO Int

-- | usage: (<tt>timerIsOneShot obj</tt>).
timerIsOneShot :: Timer a -> IO Bool

-- | usage: (<tt>timerIsRuning obj</tt>).
timerIsRuning :: Timer a -> IO Bool

-- | usage: (<tt>timerStart obj wxint one</tt>).
timerStart :: Timer a -> Int -> Bool -> IO Bool

-- | usage: (<tt>timerStop obj</tt>).
timerStop :: Timer a -> IO ()

-- | usage: (<tt>timerEventGetInterval obj</tt>).
timerEventGetInterval :: TimerEvent a -> IO Int

-- | usage: (<tt>timerExConnect obj closure</tt>).
timerExConnect :: TimerEx a -> Closure b -> IO ()

-- | usage: (<tt>timerExCreate</tt>).
timerExCreate :: IO (TimerEx ())

-- | usage: (<tt>timerExGetClosure obj</tt>).
timerExGetClosure :: TimerEx a -> IO (Closure ())

-- | usage: (<tt>tipWindowClose obj</tt>).
tipWindowClose :: TipWindow a -> IO ()

-- | usage: (<tt>tipWindowCreate parent text maxLength</tt>).
tipWindowCreate :: Window a -> String -> Int -> IO (TipWindow ())

-- | usage: (<tt>tipWindowSetBoundingRect obj xywh</tt>).
tipWindowSetBoundingRect :: TipWindow a -> Rect -> IO ()

-- | usage: (<tt>tipWindowSetTipWindowPtr obj windowPtr</tt>).
tipWindowSetTipWindowPtr :: TipWindow a -> Ptr b -> IO ()

-- | usage: (<tt>toggleButtonCreate parent id label xywh style</tt>).
toggleButtonCreate :: Window a -> Id -> String -> Rect -> Int -> IO (ToggleButton ())

-- | usage: (<tt>toggleButtonEnable obj enable</tt>).
toggleButtonEnable :: ToggleButton a -> Bool -> IO Bool

-- | usage: (<tt>toggleButtonGetValue obj</tt>).
toggleButtonGetValue :: ToggleButton a -> IO Bool

-- | usage: (<tt>toggleButtonSetLabel obj label</tt>).
toggleButtonSetLabel :: ToggleButton a -> String -> IO ()

-- | usage: (<tt>toggleButtonSetValue obj state</tt>).
toggleButtonSetValue :: ToggleButton a -> Bool -> IO ()

-- | usage: (<tt>toolBarAddControl obj ctrl</tt>).
toolBarAddControl :: ToolBar a -> Control b -> IO Bool

-- | usage: (<tt>toolBarAddSeparator obj</tt>).
toolBarAddSeparator :: ToolBar a -> IO ()

-- | usage: (<tt>toolBarAddTool obj toolid label bitmap bmpDisabled kind
--   shortHelp longHelp wxdata</tt>).
toolBarAddTool :: ToolBar a -> Int -> String -> Bitmap d -> Bitmap e -> Int -> String -> String -> WxObject i -> IO ()

-- | usage: (<tt>toolBarAddTool2 obj toolId label bmp bmpDisabled itemKind
--   shortHelp longHelp</tt>).
toolBarAddTool2 :: ToolBar a -> Int -> String -> Bitmap d -> Bitmap e -> Int -> String -> String -> IO ()

-- | usage: (<tt>toolBarCreate prt id lfttopwdthgt stl</tt>).
toolBarCreate :: Window a -> Id -> Rect -> Style -> IO (ToolBar ())

-- | usage: (<tt>toolBarDelete obj</tt>).
toolBarDelete :: ToolBar a -> IO ()

-- | usage: (<tt>toolBarDeleteTool obj id</tt>).
toolBarDeleteTool :: ToolBar a -> Id -> IO Bool

-- | usage: (<tt>toolBarDeleteToolByPos obj pos</tt>).
toolBarDeleteToolByPos :: ToolBar a -> Int -> IO Bool

-- | usage: (<tt>toolBarEnableTool obj id enable</tt>).
toolBarEnableTool :: ToolBar a -> Id -> Bool -> IO ()

-- | usage: (<tt>toolBarGetMargins obj</tt>).
toolBarGetMargins :: ToolBar a -> IO (Point)

-- | usage: (<tt>toolBarGetToolBitmapSize obj</tt>).
toolBarGetToolBitmapSize :: ToolBar a -> IO (Size)

-- | usage: (<tt>toolBarGetToolClientData obj id</tt>).
toolBarGetToolClientData :: ToolBar a -> Id -> IO (WxObject ())

-- | usage: (<tt>toolBarGetToolEnabled obj id</tt>).
toolBarGetToolEnabled :: ToolBar a -> Id -> IO Bool

-- | usage: (<tt>toolBarGetToolLongHelp obj id</tt>).
toolBarGetToolLongHelp :: ToolBar a -> Id -> IO (String)

-- | usage: (<tt>toolBarGetToolPacking obj</tt>).
toolBarGetToolPacking :: ToolBar a -> IO Int

-- | usage: (<tt>toolBarGetToolShortHelp obj id</tt>).
toolBarGetToolShortHelp :: ToolBar a -> Id -> IO (String)

-- | usage: (<tt>toolBarGetToolSize obj</tt>).
toolBarGetToolSize :: ToolBar a -> IO (Size)

-- | usage: (<tt>toolBarGetToolState obj id</tt>).
toolBarGetToolState :: ToolBar a -> Id -> IO Bool

-- | usage: (<tt>toolBarInsertControl obj pos ctrl</tt>).
toolBarInsertControl :: ToolBar a -> Int -> Control c -> IO ()

-- | usage: (<tt>toolBarInsertSeparator obj pos</tt>).
toolBarInsertSeparator :: ToolBar a -> Int -> IO ()

-- | usage: (<tt>toolBarRealize obj</tt>).
toolBarRealize :: ToolBar a -> IO Bool

-- | usage: (<tt>toolBarRemoveTool obj id</tt>).
toolBarRemoveTool :: ToolBar a -> Id -> IO ()

-- | usage: (<tt>toolBarSetMargins obj xy</tt>).
toolBarSetMargins :: ToolBar a -> Point -> IO ()

-- | usage: (<tt>toolBarSetToolBitmapSize obj xy</tt>).
toolBarSetToolBitmapSize :: ToolBar a -> Size -> IO ()

-- | usage: (<tt>toolBarSetToolClientData obj id wxdata</tt>).
toolBarSetToolClientData :: ToolBar a -> Id -> WxObject c -> IO ()

-- | usage: (<tt>toolBarSetToolLongHelp obj id str</tt>).
toolBarSetToolLongHelp :: ToolBar a -> Id -> String -> IO ()

-- | usage: (<tt>toolBarSetToolPacking obj packing</tt>).
toolBarSetToolPacking :: ToolBar a -> Int -> IO ()

-- | usage: (<tt>toolBarSetToolSeparation obj separation</tt>).
toolBarSetToolSeparation :: ToolBar a -> Int -> IO ()

-- | usage: (<tt>toolBarSetToolShortHelp obj id str</tt>).
toolBarSetToolShortHelp :: ToolBar a -> Id -> String -> IO ()

-- | usage: (<tt>toolBarToggleTool obj id toggle</tt>).
toolBarToggleTool :: ToolBar a -> Id -> Bool -> IO ()

-- | usage: (<tt>topLevelWindowEnableCloseButton obj enable</tt>).
topLevelWindowEnableCloseButton :: TopLevelWindow a -> Bool -> IO Bool

-- | usage: (<tt>topLevelWindowGetDefaultButton obj</tt>).
topLevelWindowGetDefaultButton :: TopLevelWindow a -> IO (Button ())

-- | usage: (<tt>topLevelWindowGetDefaultItem obj</tt>).
topLevelWindowGetDefaultItem :: TopLevelWindow a -> IO (Window ())

-- | usage: (<tt>topLevelWindowGetIcon obj</tt>).
topLevelWindowGetIcon :: TopLevelWindow a -> IO (Icon ())

-- | usage: (<tt>topLevelWindowGetTitle obj</tt>).
topLevelWindowGetTitle :: TopLevelWindow a -> IO (String)

-- | usage: (<tt>topLevelWindowIconize obj iconize</tt>).
topLevelWindowIconize :: TopLevelWindow a -> Bool -> IO Bool

-- | usage: (<tt>topLevelWindowIsActive obj</tt>).
topLevelWindowIsActive :: TopLevelWindow a -> IO Bool

-- | usage: (<tt>topLevelWindowIsIconized obj</tt>).
topLevelWindowIsIconized :: TopLevelWindow a -> IO Bool

-- | usage: (<tt>topLevelWindowIsMaximized obj</tt>).
topLevelWindowIsMaximized :: TopLevelWindow a -> IO Bool

-- | usage: (<tt>topLevelWindowMaximize obj maximize</tt>).
topLevelWindowMaximize :: TopLevelWindow a -> Bool -> IO ()

-- | usage: (<tt>topLevelWindowRequestUserAttention obj flags</tt>).
topLevelWindowRequestUserAttention :: TopLevelWindow a -> Int -> IO ()

-- | usage: (<tt>topLevelWindowSetDefaultButton obj pBut</tt>).
topLevelWindowSetDefaultButton :: TopLevelWindow a -> Button b -> IO ()

-- | usage: (<tt>topLevelWindowSetDefaultItem obj pBut</tt>).
topLevelWindowSetDefaultItem :: TopLevelWindow a -> Window b -> IO ()

-- | usage: (<tt>topLevelWindowSetIcon obj pIcon</tt>).
topLevelWindowSetIcon :: TopLevelWindow a -> Icon b -> IO ()

-- | usage: (<tt>topLevelWindowSetIcons obj icons</tt>).
topLevelWindowSetIcons :: TopLevelWindow a -> Ptr b -> IO ()

-- | usage: (<tt>topLevelWindowSetMaxSize obj wh</tt>).
topLevelWindowSetMaxSize :: TopLevelWindow a -> Size -> IO ()

-- | usage: (<tt>topLevelWindowSetMinSize obj wh</tt>).
topLevelWindowSetMinSize :: TopLevelWindow a -> Size -> IO ()

-- | usage: (<tt>topLevelWindowSetTitle obj pString</tt>).
topLevelWindowSetTitle :: TopLevelWindow a -> String -> IO ()

-- | usage: (<tt>treeCtrlAddRoot obj text image selectedImage wxdata</tt>).
treeCtrlAddRoot :: TreeCtrl a -> String -> Int -> Int -> TreeItemData e -> IO (TreeItem)

-- | usage: (<tt>treeCtrlAppendItem obj parent text image selectedImage
--   wxdata</tt>).
treeCtrlAppendItem :: TreeCtrl a -> TreeItem -> String -> Int -> Int -> TreeItemData f -> IO (TreeItem)

-- | usage: (<tt>treeCtrlAssignImageList obj imageList</tt>).
treeCtrlAssignImageList :: TreeCtrl a -> ImageList b -> IO ()

-- | usage: (<tt>treeCtrlAssignStateImageList obj imageList</tt>).
treeCtrlAssignStateImageList :: TreeCtrl a -> ImageList b -> IO ()

-- | usage: (<tt>treeCtrlCollapse obj item</tt>).
treeCtrlCollapse :: TreeCtrl a -> TreeItem -> IO ()

-- | usage: (<tt>treeCtrlCollapseAndReset obj item</tt>).
treeCtrlCollapseAndReset :: TreeCtrl a -> TreeItem -> IO ()

-- | usage: (<tt>treeCtrlCreate obj cmp prt id lfttopwdthgt stl</tt>).
treeCtrlCreate :: Ptr a -> Ptr b -> Window c -> Id -> Rect -> Style -> IO (TreeCtrl ())

-- | usage: (<tt>treeCtrlCreate2 prt id lfttopwdthgt stl</tt>).
treeCtrlCreate2 :: Window a -> Id -> Rect -> Style -> IO (TreeCtrl ())

-- | usage: (<tt>treeCtrlDelete obj item</tt>).
treeCtrlDelete :: TreeCtrl a -> TreeItem -> IO ()

-- | usage: (<tt>treeCtrlDeleteAllItems obj</tt>).
treeCtrlDeleteAllItems :: TreeCtrl a -> IO ()

-- | usage: (<tt>treeCtrlDeleteChildren obj item</tt>).
treeCtrlDeleteChildren :: TreeCtrl a -> TreeItem -> IO ()

-- | usage: (<tt>treeCtrlEditLabel obj item</tt>).
treeCtrlEditLabel :: TreeCtrl a -> TreeItem -> IO ()

-- | usage: (<tt>treeCtrlEndEditLabel obj item discardChanges</tt>).
treeCtrlEndEditLabel :: TreeCtrl a -> TreeItem -> Bool -> IO ()

-- | usage: (<tt>treeCtrlEnsureVisible obj item</tt>).
treeCtrlEnsureVisible :: TreeCtrl a -> TreeItem -> IO ()

-- | usage: (<tt>treeCtrlExpand obj item</tt>).
treeCtrlExpand :: TreeCtrl a -> TreeItem -> IO ()

-- | usage: (<tt>treeCtrlGetBoundingRect obj item textOnly</tt>).
treeCtrlGetBoundingRect :: TreeCtrl a -> TreeItem -> Bool -> IO (Rect)

-- | usage: (<tt>treeCtrlGetChildrenCount obj item recursively</tt>).
treeCtrlGetChildrenCount :: TreeCtrl a -> TreeItem -> Bool -> IO Int

-- | usage: (<tt>treeCtrlGetCount obj</tt>).
treeCtrlGetCount :: TreeCtrl a -> IO Int

-- | usage: (<tt>treeCtrlGetEditControl obj</tt>).
treeCtrlGetEditControl :: TreeCtrl a -> IO (TextCtrl ())

-- | usage: (<tt>treeCtrlGetFirstChild obj item cookie</tt>).
treeCtrlGetFirstChild :: TreeCtrl a -> TreeItem -> Ptr CInt -> IO (TreeItem)

-- | usage: (<tt>treeCtrlGetFirstVisibleItem obj item</tt>).
treeCtrlGetFirstVisibleItem :: TreeCtrl a -> TreeItem -> IO (TreeItem)

-- | usage: (<tt>treeCtrlGetImageList obj</tt>).
treeCtrlGetImageList :: TreeCtrl a -> IO (ImageList ())

-- | usage: (<tt>treeCtrlGetIndent obj</tt>).
treeCtrlGetIndent :: TreeCtrl a -> IO Int

-- | usage: (<tt>treeCtrlGetItemClientClosure obj item</tt>).
treeCtrlGetItemClientClosure :: TreeCtrl a -> TreeItem -> IO (Closure ())

-- | usage: (<tt>treeCtrlGetItemData obj item</tt>).
treeCtrlGetItemData :: TreeCtrl a -> TreeItem -> IO (Ptr ())

-- | usage: (<tt>treeCtrlGetItemImage obj item which</tt>).
treeCtrlGetItemImage :: TreeCtrl a -> TreeItem -> Int -> IO Int

-- | usage: (<tt>treeCtrlGetItemText obj item</tt>).
treeCtrlGetItemText :: TreeCtrl a -> TreeItem -> IO (String)

-- | usage: (<tt>treeCtrlGetLastChild obj item</tt>).
treeCtrlGetLastChild :: TreeCtrl a -> TreeItem -> IO (TreeItem)

-- | usage: (<tt>treeCtrlGetNextChild obj item cookie</tt>).
treeCtrlGetNextChild :: TreeCtrl a -> TreeItem -> Ptr CInt -> IO (TreeItem)

-- | usage: (<tt>treeCtrlGetNextSibling obj item</tt>).
treeCtrlGetNextSibling :: TreeCtrl a -> TreeItem -> IO (TreeItem)

-- | usage: (<tt>treeCtrlGetNextVisible obj item</tt>).
treeCtrlGetNextVisible :: TreeCtrl a -> TreeItem -> IO (TreeItem)

-- | usage: (<tt>treeCtrlGetParent obj item</tt>).
treeCtrlGetParent :: TreeCtrl a -> TreeItem -> IO (TreeItem)

-- | usage: (<tt>treeCtrlGetPrevSibling obj item</tt>).
treeCtrlGetPrevSibling :: TreeCtrl a -> TreeItem -> IO (TreeItem)

-- | usage: (<tt>treeCtrlGetPrevVisible obj item</tt>).
treeCtrlGetPrevVisible :: TreeCtrl a -> TreeItem -> IO (TreeItem)

-- | usage: (<tt>treeCtrlGetRootItem obj</tt>).
treeCtrlGetRootItem :: TreeCtrl a -> IO (TreeItem)

-- | usage: (<tt>treeCtrlGetSelection obj</tt>).
treeCtrlGetSelection :: TreeCtrl a -> IO (TreeItem)

-- | usage: (<tt>treeCtrlGetSelections obj</tt>).
treeCtrlGetSelections :: TreeCtrl a -> IO [IntPtr]

-- | usage: (<tt>treeCtrlGetSpacing obj</tt>).
treeCtrlGetSpacing :: TreeCtrl a -> IO Int

-- | usage: (<tt>treeCtrlGetStateImageList obj</tt>).
treeCtrlGetStateImageList :: TreeCtrl a -> IO (ImageList ())

-- | usage: (<tt>treeCtrlHitTest obj xy flags</tt>).
treeCtrlHitTest :: TreeCtrl a -> Point -> Ptr CInt -> IO (TreeItem)

-- | usage: (<tt>treeCtrlInsertItem obj parent idPrevious text image
--   selectedImage wxdata</tt>).
treeCtrlInsertItem :: TreeCtrl a -> TreeItem -> TreeItem -> String -> Int -> Int -> Ptr g -> IO (TreeItem)

-- | usage: (<tt>treeCtrlInsertItem2 obj parent idPrevious text image
--   selectedImage closure</tt>).
treeCtrlInsertItem2 :: TreeCtrl a -> Window b -> TreeItem -> String -> Int -> Int -> Closure g -> IO (TreeItem)

-- | usage: (<tt>treeCtrlInsertItemByIndex obj parent index text image
--   selectedImage wxdata</tt>).
treeCtrlInsertItemByIndex :: TreeCtrl a -> TreeItem -> Int -> String -> Int -> Int -> Ptr g -> IO (TreeItem)

-- | usage: (<tt>treeCtrlInsertItemByIndex2 obj parent index text image
--   selectedImage closure</tt>).
treeCtrlInsertItemByIndex2 :: TreeCtrl a -> Window b -> Int -> String -> Int -> Int -> Closure g -> IO (TreeItem)

-- | usage: (<tt>treeCtrlIsBold obj item</tt>).
treeCtrlIsBold :: TreeCtrl a -> TreeItem -> IO Bool

-- | usage: (<tt>treeCtrlIsExpanded obj item</tt>).
treeCtrlIsExpanded :: TreeCtrl a -> TreeItem -> IO Bool

-- | usage: (<tt>treeCtrlIsSelected obj item</tt>).
treeCtrlIsSelected :: TreeCtrl a -> TreeItem -> IO Bool

-- | usage: (<tt>treeCtrlIsVisible obj item</tt>).
treeCtrlIsVisible :: TreeCtrl a -> TreeItem -> IO Bool

-- | usage: (<tt>treeCtrlItemHasChildren obj item</tt>).
treeCtrlItemHasChildren :: TreeCtrl a -> TreeItem -> IO Int

-- | usage: (<tt>treeCtrlOnCompareItems obj item1 item2</tt>).
treeCtrlOnCompareItems :: TreeCtrl a -> TreeItem -> TreeItem -> IO Int

-- | usage: (<tt>treeCtrlPrependItem obj parent text image selectedImage
--   wxdata</tt>).
treeCtrlPrependItem :: TreeCtrl a -> TreeItem -> String -> Int -> Int -> Ptr f -> IO (TreeItem)

-- | usage: (<tt>treeCtrlScrollTo obj item</tt>).
treeCtrlScrollTo :: TreeCtrl a -> TreeItem -> IO ()

-- | usage: (<tt>treeCtrlSelectItem obj item</tt>).
treeCtrlSelectItem :: TreeCtrl a -> TreeItem -> IO ()

-- | usage: (<tt>treeCtrlSetImageList obj imageList</tt>).
treeCtrlSetImageList :: TreeCtrl a -> ImageList b -> IO ()

-- | usage: (<tt>treeCtrlSetIndent obj indent</tt>).
treeCtrlSetIndent :: TreeCtrl a -> Int -> IO ()

-- | usage: (<tt>treeCtrlSetItemBackgroundColour obj item col</tt>).
treeCtrlSetItemBackgroundColour :: TreeCtrl a -> TreeItem -> Color -> IO ()

-- | usage: (<tt>treeCtrlSetItemBold obj item bold</tt>).
treeCtrlSetItemBold :: TreeCtrl a -> TreeItem -> Bool -> IO ()

-- | usage: (<tt>treeCtrlSetItemClientClosure obj item closure</tt>).
treeCtrlSetItemClientClosure :: TreeCtrl a -> TreeItem -> Closure c -> IO ()

-- | usage: (<tt>treeCtrlSetItemData obj item wxdata</tt>).
treeCtrlSetItemData :: TreeCtrl a -> TreeItem -> Ptr c -> IO ()

-- | usage: (<tt>treeCtrlSetItemDropHighlight obj item highlight</tt>).
treeCtrlSetItemDropHighlight :: TreeCtrl a -> TreeItem -> Bool -> IO ()

-- | usage: (<tt>treeCtrlSetItemFont obj item font</tt>).
treeCtrlSetItemFont :: TreeCtrl a -> TreeItem -> Font c -> IO ()

-- | usage: (<tt>treeCtrlSetItemHasChildren obj item hasChildren</tt>).
treeCtrlSetItemHasChildren :: TreeCtrl a -> TreeItem -> Bool -> IO ()

-- | usage: (<tt>treeCtrlSetItemImage obj item image which</tt>).
treeCtrlSetItemImage :: TreeCtrl a -> TreeItem -> Int -> Int -> IO ()

-- | usage: (<tt>treeCtrlSetItemText obj item text</tt>).
treeCtrlSetItemText :: TreeCtrl a -> TreeItem -> String -> IO ()

-- | usage: (<tt>treeCtrlSetItemTextColour obj item col</tt>).
treeCtrlSetItemTextColour :: TreeCtrl a -> TreeItem -> Color -> IO ()

-- | usage: (<tt>treeCtrlSetSpacing obj spacing</tt>).
treeCtrlSetSpacing :: TreeCtrl a -> Int -> IO ()

-- | usage: (<tt>treeCtrlSetStateImageList obj imageList</tt>).
treeCtrlSetStateImageList :: TreeCtrl a -> ImageList b -> IO ()

-- | usage: (<tt>treeCtrlSortChildren obj item</tt>).
treeCtrlSortChildren :: TreeCtrl a -> TreeItem -> IO ()

-- | usage: (<tt>treeCtrlToggle obj item</tt>).
treeCtrlToggle :: TreeCtrl a -> TreeItem -> IO ()

-- | usage: (<tt>treeCtrlUnselect obj</tt>).
treeCtrlUnselect :: TreeCtrl a -> IO ()

-- | usage: (<tt>treeCtrlUnselectAll obj</tt>).
treeCtrlUnselectAll :: TreeCtrl a -> IO ()

-- | usage: (<tt>treeEventAllow obj</tt>).
treeEventAllow :: TreeEvent a -> IO ()

-- | usage: (<tt>treeEventGetCode obj</tt>).
treeEventGetCode :: TreeEvent a -> IO Int

-- | usage: (<tt>treeEventGetItem obj</tt>).
treeEventGetItem :: TreeEvent a -> IO (TreeItem)

-- | usage: (<tt>treeEventGetKeyEvent obj</tt>).
treeEventGetKeyEvent :: TreeEvent a -> IO (KeyEvent ())

-- | usage: (<tt>treeEventGetLabel obj</tt>).
treeEventGetLabel :: TreeEvent a -> IO (String)

-- | usage: (<tt>treeEventGetOldItem obj</tt>).
treeEventGetOldItem :: TreeEvent a -> IO (TreeItem)

-- | usage: (<tt>treeEventGetPoint obj</tt>).
treeEventGetPoint :: TreeEvent a -> IO (Point)

-- | usage: (<tt>treeEventIsEditCancelled obj</tt>).
treeEventIsEditCancelled :: TreeEvent a -> IO Bool

-- | usage: (<tt>updateUIEventCheck obj check</tt>).
updateUIEventCheck :: UpdateUIEvent a -> Bool -> IO ()

-- | usage: (<tt>updateUIEventCopyObject obj obj</tt>).
updateUIEventCopyObject :: UpdateUIEvent a -> WxObject b -> IO ()

-- | usage: (<tt>updateUIEventEnable obj enable</tt>).
updateUIEventEnable :: UpdateUIEvent a -> Bool -> IO ()

-- | usage: (<tt>updateUIEventGetChecked obj</tt>).
updateUIEventGetChecked :: UpdateUIEvent a -> IO Bool

-- | usage: (<tt>updateUIEventGetEnabled obj</tt>).
updateUIEventGetEnabled :: UpdateUIEvent a -> IO Bool

-- | usage: (<tt>updateUIEventGetSetChecked obj</tt>).
updateUIEventGetSetChecked :: UpdateUIEvent a -> IO Bool

-- | usage: (<tt>updateUIEventGetSetEnabled obj</tt>).
updateUIEventGetSetEnabled :: UpdateUIEvent a -> IO Bool

-- | usage: (<tt>updateUIEventGetSetText obj</tt>).
updateUIEventGetSetText :: UpdateUIEvent a -> IO Bool

-- | usage: (<tt>updateUIEventGetText obj</tt>).
updateUIEventGetText :: UpdateUIEvent a -> IO (String)

-- | usage: (<tt>updateUIEventSetText obj text</tt>).
updateUIEventSetText :: UpdateUIEvent a -> String -> IO ()

-- | usage: (<tt>validatorCreate</tt>).
validatorCreate :: IO (Validator ())

-- | usage: (<tt>validatorDelete obj</tt>).
validatorDelete :: Validator a -> IO ()

-- | usage: (<tt>validatorGetWindow obj</tt>).
validatorGetWindow :: Validator a -> IO (Window ())

-- | usage: (<tt>validatorSetWindow obj win</tt>).
validatorSetWindow :: Validator a -> Window b -> IO ()

-- | usage: (<tt>validatorSuppressBellOnError doIt</tt>).
validatorSuppressBellOnError :: Bool -> IO ()

-- | usage: (<tt>validatorTransferFromWindow obj</tt>).
validatorTransferFromWindow :: Validator a -> IO Bool

-- | usage: (<tt>validatorTransferToWindow obj</tt>).
validatorTransferToWindow :: Validator a -> IO Bool

-- | usage: (<tt>validatorValidate obj parent</tt>).
validatorValidate :: Validator a -> Window b -> IO Bool

-- | usage: (<tt>wxcAppBell</tt>).
wxcAppBell :: IO ()

-- | usage: (<tt>wxcAppCreateLogTarget</tt>).
wxcAppCreateLogTarget :: IO (WXCLog ())

-- | usage: (<tt>wxcAppDispatch</tt>).
wxcAppDispatch :: IO ()

-- | usage: (<tt>wxcAppDisplaySize</tt>).
wxcAppDisplaySize :: IO (Size)

-- | usage: (<tt>wxcAppEnableTooltips enable</tt>).
wxcAppEnableTooltips :: Bool -> IO ()

-- | usage: (<tt>wxcAppEnableTopLevelWindows enb</tt>).
wxcAppEnableTopLevelWindows :: Int -> IO ()

-- | usage: (<tt>wxcAppExecuteProcess cmd snc prc</tt>).
wxcAppExecuteProcess :: String -> Int -> Process c -> IO Int

-- | usage: (<tt>wxcAppExit</tt>).
wxcAppExit :: IO ()

-- | usage: (<tt>wxcAppExitMainLoop</tt>).
wxcAppExitMainLoop :: IO ()

-- | usage: (<tt>wxcAppFindWindowById id prt</tt>).
wxcAppFindWindowById :: Id -> Window b -> IO (Ptr ())

-- | usage: (<tt>wxcAppFindWindowByLabel lbl prt</tt>).
wxcAppFindWindowByLabel :: String -> Window b -> IO (Window ())

-- | usage: (<tt>wxcAppFindWindowByName lbl prt</tt>).
wxcAppFindWindowByName :: String -> Window b -> IO (Window ())

-- | usage: (<tt>wxcAppGetApp</tt>).
wxcAppGetApp :: IO (App ())

-- | usage: (<tt>wxcAppGetAppName</tt>).
wxcAppGetAppName :: IO (String)

-- | usage: (<tt>wxcAppGetClassName</tt>).
wxcAppGetClassName :: IO (String)

-- | usage: (<tt>wxcAppGetExitOnFrameDelete</tt>).
wxcAppGetExitOnFrameDelete :: IO Int

-- | usage: (<tt>wxcAppGetIdleInterval</tt>).
wxcAppGetIdleInterval :: IO Int

-- | usage: (<tt>wxcAppGetOsDescription</tt>).
wxcAppGetOsDescription :: IO (String)

-- | usage: (<tt>wxcAppGetOsVersion maj min</tt>).
wxcAppGetOsVersion :: Ptr a -> Ptr b -> IO Int

-- | usage: (<tt>wxcAppGetTopWindow</tt>).
wxcAppGetTopWindow :: IO (Window ())

-- | usage: (<tt>wxcAppGetUseBestVisual</tt>).
wxcAppGetUseBestVisual :: IO Int

-- | usage: (<tt>wxcAppGetUserHome usr</tt>).
wxcAppGetUserHome :: Ptr a -> IO (String)

-- | usage: (<tt>wxcAppGetUserId</tt>).
wxcAppGetUserId :: IO (String)

-- | usage: (<tt>wxcAppGetUserName</tt>).
wxcAppGetUserName :: IO (String)

-- | usage: (<tt>wxcAppGetVendorName</tt>).
wxcAppGetVendorName :: IO (String)

-- | usage: (<tt>wxcAppInitAllImageHandlers</tt>).
wxcAppInitAllImageHandlers :: IO ()

-- | usage: (<tt>wxcAppInitializeC closure argc argv</tt>).
wxcAppInitializeC :: Closure a -> Int -> Ptr (Ptr CWchar) -> IO ()

-- | usage: (<tt>wxcAppInitialized</tt>).
wxcAppInitialized :: IO Bool

-- | usage: (<tt>wxcAppIsTerminating</tt>).
wxcAppIsTerminating :: IO Bool

-- | usage: (<tt>wxcAppMainLoop</tt>).
wxcAppMainLoop :: IO Int

-- | usage: (<tt>wxcAppMilliSleep mscs</tt>).
wxcAppMilliSleep :: Int -> IO ()

-- | usage: (<tt>wxcAppMousePosition</tt>).
wxcAppMousePosition :: IO (Point)

-- | usage: (<tt>wxcAppPending</tt>).
wxcAppPending :: IO Int

-- | usage: (<tt>wxcAppSafeYield win</tt>).
wxcAppSafeYield :: Window a -> IO Int

-- | usage: (<tt>wxcAppSetAppName name</tt>).
wxcAppSetAppName :: String -> IO ()

-- | usage: (<tt>wxcAppSetClassName name</tt>).
wxcAppSetClassName :: String -> IO ()

-- | usage: (<tt>wxcAppSetExitOnFrameDelete flag</tt>).
wxcAppSetExitOnFrameDelete :: Int -> IO ()

-- | usage: (<tt>wxcAppSetIdleInterval interval</tt>).
wxcAppSetIdleInterval :: Int -> IO ()

-- | usage: (<tt>wxcAppSetPrintMode mode</tt>).
wxcAppSetPrintMode :: Int -> IO ()

-- | usage: (<tt>wxcAppSetTooltipDelay ms</tt>).
wxcAppSetTooltipDelay :: Int -> IO ()

-- | usage: (<tt>wxcAppSetTopWindow wnd</tt>).
wxcAppSetTopWindow :: Window a -> IO ()

-- | usage: (<tt>wxcAppSetUseBestVisual flag</tt>).
wxcAppSetUseBestVisual :: Int -> IO ()

-- | usage: (<tt>wxcAppSetVendorName name</tt>).
wxcAppSetVendorName :: String -> IO ()

-- | usage: (<tt>wxcAppSleep scs</tt>).
wxcAppSleep :: Int -> IO ()

-- | usage: (<tt>wxcAppYield</tt>).
wxcAppYield :: IO Int

-- | usage: (<tt>wxcArtProvCreate obj clb</tt>).
wxcArtProvCreate :: Ptr a -> Ptr b -> IO (WXCArtProv ())

-- | usage: (<tt>wxcArtProvRelease obj</tt>).
wxcArtProvRelease :: WXCArtProv a -> IO ()

-- | usage: (<tt>wxcDragDataObjectCreate obj fmt func1 func2 func3</tt>).
wxcDragDataObjectCreate :: Ptr a -> String -> Ptr c -> Ptr d -> Ptr e -> IO (WXCDragDataObject ())

-- | usage: (<tt>wxcDragDataObjectDelete obj</tt>).
wxcDragDataObjectDelete :: WXCDragDataObject a -> IO ()

-- | usage: (<tt>wxcDropTargetCreate obj</tt>).
wxcDropTargetCreate :: Ptr a -> IO (WXCDropTarget ())

-- | usage: (<tt>wxcDropTargetDelete obj</tt>).
wxcDropTargetDelete :: WXCDropTarget a -> IO ()

-- | usage: (<tt>wxcDropTargetSetOnData obj func</tt>).
wxcDropTargetSetOnData :: WXCDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcDropTargetSetOnDragOver obj func</tt>).
wxcDropTargetSetOnDragOver :: WXCDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcDropTargetSetOnDrop obj func</tt>).
wxcDropTargetSetOnDrop :: WXCDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcDropTargetSetOnEnter obj func</tt>).
wxcDropTargetSetOnEnter :: WXCDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcDropTargetSetOnLeave obj func</tt>).
wxcDropTargetSetOnLeave :: WXCDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcFileDropTargetCreate obj func</tt>).
wxcFileDropTargetCreate :: Ptr a -> Ptr b -> IO (WXCFileDropTarget ())

-- | usage: (<tt>wxcFileDropTargetDelete obj</tt>).
wxcFileDropTargetDelete :: WXCFileDropTarget a -> IO ()

-- | usage: (<tt>wxcFileDropTargetSetOnData obj func</tt>).
wxcFileDropTargetSetOnData :: WXCFileDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcFileDropTargetSetOnDragOver obj func</tt>).
wxcFileDropTargetSetOnDragOver :: WXCFileDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcFileDropTargetSetOnDrop obj func</tt>).
wxcFileDropTargetSetOnDrop :: WXCFileDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcFileDropTargetSetOnEnter obj func</tt>).
wxcFileDropTargetSetOnEnter :: WXCFileDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcFileDropTargetSetOnLeave obj func</tt>).
wxcFileDropTargetSetOnLeave :: WXCFileDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcGridTableCreate obj eifGetNumberRows eifGetNumberCols
--   eifGetValue eifSetValue eifIsEmptyCell eifClear eifInsertRows
--   eifAppendRows eifDeleteRows eifInsertCols eifAppendCols eifDeleteCols
--   eifSetRowLabelValue eifSetColLabelValue eifGetRowLabelValue
--   eifGetColLabelValue</tt>).
wxcGridTableCreate :: Ptr a -> Ptr b -> Ptr c -> Ptr d -> Ptr e -> Ptr f -> Ptr g -> Ptr h -> Ptr i -> Ptr j -> Ptr k -> Ptr l -> Ptr m -> Ptr n -> Ptr o -> Ptr p -> Ptr q -> IO (WXCGridTable ())

-- | usage: (<tt>wxcGridTableDelete obj</tt>).
wxcGridTableDelete :: WXCGridTable a -> IO ()

-- | usage: (<tt>wxcGridTableGetView obj</tt>).
wxcGridTableGetView :: WXCGridTable a -> IO (View ())

-- | usage: (<tt>wxcGridTableSendTableMessage obj id val1 val2</tt>).
wxcGridTableSendTableMessage :: WXCGridTable a -> Id -> Int -> Int -> IO (Ptr ())

-- | Return the <i>href</i> attribute of the associated html anchor (if
--   applicable) *
wxcHtmlEventGetHref :: WXCHtmlEvent a -> IO (String)

-- | usage: (<tt>wxcHtmlEventGetHtmlCell self</tt>).
wxcHtmlEventGetHtmlCell :: WXCHtmlEvent a -> IO (HtmlCell ())

-- | usage: (<tt>wxcHtmlEventGetHtmlCellId self</tt>).
wxcHtmlEventGetHtmlCellId :: WXCHtmlEvent a -> IO (String)

-- | usage: (<tt>wxcHtmlEventGetLogicalPosition self</tt>).
wxcHtmlEventGetLogicalPosition :: WXCHtmlEvent a -> IO (Point)

-- | usage: (<tt>wxcHtmlEventGetMouseEvent self</tt>).
wxcHtmlEventGetMouseEvent :: WXCHtmlEvent a -> IO (MouseEvent ())

-- | usage: (<tt>wxcHtmlEventGetTarget self</tt>).
wxcHtmlEventGetTarget :: WXCHtmlEvent a -> IO (String)

-- | usage: (<tt>wxcHtmlWindowCreate prt id lfttopwdthgt stl txt</tt>).
wxcHtmlWindowCreate :: Window a -> Id -> Rect -> Style -> String -> IO (WXCHtmlWindow ())

-- | usage: (<tt>wxcLogAddTraceMask obj str</tt>).
wxcLogAddTraceMask :: WXCLog a -> String -> IO ()

-- | usage: (<tt>wxcLogCreate obj fnc</tt>).
wxcLogCreate :: Ptr a -> Ptr b -> IO (WXCLog ())

-- | usage: (<tt>wxcLogDelete obj</tt>).
wxcLogDelete :: WXCLog a -> IO ()

-- | usage: (<tt>wxcLogDontCreateOnDemand obj</tt>).
wxcLogDontCreateOnDemand :: WXCLog a -> IO ()

-- | usage: (<tt>wxcLogEnableLogging obj doIt</tt>).
wxcLogEnableLogging :: WXCLog a -> Bool -> IO Int

-- | usage: (<tt>wxcLogFlush obj</tt>).
wxcLogFlush :: WXCLog a -> IO ()

-- | usage: (<tt>wxcLogFlushActive obj</tt>).
wxcLogFlushActive :: WXCLog a -> IO ()

-- | usage: (<tt>wxcLogGetActiveTarget</tt>).
wxcLogGetActiveTarget :: IO (Ptr ())

-- | usage: (<tt>wxcLogGetTimestamp obj</tt>).
wxcLogGetTimestamp :: WXCLog a -> IO (Ptr ())

-- | usage: (<tt>wxcLogGetTraceMask obj</tt>).
wxcLogGetTraceMask :: WXCLog a -> IO Int

-- | usage: (<tt>wxcLogGetVerbose obj</tt>).
wxcLogGetVerbose :: WXCLog a -> IO Int

-- | usage: (<tt>wxcLogHasPendingMessages obj</tt>).
wxcLogHasPendingMessages :: WXCLog a -> IO Bool

-- | usage: (<tt>wxcLogIsAllowedTraceMask obj mask</tt>).
wxcLogIsAllowedTraceMask :: WXCLog a -> Mask b -> IO Bool

-- | usage: (<tt>wxcLogIsEnabled obj</tt>).
wxcLogIsEnabled :: WXCLog a -> IO Bool

-- | usage: (<tt>wxcLogOnLog obj level szString t</tt>).
wxcLogOnLog :: WXCLog a -> Int -> Ptr c -> Int -> IO ()

-- | usage: (<tt>wxcLogRemoveTraceMask obj str</tt>).
wxcLogRemoveTraceMask :: WXCLog a -> String -> IO ()

-- | usage: (<tt>wxcLogResume obj</tt>).
wxcLogResume :: WXCLog a -> IO ()

-- | usage: (<tt>wxcLogSetActiveTarget pLogger</tt>).
wxcLogSetActiveTarget :: WXCLog a -> IO (Ptr ())

-- | usage: (<tt>wxcLogSetTimestamp obj ts</tt>).
wxcLogSetTimestamp :: WXCLog a -> Ptr b -> IO ()

-- | usage: (<tt>wxcLogSetVerbose obj bVerbose</tt>).
wxcLogSetVerbose :: WXCLog a -> Int -> IO ()

-- | usage: (<tt>wxcLogSuspend obj</tt>).
wxcLogSuspend :: WXCLog a -> IO ()

-- | usage: (<tt>wxcPreviewControlBarCreate preview buttons parent title
--   xywh style</tt>).
wxcPreviewControlBarCreate :: Ptr a -> Int -> Window c -> Ptr d -> Rect -> Int -> IO (WXCPreviewControlBar ())

-- | usage: (<tt>wxcPreviewFrameCreate obj wxinit createcanvas
--   createtoolbar preview parent title xywh style</tt>).
wxcPreviewFrameCreate :: Ptr a -> Ptr b -> Ptr c -> Ptr d -> Ptr e -> Window f -> Ptr g -> Rect -> Int -> IO (WXCPreviewFrame ())

-- | usage: (<tt>wxcPreviewFrameGetControlBar obj</tt>).
wxcPreviewFrameGetControlBar :: WXCPreviewFrame a -> IO (Ptr ())

-- | usage: (<tt>wxcPreviewFrameGetPreviewCanvas obj</tt>).
wxcPreviewFrameGetPreviewCanvas :: WXCPreviewFrame a -> IO (PreviewCanvas ())

-- | usage: (<tt>wxcPreviewFrameGetPrintPreview obj</tt>).
wxcPreviewFrameGetPrintPreview :: WXCPreviewFrame a -> IO (PrintPreview ())

-- | usage: (<tt>wxcPreviewFrameInitialize obj</tt>).
wxcPreviewFrameInitialize :: WXCPreviewFrame a -> IO ()

-- | usage: (<tt>wxcPreviewFrameSetControlBar obj obj</tt>).
wxcPreviewFrameSetControlBar :: WXCPreviewFrame a -> Ptr b -> IO ()

-- | usage: (<tt>wxcPreviewFrameSetPreviewCanvas obj obj</tt>).
wxcPreviewFrameSetPreviewCanvas :: WXCPreviewFrame a -> PreviewCanvas b -> IO ()

-- | usage: (<tt>wxcPreviewFrameSetPrintPreview obj obj</tt>).
wxcPreviewFrameSetPrintPreview :: WXCPreviewFrame a -> PrintPreview b -> IO ()

-- | usage: (<tt>wxcPrintEventGetContinue self</tt>).
wxcPrintEventGetContinue :: WXCPrintEvent a -> IO Bool

-- | usage: (<tt>wxcPrintEventGetEndPage self</tt>).
wxcPrintEventGetEndPage :: WXCPrintEvent a -> IO Int

-- | usage: (<tt>wxcPrintEventGetPage self</tt>).
wxcPrintEventGetPage :: WXCPrintEvent a -> IO Int

-- | Usage: <tt>wxcPrintEventGetPrintout self</tt>. Do not delete the
--   associated printout! *
wxcPrintEventGetPrintout :: WXCPrintEvent a -> IO (WXCPrintout ())

-- | usage: (<tt>wxcPrintEventSetContinue self cont</tt>).
wxcPrintEventSetContinue :: WXCPrintEvent a -> Bool -> IO ()

-- | usage: (<tt>wxcPrintEventSetPageLimits self startPage endPage fromPage
--   toPage</tt>).
wxcPrintEventSetPageLimits :: WXCPrintEvent a -> Int -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>wxcPrintoutCreate title</tt>).
wxcPrintoutCreate :: String -> IO (WXCPrintout ())

-- | usage: (<tt>wxcPrintoutDelete self</tt>).
wxcPrintoutDelete :: WXCPrintout a -> IO ()

-- | Usage: <tt>wxcPrintoutGetEvtHandler self</tt>. Do not delete the
--   associated event handler! *
wxcPrintoutGetEvtHandler :: WXCPrintout a -> IO (WXCPrintoutHandler ())

-- | usage: (<tt>wxcPrintoutSetPageLimits self startPage endPage fromPage
--   toPage</tt>).
wxcPrintoutSetPageLimits :: WXCPrintout a -> Int -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>wxcTextDropTargetCreate obj func</tt>).
wxcTextDropTargetCreate :: Ptr a -> Ptr b -> IO (WXCTextDropTarget ())

-- | usage: (<tt>wxcTextDropTargetDelete obj</tt>).
wxcTextDropTargetDelete :: WXCTextDropTarget a -> IO ()

-- | usage: (<tt>wxcTextDropTargetSetOnData obj func</tt>).
wxcTextDropTargetSetOnData :: WXCTextDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcTextDropTargetSetOnDragOver obj func</tt>).
wxcTextDropTargetSetOnDragOver :: WXCTextDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcTextDropTargetSetOnDrop obj func</tt>).
wxcTextDropTargetSetOnDrop :: WXCTextDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcTextDropTargetSetOnEnter obj func</tt>).
wxcTextDropTargetSetOnEnter :: WXCTextDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcTextDropTargetSetOnLeave obj func</tt>).
wxcTextDropTargetSetOnLeave :: WXCTextDropTarget a -> Ptr b -> IO ()

-- | usage: (<tt>wxcTextValidatorCreate obj fnc txt stl</tt>).
wxcTextValidatorCreate :: Ptr a -> Ptr b -> String -> Style -> IO (WXCTextValidator ())

-- | usage: (<tt>wxcTreeItemDataCreate closure</tt>).
wxcTreeItemDataCreate :: Closure a -> IO (WXCTreeItemData ())

-- | usage: (<tt>wxcTreeItemDataGetClientClosure self</tt>).
wxcTreeItemDataGetClientClosure :: WXCTreeItemData a -> IO (Closure ())

-- | usage: (<tt>wxcTreeItemDataSetClientClosure self closure</tt>).
wxcTreeItemDataSetClientClosure :: WXCTreeItemData a -> Closure b -> IO ()

-- | usage: (<tt>windowAddChild obj child</tt>).
windowAddChild :: Window a -> Window b -> IO ()

-- | usage: (<tt>windowAddConstraintReference obj otherWin</tt>).
windowAddConstraintReference :: Window a -> Window b -> IO ()

-- | usage: (<tt>windowCaptureMouse obj</tt>).
windowCaptureMouse :: Window a -> IO ()

-- | usage: (<tt>windowCenter obj direction</tt>).
windowCenter :: Window a -> Int -> IO ()

-- | usage: (<tt>windowCenterOnParent obj dir</tt>).
windowCenterOnParent :: Window a -> Int -> IO ()

-- | usage: (<tt>windowClearBackground obj</tt>).
windowClearBackground :: Window a -> IO ()

-- | usage: (<tt>windowClientToScreen obj xy</tt>).
windowClientToScreen :: Window a -> Point -> IO (Point)

-- | usage: (<tt>windowClose obj force</tt>).
windowClose :: Window a -> Bool -> IO Bool

-- | usage: (<tt>windowConvertDialogToPixels obj</tt>).
windowConvertDialogToPixels :: Window a -> IO (Point)

-- | usage: (<tt>windowConvertDialogToPixelsEx obj</tt>).
windowConvertDialogToPixelsEx :: Window a -> IO (Point)

-- | usage: (<tt>windowConvertPixelsToDialog obj</tt>).
windowConvertPixelsToDialog :: Window a -> IO (Point)

-- | usage: (<tt>windowConvertPixelsToDialogEx obj</tt>).
windowConvertPixelsToDialogEx :: Window a -> IO (Point)

-- | usage: (<tt>windowCreate prt id xywh stl</tt>).
windowCreate :: Window a -> Id -> Rect -> Style -> IO (Window ())

-- | usage: (<tt>windowDeleteRelatedConstraints obj</tt>).
windowDeleteRelatedConstraints :: Window a -> IO ()

-- | usage: (<tt>windowDestroy obj</tt>).
windowDestroy :: Window a -> IO Bool

-- | usage: (<tt>windowDestroyChildren obj</tt>).
windowDestroyChildren :: Window a -> IO Bool

-- | usage: (<tt>windowDisable obj</tt>).
windowDisable :: Window a -> IO Bool

-- | usage: (<tt>windowDoPhase obj phase</tt>).
windowDoPhase :: Window a -> Int -> IO Int

-- | usage: (<tt>windowEnable obj</tt>).
windowEnable :: Window a -> IO Bool

-- | usage: (<tt>windowFindFocus obj</tt>).
windowFindFocus :: Window a -> IO (Window ())

-- | usage: (<tt>windowFindWindow obj name</tt>).
windowFindWindow :: Window a -> String -> IO (Window ())

-- | usage: (<tt>windowFit obj</tt>).
windowFit :: Window a -> IO ()

-- | usage: (<tt>windowFitInside obj</tt>).
windowFitInside :: Window a -> IO ()

-- | usage: (<tt>windowFreeze obj</tt>).
windowFreeze :: Window a -> IO ()

-- | usage: (<tt>windowGetAutoLayout obj</tt>).
windowGetAutoLayout :: Window a -> IO Int

-- | usage: (<tt>windowGetBackgroundColour obj</tt>).
windowGetBackgroundColour :: Window a -> IO (Color)

-- | usage: (<tt>windowGetBestSize obj</tt>).
windowGetBestSize :: Window a -> IO (Size)

-- | usage: (<tt>windowGetCaret obj</tt>).
windowGetCaret :: Window a -> IO (Caret ())

-- | usage: (<tt>windowGetCharHeight obj</tt>).
windowGetCharHeight :: Window a -> IO Int

-- | usage: (<tt>windowGetCharWidth obj</tt>).
windowGetCharWidth :: Window a -> IO Int

-- | usage: (<tt>windowGetChildren obj res cnt</tt>).
windowGetChildren :: Window a -> Ptr b -> Int -> IO Int

-- | usage: (<tt>windowGetClientData obj</tt>).
windowGetClientData :: Window a -> IO (ClientData ())

-- | usage: (<tt>windowGetClientSize obj</tt>).
windowGetClientSize :: Window a -> IO (Size)

-- | usage: (<tt>windowGetClientSizeConstraint obj</tt>).
windowGetClientSizeConstraint :: Window a -> IO Size

-- | usage: (<tt>windowGetConstraints obj</tt>).
windowGetConstraints :: Window a -> IO (LayoutConstraints ())

-- | usage: (<tt>windowGetConstraintsInvolvedIn obj</tt>).
windowGetConstraintsInvolvedIn :: Window a -> IO (Ptr ())

-- | usage: (<tt>windowGetCursor obj</tt>).
windowGetCursor :: Window a -> IO (Cursor ())

-- | usage: (<tt>windowGetDropTarget obj</tt>).
windowGetDropTarget :: Window a -> IO (DropTarget ())

-- | usage: (<tt>windowGetEffectiveMinSize obj</tt>).
windowGetEffectiveMinSize :: Window a -> IO (Size)

-- | usage: (<tt>windowGetEventHandler obj</tt>).
windowGetEventHandler :: Window a -> IO (EvtHandler ())

-- | usage: (<tt>windowGetFont obj</tt>).
windowGetFont :: Window a -> IO (Font ())

-- | usage: (<tt>windowGetForegroundColour obj</tt>).
windowGetForegroundColour :: Window a -> IO (Color)

-- | usage: (<tt>windowGetHandle obj</tt>).
windowGetHandle :: Window a -> IO (Ptr ())

-- | usage: (<tt>windowGetId obj</tt>).
windowGetId :: Window a -> IO Int

-- | usage: (<tt>windowGetLabel obj</tt>).
windowGetLabel :: Window a -> IO (String)

-- | usage: (<tt>windowGetLabelEmpty obj</tt>).
windowGetLabelEmpty :: Window a -> IO Int

-- | usage: (<tt>windowGetMaxHeight obj</tt>).
windowGetMaxHeight :: Window a -> IO Int

-- | usage: (<tt>windowGetMaxWidth obj</tt>).
windowGetMaxWidth :: Window a -> IO Int

-- | usage: (<tt>windowGetMinHeight obj</tt>).
windowGetMinHeight :: Window a -> IO Int

-- | usage: (<tt>windowGetMinWidth obj</tt>).
windowGetMinWidth :: Window a -> IO Int

-- | usage: (<tt>windowGetName obj</tt>).
windowGetName :: Window a -> IO (String)

-- | usage: (<tt>windowGetParent obj</tt>).
windowGetParent :: Window a -> IO (Window ())

-- | usage: (<tt>windowGetPosition obj</tt>).
windowGetPosition :: Window a -> IO (Point)

-- | usage: (<tt>windowGetPositionConstraint obj</tt>).
windowGetPositionConstraint :: Window a -> IO Point

-- | usage: (<tt>windowGetRect obj</tt>).
windowGetRect :: Window a -> IO (Rect)

-- | usage: (<tt>windowGetScrollPos obj orient</tt>).
windowGetScrollPos :: Window a -> Int -> IO Int

-- | usage: (<tt>windowGetScrollRange obj orient</tt>).
windowGetScrollRange :: Window a -> Int -> IO Int

-- | usage: (<tt>windowGetScrollThumb obj orient</tt>).
windowGetScrollThumb :: Window a -> Int -> IO Int

-- | usage: (<tt>windowGetSize obj</tt>).
windowGetSize :: Window a -> IO (Size)

-- | usage: (<tt>windowGetSizeConstraint obj</tt>).
windowGetSizeConstraint :: Window a -> IO Size

-- | usage: (<tt>windowGetSizer obj</tt>).
windowGetSizer :: Window a -> IO (Sizer ())

-- | usage: (<tt>windowGetTextExtent obj string x y descent externalLeading
--   theFont</tt>).
windowGetTextExtent :: Window a -> String -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Font g -> IO ()

-- | usage: (<tt>windowGetToolTip obj</tt>).
windowGetToolTip :: Window a -> IO (String)

-- | usage: (<tt>windowGetUpdateRegion obj</tt>).
windowGetUpdateRegion :: Window a -> IO (Region ())

-- | usage: (<tt>windowGetValidator obj</tt>).
windowGetValidator :: Window a -> IO (Validator ())

-- | usage: (<tt>windowGetVirtualSize obj</tt>).
windowGetVirtualSize :: Window a -> IO (Size)

-- | usage: (<tt>windowGetWindowStyleFlag obj</tt>).
windowGetWindowStyleFlag :: Window a -> IO Int

-- | usage: (<tt>windowHasFlag obj flag</tt>).
windowHasFlag :: Window a -> Int -> IO Bool

-- | usage: (<tt>windowHasFocus obj</tt>).
windowHasFocus :: Window a -> IO Bool

-- | usage: (<tt>windowHide obj</tt>).
windowHide :: Window a -> IO Bool

-- | usage: (<tt>windowInitDialog obj</tt>).
windowInitDialog :: Window a -> IO ()

-- | usage: (<tt>windowIsBeingDeleted obj</tt>).
windowIsBeingDeleted :: Window a -> IO Bool

-- | usage: (<tt>windowIsEnabled obj</tt>).
windowIsEnabled :: Window a -> IO Bool

-- | usage: (<tt>windowIsExposed obj xywh</tt>).
windowIsExposed :: Window a -> Rect -> IO Bool

-- | usage: (<tt>windowIsShown obj</tt>).
windowIsShown :: Window a -> IO Bool

-- | usage: (<tt>windowIsTopLevel obj</tt>).
windowIsTopLevel :: Window a -> IO Bool

-- | usage: (<tt>windowLayout obj</tt>).
windowLayout :: Window a -> IO Int

-- | usage: (<tt>windowLayoutPhase1 obj noChanges</tt>).
windowLayoutPhase1 :: Window a -> Ptr CInt -> IO Int

-- | usage: (<tt>windowLayoutPhase2 obj noChanges</tt>).
windowLayoutPhase2 :: Window a -> Ptr CInt -> IO Int

-- | usage: (<tt>windowLower obj</tt>).
windowLower :: Window a -> IO ()

-- | usage: (<tt>windowMove obj xy</tt>).
windowMove :: Window a -> Point -> IO ()

-- | usage: (<tt>windowMoveConstraint obj xy</tt>).
windowMoveConstraint :: Window a -> Point -> IO ()

-- | usage: (<tt>windowPopEventHandler obj deleteHandler</tt>).
windowPopEventHandler :: Window a -> Bool -> IO (Ptr ())

-- | usage: (<tt>windowPopupMenu obj menu xy</tt>).
windowPopupMenu :: Window a -> Menu b -> Point -> IO Int

-- | usage: (<tt>windowPrepareDC obj dc</tt>).
windowPrepareDC :: Window a -> DC b -> IO ()

-- | usage: (<tt>windowPushEventHandler obj handler</tt>).
windowPushEventHandler :: Window a -> EvtHandler b -> IO ()

-- | usage: (<tt>windowRaise obj</tt>).
windowRaise :: Window a -> IO ()

-- | usage: (<tt>windowRefresh obj eraseBackground</tt>).
windowRefresh :: Window a -> Bool -> IO ()

-- | usage: (<tt>windowRefreshRect obj eraseBackground xywh</tt>).
windowRefreshRect :: Window a -> Bool -> Rect -> IO ()

-- | usage: (<tt>windowReleaseMouse obj</tt>).
windowReleaseMouse :: Window a -> IO ()

-- | usage: (<tt>windowRemoveChild obj child</tt>).
windowRemoveChild :: Window a -> Window b -> IO ()

-- | usage: (<tt>windowRemoveConstraintReference obj otherWin</tt>).
windowRemoveConstraintReference :: Window a -> Window b -> IO ()

-- | usage: (<tt>windowReparent obj par</tt>).
windowReparent :: Window a -> Window b -> IO Int

-- | usage: (<tt>windowResetConstraints obj</tt>).
windowResetConstraints :: Window a -> IO ()

-- | usage: (<tt>windowScreenToClient obj xy</tt>).
windowScreenToClient :: Window a -> Point -> IO (Point)

-- | usage: (<tt>windowScreenToClient2 obj xy</tt>).
windowScreenToClient2 :: Window a -> Point -> IO (Point)

-- | usage: (<tt>windowScrollWindow obj dxdy</tt>).
windowScrollWindow :: Window a -> Vector -> IO ()

-- | usage: (<tt>windowScrollWindowRect obj dxdy xywh</tt>).
windowScrollWindowRect :: Window a -> Vector -> Rect -> IO ()

-- | usage: (<tt>windowSetAcceleratorTable obj accel</tt>).
windowSetAcceleratorTable :: Window a -> AcceleratorTable b -> IO ()

-- | usage: (<tt>windowSetAutoLayout obj autoLayout</tt>).
windowSetAutoLayout :: Window a -> Bool -> IO ()

-- | usage: (<tt>windowSetBackgroundColour obj colour</tt>).
windowSetBackgroundColour :: Window a -> Color -> IO Int

-- | usage: (<tt>windowSetCaret obj caret</tt>).
windowSetCaret :: Window a -> Caret b -> IO ()

-- | usage: (<tt>windowSetClientData obj wxdata</tt>).
windowSetClientData :: Window a -> ClientData b -> IO ()

-- | usage: (<tt>windowSetClientObject obj wxdata</tt>).
windowSetClientObject :: Window a -> ClientData b -> IO ()

-- | usage: (<tt>windowSetClientSize obj widthheight</tt>).
windowSetClientSize :: Window a -> Size -> IO ()

-- | usage: (<tt>windowSetConstraintSizes obj recurse</tt>).
windowSetConstraintSizes :: Window a -> Int -> IO ()

-- | usage: (<tt>windowSetConstraints obj constraints</tt>).
windowSetConstraints :: Window a -> LayoutConstraints b -> IO ()

-- | usage: (<tt>windowSetCursor obj cursor</tt>).
windowSetCursor :: Window a -> Cursor b -> IO Int

-- | usage: (<tt>windowSetDropTarget obj dropTarget</tt>).
windowSetDropTarget :: Window a -> DropTarget b -> IO ()

-- | usage: (<tt>windowSetExtraStyle obj exStyle</tt>).
windowSetExtraStyle :: Window a -> Int -> IO ()

-- | usage: (<tt>windowSetFocus obj</tt>).
windowSetFocus :: Window a -> IO ()

-- | usage: (<tt>windowSetFont obj font</tt>).
windowSetFont :: Window a -> Font b -> IO Int

-- | usage: (<tt>windowSetForegroundColour obj colour</tt>).
windowSetForegroundColour :: Window a -> Color -> IO Int

-- | usage: (<tt>windowSetId obj id</tt>).
windowSetId :: Window a -> Id -> IO ()

-- | usage: (<tt>windowSetLabel obj title</tt>).
windowSetLabel :: Window a -> String -> IO ()

-- | usage: (<tt>windowSetName obj name</tt>).
windowSetName :: Window a -> String -> IO ()

-- | usage: (<tt>windowSetScrollPos obj orient pos refresh</tt>).
windowSetScrollPos :: Window a -> Int -> Int -> Bool -> IO ()

-- | usage: (<tt>windowSetScrollbar obj orient pos thumbVisible range
--   refresh</tt>).
windowSetScrollbar :: Window a -> Int -> Int -> Int -> Int -> Bool -> IO ()

-- | usage: (<tt>windowSetSize obj xywidthheight sizeFlags</tt>).
windowSetSize :: Window a -> Rect -> Int -> IO ()

-- | usage: (<tt>windowSetSizeConstraint obj xywh</tt>).
windowSetSizeConstraint :: Window a -> Rect -> IO ()

-- | usage: (<tt>windowSetSizeHints obj minW minH maxW maxH incW
--   incH</tt>).
windowSetSizeHints :: Window a -> Int -> Int -> Int -> Int -> Int -> Int -> IO ()

-- | usage: (<tt>windowSetSizer obj sizer</tt>).
windowSetSizer :: Window a -> Sizer b -> IO ()

-- | usage: (<tt>windowSetToolTip obj tip</tt>).
windowSetToolTip :: Window a -> String -> IO ()

-- | usage: (<tt>windowSetValidator obj validator</tt>).
windowSetValidator :: Window a -> Validator b -> IO ()

-- | usage: (<tt>windowSetVirtualSize obj wh</tt>).
windowSetVirtualSize :: Window a -> Size -> IO ()

-- | usage: (<tt>windowSetWindowStyleFlag obj style</tt>).
windowSetWindowStyleFlag :: Window a -> Int -> IO ()

-- | usage: (<tt>windowShow obj</tt>).
windowShow :: Window a -> IO Bool

-- | usage: (<tt>windowThaw obj</tt>).
windowThaw :: Window a -> IO ()

-- | usage: (<tt>windowTransferDataFromWindow obj</tt>).
windowTransferDataFromWindow :: Window a -> IO Bool

-- | usage: (<tt>windowTransferDataToWindow obj</tt>).
windowTransferDataToWindow :: Window a -> IO Bool

-- | usage: (<tt>windowUnsetConstraints obj c</tt>).
windowUnsetConstraints :: Window a -> Ptr b -> IO ()

-- | usage: (<tt>windowUpdateWindowUI obj</tt>).
windowUpdateWindowUI :: Window a -> IO ()

-- | usage: (<tt>windowValidate obj</tt>).
windowValidate :: Window a -> IO Bool

-- | usage: (<tt>windowWarpPointer obj xy</tt>).
windowWarpPointer :: Window a -> Point -> IO ()

-- | usage: (<tt>windowCreateEventGetWindow obj</tt>).
windowCreateEventGetWindow :: WindowCreateEvent a -> IO (Window ())

-- | usage: (<tt>windowDCCreate win</tt>).
windowDCCreate :: Window a -> IO (WindowDC ())

-- | usage: (<tt>windowDCDelete obj</tt>).
windowDCDelete :: WindowDC a -> IO ()

-- | usage: (<tt>windowDestroyEventGetWindow obj</tt>).
windowDestroyEventGetWindow :: WindowDestroyEvent a -> IO (Window ())

-- | usage: (<tt>wizardChain f s</tt>).
wizardChain :: WizardPageSimple a -> WizardPageSimple b -> IO ()

-- | usage: (<tt>wizardCreate prt id txt bmp lfttopwdthgt</tt>).
wizardCreate :: Window a -> Id -> String -> Bitmap d -> Rect -> IO (Wizard ())

-- | usage: (<tt>wizardGetCurrentPage obj</tt>).
wizardGetCurrentPage :: Wizard a -> IO (WizardPage ())

-- | usage: (<tt>wizardGetPageSize obj</tt>).
wizardGetPageSize :: Wizard a -> IO (Size)

-- | usage: (<tt>wizardRunWizard obj firstPage</tt>).
wizardRunWizard :: Wizard a -> WizardPage b -> IO Int

-- | usage: (<tt>wizardSetPageSize obj wh</tt>).
wizardSetPageSize :: Wizard a -> Size -> IO ()

-- | usage: (<tt>wizardEventGetDirection obj</tt>).
wizardEventGetDirection :: WizardEvent a -> IO Int

-- | usage: (<tt>wizardPageSimpleCreate prt</tt>).
wizardPageSimpleCreate :: Wizard a -> IO (WizardPageSimple ())

-- | usage: (<tt>wizardPageSimpleGetBitmap obj</tt>).
wizardPageSimpleGetBitmap :: WizardPageSimple a -> IO (Bitmap ())

-- | usage: (<tt>wizardPageSimpleGetNext obj</tt>).
wizardPageSimpleGetNext :: WizardPageSimple a -> IO (WizardPageSimple ())

-- | usage: (<tt>wizardPageSimpleGetPrev obj</tt>).
wizardPageSimpleGetPrev :: WizardPageSimple a -> IO (WizardPageSimple ())

-- | usage: (<tt>wizardPageSimpleSetNext obj next</tt>).
wizardPageSimpleSetNext :: WizardPageSimple a -> WizardPageSimple b -> IO ()

-- | usage: (<tt>wizardPageSimpleSetPrev obj prev</tt>).
wizardPageSimpleSetPrev :: WizardPageSimple a -> WizardPageSimple b -> IO ()

-- | usage: (<tt>managedPtrCreateFromBitmap obj</tt>).
managedPtrCreateFromBitmap :: Bitmap a -> IO (WxManagedPtr ())

-- | usage: (<tt>managedPtrCreateFromBrush obj</tt>).
managedPtrCreateFromBrush :: Brush a -> IO (WxManagedPtr ())

-- | usage: (<tt>managedPtrCreateFromColour obj</tt>).
managedPtrCreateFromColour :: Color -> IO (WxManagedPtr ())

-- | usage: (<tt>managedPtrCreateFromCursor obj</tt>).
managedPtrCreateFromCursor :: Cursor a -> IO (WxManagedPtr ())

-- | usage: (<tt>managedPtrCreateFromDateTime obj</tt>).
managedPtrCreateFromDateTime :: DateTime a -> IO (WxManagedPtr ())

-- | usage: (<tt>managedPtrCreateFromFont obj</tt>).
managedPtrCreateFromFont :: Font a -> IO (WxManagedPtr ())

-- | usage: (<tt>managedPtrCreateFromGridCellCoordsArray obj</tt>).
managedPtrCreateFromGridCellCoordsArray :: GridCellCoordsArray a -> IO (WxManagedPtr ())

-- | usage: (<tt>managedPtrCreateFromIcon obj</tt>).
managedPtrCreateFromIcon :: Icon a -> IO (WxManagedPtr ())

-- | usage: (<tt>managedPtrCreateFromObject obj</tt>).
managedPtrCreateFromObject :: WxObject a -> IO (WxManagedPtr ())

-- | usage: (<tt>managedPtrCreateFromPen obj</tt>).
managedPtrCreateFromPen :: Pen a -> IO (WxManagedPtr ())

-- | usage: (<tt>managedPtrDelete self</tt>).
managedPtrDelete :: WxManagedPtr a -> IO ()

-- | usage: (<tt>managedPtrFinalize self</tt>).
managedPtrFinalize :: WxManagedPtr a -> IO ()

-- | usage: (<tt>managedPtrGetDeleteFunction</tt>).
managedPtrGetDeleteFunction :: IO (Ptr ())

-- | usage: (<tt>managedPtrGetPtr self</tt>).
managedPtrGetPtr :: WxManagedPtr a -> IO (Ptr ())

-- | usage: (<tt>managedPtrNoFinalize self</tt>).
managedPtrNoFinalize :: WxManagedPtr a -> IO ()

-- | usage: (<tt>objectGetClassInfo obj</tt>).
objectGetClassInfo :: WxObject a -> IO (ClassInfo ())

-- | Get the reference data of an object as a closure: only works if
--   properly initialized. Use <tt>closureGetData</tt> to get to the actual
--   data. *
objectGetClientClosure :: WxObject a -> IO (Closure ())

-- | usage: (<tt>objectIsKindOf obj classInfo</tt>).
objectIsKindOf :: WxObject a -> ClassInfo b -> IO Bool

-- | usage: (<tt>objectIsScrolledWindow obj</tt>).
objectIsScrolledWindow :: WxObject a -> IO Bool

-- | usage: (<tt>objectSafeDelete self</tt>).
objectSafeDelete :: WxObject a -> IO ()

-- | Set the reference data of an object as a closure. The closure data
--   contains the data while the function is called on deletion. Returns
--   <a>True</a> on success. Only works if the reference data is unused by
--   wxWidgets! *
objectSetClientClosure :: WxObject a -> Closure b -> IO ()

-- | usage: (<tt>wxobjectDelete obj</tt>).
wxobjectDelete :: WxObject a -> IO ()

-- | usage: (<tt>xmlResourceAddHandler obj handler</tt>).
xmlResourceAddHandler :: XmlResource a -> EvtHandler b -> IO ()

-- | usage: (<tt>xmlResourceAddSubclassFactory obj factory</tt>).
xmlResourceAddSubclassFactory :: XmlResource a -> Ptr b -> IO ()

-- | usage: (<tt>xmlResourceAttachUnknownControl obj control parent</tt>).
xmlResourceAttachUnknownControl :: XmlResource a -> Control b -> Window c -> IO Int

-- | usage: (<tt>xmlResourceClearHandlers obj</tt>).
xmlResourceClearHandlers :: XmlResource a -> IO ()

-- | usage: (<tt>xmlResourceCompareVersion obj major minor release
--   revision</tt>).
xmlResourceCompareVersion :: XmlResource a -> Int -> Int -> Int -> Int -> IO Int

-- | usage: (<tt>xmlResourceCreate flags</tt>).
xmlResourceCreate :: Int -> IO (XmlResource ())

-- | usage: (<tt>xmlResourceCreateFromFile filemask flags</tt>).
xmlResourceCreateFromFile :: String -> Int -> IO (XmlResource ())

-- | usage: (<tt>xmlResourceDelete obj</tt>).
xmlResourceDelete :: XmlResource a -> IO ()

-- | usage: (<tt>xmlResourceGet</tt>).
xmlResourceGet :: IO (XmlResource ())

-- | usage: (<tt>xmlResourceGetBitmapButton obj strid</tt>).
xmlResourceGetBitmapButton :: Window a -> String -> IO (BitmapButton ())

-- | usage: (<tt>xmlResourceGetBoxSizer obj strid</tt>).
xmlResourceGetBoxSizer :: Window a -> String -> IO (BoxSizer ())

-- | usage: (<tt>xmlResourceGetButton obj strid</tt>).
xmlResourceGetButton :: Window a -> String -> IO (Button ())

-- | usage: (<tt>xmlResourceGetCalendarCtrl obj strid</tt>).
xmlResourceGetCalendarCtrl :: Window a -> String -> IO (CalendarCtrl ())

-- | usage: (<tt>xmlResourceGetCheckBox obj strid</tt>).
xmlResourceGetCheckBox :: Window a -> String -> IO (CheckBox ())

-- | usage: (<tt>xmlResourceGetCheckListBox obj strid</tt>).
xmlResourceGetCheckListBox :: Window a -> String -> IO (CheckListBox ())

-- | usage: (<tt>xmlResourceGetChoice obj strid</tt>).
xmlResourceGetChoice :: Window a -> String -> IO (Choice ())

-- | usage: (<tt>xmlResourceGetComboBox obj strid</tt>).
xmlResourceGetComboBox :: Window a -> String -> IO (ComboBox ())

-- | usage: (<tt>xmlResourceGetDomain obj</tt>).
xmlResourceGetDomain :: XmlResource a -> IO (String)

-- | usage: (<tt>xmlResourceGetFlags obj</tt>).
xmlResourceGetFlags :: XmlResource a -> IO Int

-- | usage: (<tt>xmlResourceGetFlexGridSizer obj strid</tt>).
xmlResourceGetFlexGridSizer :: Window a -> String -> IO (FlexGridSizer ())

-- | usage: (<tt>xmlResourceGetGauge obj strid</tt>).
xmlResourceGetGauge :: Window a -> String -> IO (Gauge ())

-- | usage: (<tt>xmlResourceGetGrid obj strid</tt>).
xmlResourceGetGrid :: Window a -> String -> IO (Grid ())

-- | usage: (<tt>xmlResourceGetGridSizer obj strid</tt>).
xmlResourceGetGridSizer :: Window a -> String -> IO (GridSizer ())

-- | usage: (<tt>xmlResourceGetHtmlWindow obj strid</tt>).
xmlResourceGetHtmlWindow :: Window a -> String -> IO (HtmlWindow ())

-- | usage: (<tt>xmlResourceGetListBox obj strid</tt>).
xmlResourceGetListBox :: Window a -> String -> IO (ListBox ())

-- | usage: (<tt>xmlResourceGetListCtrl obj strid</tt>).
xmlResourceGetListCtrl :: Window a -> String -> IO (ListCtrl ())

-- | usage: (<tt>xmlResourceGetMDIChildFrame obj strid</tt>).
xmlResourceGetMDIChildFrame :: Window a -> String -> IO (MDIChildFrame ())

-- | usage: (<tt>xmlResourceGetMDIParentFrame obj strid</tt>).
xmlResourceGetMDIParentFrame :: Window a -> String -> IO (MDIParentFrame ())

-- | usage: (<tt>xmlResourceGetMenu obj strid</tt>).
xmlResourceGetMenu :: Window a -> String -> IO (Menu ())

-- | usage: (<tt>xmlResourceGetMenuBar obj strid</tt>).
xmlResourceGetMenuBar :: Window a -> String -> IO (MenuBar ())

-- | usage: (<tt>xmlResourceGetMenuItem obj strid</tt>).
xmlResourceGetMenuItem :: Window a -> String -> IO (MenuItem ())

-- | usage: (<tt>xmlResourceGetNotebook obj strid</tt>).
xmlResourceGetNotebook :: Window a -> String -> IO (Notebook ())

-- | usage: (<tt>xmlResourceGetPanel obj strid</tt>).
xmlResourceGetPanel :: Window a -> String -> IO (Panel ())

-- | usage: (<tt>xmlResourceGetRadioBox obj strid</tt>).
xmlResourceGetRadioBox :: Window a -> String -> IO (RadioBox ())

-- | usage: (<tt>xmlResourceGetRadioButton obj strid</tt>).
xmlResourceGetRadioButton :: Window a -> String -> IO (RadioButton ())

-- | usage: (<tt>xmlResourceGetScrollBar obj strid</tt>).
xmlResourceGetScrollBar :: Window a -> String -> IO (ScrollBar ())

-- | usage: (<tt>xmlResourceGetScrolledWindow obj strid</tt>).
xmlResourceGetScrolledWindow :: Window a -> String -> IO (ScrolledWindow ())

-- | usage: (<tt>xmlResourceGetSizer obj strid</tt>).
xmlResourceGetSizer :: Window a -> String -> IO (Sizer ())

-- | usage: (<tt>xmlResourceGetSlider obj strid</tt>).
xmlResourceGetSlider :: Window a -> String -> IO (Slider ())

-- | usage: (<tt>xmlResourceGetSpinButton obj strid</tt>).
xmlResourceGetSpinButton :: Window a -> String -> IO (SpinButton ())

-- | usage: (<tt>xmlResourceGetSpinCtrl obj strid</tt>).
xmlResourceGetSpinCtrl :: Window a -> String -> IO (SpinCtrl ())

-- | usage: (<tt>xmlResourceGetSplitterWindow obj strid</tt>).
xmlResourceGetSplitterWindow :: Window a -> String -> IO (SplitterWindow ())

-- | usage: (<tt>xmlResourceGetStaticBitmap obj strid</tt>).
xmlResourceGetStaticBitmap :: Window a -> String -> IO (StaticBitmap ())

-- | usage: (<tt>xmlResourceGetStaticBox obj strid</tt>).
xmlResourceGetStaticBox :: Window a -> String -> IO (StaticBox ())

-- | usage: (<tt>xmlResourceGetStaticBoxSizer obj strid</tt>).
xmlResourceGetStaticBoxSizer :: Window a -> String -> IO (StaticBoxSizer ())

-- | usage: (<tt>xmlResourceGetStaticLine obj strid</tt>).
xmlResourceGetStaticLine :: Window a -> String -> IO (StaticLine ())

-- | usage: (<tt>xmlResourceGetStaticText obj strid</tt>).
xmlResourceGetStaticText :: Window a -> String -> IO (StaticText ())

-- | usage: (<tt>xmlResourceGetStyledTextCtrl obj strid</tt>).
xmlResourceGetStyledTextCtrl :: Window a -> String -> IO (StyledTextCtrl ())

-- | usage: (<tt>xmlResourceGetTextCtrl obj strid</tt>).
xmlResourceGetTextCtrl :: Window a -> String -> IO (TextCtrl ())

-- | usage: (<tt>xmlResourceGetTreeCtrl obj strid</tt>).
xmlResourceGetTreeCtrl :: Window a -> String -> IO (TreeCtrl ())

-- | usage: (<tt>xmlResourceGetVersion obj</tt>).
xmlResourceGetVersion :: XmlResource a -> IO Int

-- | usage: (<tt>xmlResourceGetXRCID obj strid</tt>).
xmlResourceGetXRCID :: XmlResource a -> String -> IO Int

-- | usage: (<tt>xmlResourceInitAllHandlers obj</tt>).
xmlResourceInitAllHandlers :: XmlResource a -> IO ()

-- | usage: (<tt>xmlResourceInsertHandler obj handler</tt>).
xmlResourceInsertHandler :: XmlResource a -> EvtHandler b -> IO ()

-- | usage: (<tt>xmlResourceLoad obj filemask</tt>).
xmlResourceLoad :: XmlResource a -> String -> IO Bool

-- | usage: (<tt>xmlResourceLoadBitmap obj name</tt>).
xmlResourceLoadBitmap :: XmlResource a -> String -> IO (Bitmap ())

-- | usage: (<tt>xmlResourceLoadDialog obj parent name</tt>).
xmlResourceLoadDialog :: XmlResource a -> Window b -> String -> IO (Dialog ())

-- | usage: (<tt>xmlResourceLoadFrame obj parent name</tt>).
xmlResourceLoadFrame :: XmlResource a -> Window b -> String -> IO (Frame ())

-- | usage: (<tt>xmlResourceLoadIcon obj name</tt>).
xmlResourceLoadIcon :: XmlResource a -> String -> IO (Icon ())

-- | usage: (<tt>xmlResourceLoadMenu obj name</tt>).
xmlResourceLoadMenu :: XmlResource a -> String -> IO (Menu ())

-- | usage: (<tt>xmlResourceLoadMenuBar obj parent name</tt>).
xmlResourceLoadMenuBar :: XmlResource a -> Window b -> String -> IO (MenuBar ())

-- | usage: (<tt>xmlResourceLoadPanel obj parent name</tt>).
xmlResourceLoadPanel :: XmlResource a -> Window b -> String -> IO (Panel ())

-- | usage: (<tt>xmlResourceLoadToolBar obj parent name</tt>).
xmlResourceLoadToolBar :: XmlResource a -> Window b -> String -> IO (ToolBar ())

-- | usage: (<tt>xmlResourceSet obj res</tt>).
xmlResourceSet :: XmlResource a -> XmlResource b -> IO (XmlResource ())

-- | usage: (<tt>xmlResourceSetDomain obj domain</tt>).
xmlResourceSetDomain :: XmlResource a -> String -> IO ()

-- | usage: (<tt>xmlResourceSetFlags obj flags</tt>).
xmlResourceSetFlags :: XmlResource a -> Int -> IO ()

-- | usage: (<tt>xmlResourceUnload obj filemask</tt>).
xmlResourceUnload :: XmlResource a -> String -> IO Bool


-- | Haskell class definitions for the wxWidgets C library
--   (<tt>wxc.dll</tt>).
--   
--   Do not edit this file manually! This file was automatically generated
--   by wxDirect.
--   
--   From the files:
--   
--   <ul>
--   <li><pre>wxc.h</pre></li>
--   </ul>
--   
--   And contains 4354 methods for 281 classes.
module Graphics.UI.WXCore.WxcClasses


-- | Haskell class info definitions for the wxWidgets C library
--   (<tt>wxc.dll</tt>).
--   
--   Do not edit this file manually! This file was automatically generated
--   by wxDirect.
--   
--   And contains 406 class info definitions.
module Graphics.UI.WXCore.WxcClassInfo

-- | The type of a class.
data ClassType a

-- | Return the <a>ClassInfo</a> belonging to a class type. (Do not delete
--   this object, it is statically allocated)
classInfo :: ClassType a -> ClassInfo ()

-- | Test if an object is of a certain kind. (Returns also <a>True</a> when
--   the object is null.)
instanceOf :: WxObject b -> ClassType a -> Bool

-- | Test if an object is of a certain kind, based on a full wxWidgets
--   class name. (Use with care).
instanceOfName :: WxObject a -> String -> Bool

-- | A safe object cast. Returns <a>Nothing</a> if the object is of the
--   wrong type. Note that a null object can always be cast.
safeCast :: WxObject b -> ClassType (WxObject a) -> Maybe (WxObject a)

-- | Perform an action when the object has the right kind. Perform the
--   default action if the kind is not correct. Note that a null object has
--   always the right kind.
ifInstanceOf :: WxObject a -> ClassType (WxObject b) -> (WxObject b -> c) -> c -> c

-- | Perform an action when the object has the right kind. Note that a null
--   object has always the right kind.
whenInstanceOf :: WxObject a -> ClassType (WxObject b) -> (WxObject b -> IO ()) -> IO ()

-- | Perform an action when the object has the right type <i>and</i> is not
--   null.
whenValidInstanceOf :: WxObject a -> ClassType (WxObject b) -> (WxObject b -> IO ()) -> IO ()


-- | Basic types and operations.
module Graphics.UI.WXCore.Types

-- | Reverse application, i.e. <tt>x # f</tt> = <tt>f x</tt>. Useful for an
--   object oriented style of programming.
--   
--   <pre>
--   (frame # frameSetTitle) "hi"
--   </pre>
(#) :: obj -> (obj -> a) -> a
infix 5 #

-- | An <tt>Object a</tt> is a pointer to an object of type <tt>a</tt>. The
--   <tt>a</tt> parameter is used to encode the inheritance relation. When
--   the type parameter is unit <tt>()</tt>, it denotes an object of
--   exactly that class, when the parameter is a type variable <tt>a</tt>,
--   it specifies an object that is at least an instance of that class. For
--   example in wxWidgets, we have the following class hierarchy:
--   
--   <pre>
--   EvtHandler
--     |- Window
--          |- Frame
--          |- Control
--              |- Button
--              |- Radiobox
--   </pre>
--   
--   In wxHaskell, all the creation functions will return objects of
--   exactly that class and use the <tt>()</tt> type:
--   
--   <pre>
--   frameCreate :: Window a -&gt; ... -&gt; IO (Frame ())
--   buttonCreate :: Window a -&gt; ... -&gt; IO (Button ())
--   ...
--   </pre>
--   
--   In contrast, all the <i>this</i> (or <i>self</i>) pointers of methods
--   can take objects of any instance of that class and have a type
--   variable, for example:
--   
--   <pre>
--   windowSetClientSize :: Window a -&gt; Size -&gt; IO ()
--   controlSetLabel     :: Control a -&gt; String -&gt; IO ()
--   buttonSetDefault    :: Button a -&gt; IO ()
--   </pre>
--   
--   This means that we can use <tt>windowSetClientSize</tt> on any window,
--   including buttons and frames, but we can only use
--   <tt>controlSetLabel</tt> on controls, not including frames.
--   
--   In wxHaskell, this works since a <tt>Frame ()</tt> is actually a type
--   synonym for <tt>Window (CFrame ())</tt> (where <tt>CFrame</tt> is an
--   abstract data type). We can thus pass a value of type <tt>Frame
--   ()</tt> to anything that expects some <tt>Window a</tt>. For a button
--   this works too, as it is a synonym for <tt>Control (CButton ())</tt>
--   which is in turn a synonym for <tt>Window (CControl (CButton
--   ()))</tt>. Note that we can't pass a frame to something that expects a
--   value of type <tt>Control a</tt>. Of course, a <tt>Window a</tt> is
--   actually a type synonym for <tt>EvtHandler (CWindow a)</tt>. If you
--   study the documentation in <a>Graphics.UI.WX.Classes</a> closely, you
--   can discover where this chain ends :-).
--   
--   Objects are not automatically deleted. Normally you can use a delete
--   function like <tt>windowDelete</tt> to delete an object. However,
--   almost all objects in the wxWidgets library are automatically deleted
--   by the library. The only objects that should be used with care are
--   resources as bitmaps, fonts and brushes.
data Object a

-- | A null object. Use with care.
objectNull :: Object a

-- | Test for null object.
objectIsNull :: Object a -> Bool

-- | Cast an object to another type. Use with care.
objectCast :: Object a -> Object b

-- | Is this a managed object?
objectIsManaged :: Object a -> Bool

-- | Delete a wxObject, works for managed and unmanaged objects.
objectDelete :: WxObject a -> IO ()

-- | Do something with the object pointer.
withObjectPtr :: Object a -> (Ptr a -> IO b) -> IO b

-- | Extract the object pointer and raise an exception if <tt>NULL</tt>.
--   Otherwise continue with the valid pointer.
withObjectRef :: String -> Object a -> (Ptr a -> IO b) -> IO b

-- | Return an unmanaged object.
withObjectResult :: IO (Ptr a) -> IO (Object a)

-- | Create a managed object that will be deleted using
--   |wxObject_SafeDelete|.
withManagedObjectResult :: IO (Ptr (TWxObject a)) -> IO (WxObject a)

-- | Finalize a managed object manually. (No effect on unmanaged objects.)
objectFinalize :: Object a -> IO ()

-- | Remove the finalizer on a managed object. (No effect on unmanaged
--   objects.)
objectNoFinalize :: Object a -> IO ()

-- | Create an unmanaged object.
objectFromPtr :: Ptr a -> Object a

-- | Create a managed object that will be deleted using
--   |wxObject_SafeDelete|.
managedObjectFromPtr :: Ptr (TWxObject a) -> IO (WxObject a)

-- | An <tt>Id</tt> is used to identify objects during event handling.
type Id = Int

-- | When creating a new window you may specify <a>idAny</a> to let
--   wxWidgets assign an unused identifier to it automatically.
--   Furthermore, it can be used in an event connection to handle events
--   for any identifier.
idAny :: Id

-- | Create a new unique identifier.
idCreate :: IO Id

-- | Bitwise <i>or</i> of two bit masks.
(.+.) :: Bits a => a -> a -> a
infixl 5 .+.

-- | Unset certain bits in a bitmask.
(.-.) :: Bits a => a -> a -> a
infixl 5 .-.

-- | Bitwise <i>or</i> of a list of bit masks.
bits :: (Num a, Bits a) => [a] -> a

-- | (<tt>bitsSet mask i</tt>) tests if all bits in <tt>mask</tt> are also
--   set in <tt>i</tt>.
bitsSet :: Bits a => a -> a -> Bool

-- | Ignore the result of an <a>IO</a> action.
unitIO :: IO a -> IO ()

-- | Properly release resources, even in the event of an exception.
bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c

-- | Specialized variant of <a>bracket</a> where the return value is not
--   required.
bracket_ :: IO a -> IO b -> IO c -> IO c

-- | Run some computation afterwards, even if an exception occurs.
finally :: IO a -> IO b -> IO a

-- | Run some computation afterwards, even if an exception occurs. Equals
--   <a>finally</a> but with the arguments swapped.
finalize :: IO b -> IO a -> IO a

-- | Perform an action when a test succeeds.
when :: Bool -> IO () -> IO ()

-- | A mutable variable. Use this instead of <tt>MVar</tt>s or
--   <tt>IORef</tt>s to accommodate for future expansions with possible
--   concurrency.
type Var a = TVar a

-- | Create a fresh mutable variable.
varCreate :: a -> IO (Var a)

-- | Get the value of a mutable variable.
varGet :: Var a -> IO a

-- | Set the value of a mutable variable.
varSet :: Var a -> a -> IO ()

-- | Update the value of a mutable variable and return the old value.
varUpdate :: Var a -> (a -> a) -> IO a

-- | Swap the value of a mutable variable.
varSwap :: Var a -> a -> IO a

-- | A <tt>Style</tt> is normally used as a flag mask to specify some
--   window style
type Style = Int

-- | An <tt>EventId</tt> is identifies specific events.
type EventId = Int

-- | Identifies tree items. Note: Replaces the <tt>TreeItemId</tt> object
--   and takes automatically care of allocation issues.
data TreeItem

-- | Invalid tree item.
treeItemInvalid :: TreeItem

-- | Is a tree item ok? (i.e. not invalid).
treeItemIsOk :: TreeItem -> Bool

-- | An abstract data type to define colors.
data Color

-- | Create a color from a red/green/blue triple.
rgb :: (Integral a) => a -> a -> a -> Color

-- | Create a color from a red/green/blue triple.
colorRGB :: (Integral a) => a -> a -> a -> Color

-- | Returns a red color component
colorRed :: (Num a) => Color -> a

-- | Returns a green color component
colorGreen :: (Num a) => Color -> a

-- | Returns a blue color component
colorBlue :: (Num a) => Color -> a

-- | Return an <a>Int</a> where the three least significant bytes contain
--   the red, green, and blue component of a color.
intFromColor :: Color -> Int

-- | Set the color according to an rgb integer. (see
--   <tt>rgbIntFromColor</tt>).
colorFromInt :: Int -> Color

-- | Check of a color is valid (<tt>Colour::IsOk</tt>)
colorIsOk :: Color -> Bool

-- | deprecated: use <a>colorIsOk</a> instead.

-- | <i>Deprecated: Use colorIsOk instead</i>
colorOk :: Color -> Bool

-- | System Colors.
data SystemColor

-- | The scrollbar grey area.
ColorScrollBar :: SystemColor

-- | The desktop colour.
ColorBackground :: SystemColor

-- | Active window caption.
ColorActiveCaption :: SystemColor

-- | Inactive window caption.
ColorInactiveCaption :: SystemColor

-- | Menu background.
ColorMenu :: SystemColor

-- | Window background.
ColorWindow :: SystemColor

-- | Window frame.
ColorWindowFrame :: SystemColor

-- | Menu text.
ColorMenuText :: SystemColor

-- | Text in windows.
ColorWindowText :: SystemColor

-- | Text in caption, size box and scrollbar arrow box.
ColorCaptionText :: SystemColor

-- | Active window border.
ColorActiveBorder :: SystemColor

-- | Inactive window border.
ColorInactiveBorder :: SystemColor

-- | Background colour MDI -- ^applications.
ColorAppWorkspace :: SystemColor

-- | Item(s) selected in a control.
ColorHighlight :: SystemColor

-- | Text of item(s) selected in a control.
ColorHighlightText :: SystemColor

-- | Face shading on push buttons.
ColorBtnFace :: SystemColor

-- | Edge shading on push buttons.
ColorBtnShadow :: SystemColor

-- | Greyed (disabled) text.
ColorGrayText :: SystemColor

-- | Text on push buttons.
ColorBtnText :: SystemColor

-- | Colour of text in active captions.
ColorInactiveCaptionText :: SystemColor

-- | Highlight colour for buttons (same as 3DHILIGHT).
ColorBtnHighlight :: SystemColor

-- | Dark shadow for three-dimensional display elements.
Color3DDkShadow :: SystemColor

-- | Light colour for three-dimensional display elements.
Color3DLight :: SystemColor

-- | Text colour for tooltip controls.
ColorInfoText :: SystemColor

-- | Background colour for tooltip controls.
ColorInfoBk :: SystemColor

-- | Same as BACKGROUND.
ColorDesktop :: SystemColor

-- | Same as BTNFACE.
Color3DFace :: SystemColor

-- | Same as BTNSHADOW.
Color3DShadow :: SystemColor

-- | Same as BTNHIGHLIGHT.
Color3DHighlight :: SystemColor

-- | Same as BTNHIGHLIGHT.
Color3DHilight :: SystemColor

-- | Same as BTNHIGHLIGHT.
ColorBtnHilight :: SystemColor

-- | Convert a system color to a color.
colorSystem :: SystemColor -> Color

-- | A point has an x and y coordinate. Coordinates are normally relative
--   to the upper-left corner of their view frame, where a positive x goes
--   to the right and a positive y to the bottom of the view.
data (Num a) => Point2 a
Point :: !a -> !a -> Point2 a

-- | x component of a point.
[pointX] :: Point2 a -> !a

-- | y component of a point.
[pointY] :: Point2 a -> !a

-- | Construct a point.
point :: (Num a) => a -> a -> Point2 a

-- | Shorter function to construct a point.
pt :: (Num a) => a -> a -> Point2 a

-- | Point at the origin.
pointZero :: (Num a) => Point2 a

-- | A <a>null</a> point is not a legal point (x and y are -1) and can be
--   used for some wxWidgets functions to select a default point.
pointNull :: (Num a) => Point2 a

-- | A <tt>Size</tt> has a width and height.
data (Num a) => Size2D a
Size :: !a -> !a -> Size2D a

-- | the width of a size
[sizeW] :: Size2D a -> !a

-- | the height of a size
[sizeH] :: Size2D a -> !a

-- | Short function to construct a size
sz :: (Num a) => a -> a -> Size2D a

-- | A <a>null</a> size is not a legal size (width and height are -1) and
--   can be used for some wxWidgets functions to select a default size.
sizeNull :: (Num a) => Size2D a

-- | Returns <a>True</a> if the first size totally encloses the second
--   argument.
sizeEncloses :: (Num a, Ord a) => Size2D a -> Size2D a -> Bool

-- | The minimum of two sizes.
sizeMin :: (Num a, Ord a) => Size2D a -> Size2D a -> Size2D a

-- | The maximum of two sizes.
sizeMax :: (Num a, Ord a) => Size2D a -> Size2D a -> Size2D a

-- | A vector with an x and y delta.
data (Num a) => Vector2 a
Vector :: !a -> !a -> Vector2 a

-- | delta-x component of a vector
[vecX] :: Vector2 a -> !a

-- | delta-y component of a vector
[vecY] :: Vector2 a -> !a

-- | Construct a vector.
vector :: (Num a) => a -> a -> Vector2 a

-- | Short function to construct a vector.
vec :: (Num a) => a -> a -> Vector2 a

-- | A zero vector
vecZero :: (Num a) => Vector2 a

-- | A <a>null</a> vector has a delta x and y of -1 and can be used for
--   some wxWidgets functions to select a default vector.
vecNull :: (Num a) => Vector2 a

-- | A rectangle is defined by the left x coordinate, the top y coordinate,
--   the width and the height.
data (Num a) => Rect2D a
Rect :: !a -> !a -> !a -> !a -> Rect2D a
[rectLeft] :: Rect2D a -> !a
[rectTop] :: Rect2D a -> !a
[rectWidth] :: Rect2D a -> !a
[rectHeight] :: Rect2D a -> !a

-- | Create a rectangle at a certain (upper-left) point with a certain
--   size.
rect :: (Num a) => Point2 a -> Size2D a -> Rect2D a

-- | Construct a (positive) rectangle between two (arbitrary) points.
rectBetween :: (Num a, Ord a) => Point2 a -> Point2 a -> Rect2D a

-- | Create a rectangle of a certain size with the upper-left corner at
--   (<a>pt</a> 0 0).
rectFromSize :: (Num a) => Size2D a -> Rect2D a

-- | An empty rectangle at (0,0).
rectZero :: (Num a) => Rect2D a

-- | An <a>null</a> rectangle is not a valid rectangle (<tt>Rect -1 -1 -1
--   -1</tt>) but can used for some wxWidgets functions to select a default
--   rectangle. (i.e. <tt>frameCreate</tt>).
rectNull :: (Num a) => Rect2D a

-- | Get the size of a rectangle.
rectSize :: (Num a) => Rect2D a -> Size2D a

-- | A list with rectangles that constitute the difference between two
--   rectangles.
rectsDiff :: (Num a, Ord a) => Rect2D a -> Rect2D a -> [Rect2D a]

-- | The intersection between two rectangles.
rectOverlap :: (Num a, Ord a) => Rect2D a -> Rect2D a -> Rect2D a
instance GHC.Enum.Enum Graphics.UI.WXCore.Types.SystemColor


-- | Convenience wrappers for the openGL canvas window (<a>GLCanvas</a>).
module Graphics.UI.WXCore.OpenGL

-- | OpenGL window (<a>GLCanvas</a>) attributes.
data GLAttribute

-- | Use true colour
GL_RGBA :: GLAttribute

-- | Bits for buffer if not <a>GL_RGBA</a> defined also
GL_BUFFER_SIZE :: Int -> GLAttribute

-- | <a>EQ</a> for main buffer, <a>GT</a> for overlay, <a>LT</a> for
--   underlay
GL_LEVEL :: Ordering -> GLAttribute

-- | Use doublebuffer
GL_DOUBLEBUFFER :: GLAttribute

-- | Use stereoscopic display
GL_STEREO :: GLAttribute

-- | Number of auxiliary buffers (not all implementation support this
--   option)
GL_AUX_BUFFERS :: Int -> GLAttribute

-- | Use red buffer with at least <i>argument</i> bits
GL_MIN_RED :: Int -> GLAttribute

-- | Use green buffer with at least <i>argument</i> bits
GL_MIN_GREEN :: Int -> GLAttribute

-- | Use blue buffer with at least <i>argument</i> bits
GL_MIN_BLUE :: Int -> GLAttribute

-- | Use alpha buffer with at least <i>argument</i> bits
GL_MIN_ALPHA :: Int -> GLAttribute

-- | Bits for Z-buffer (0,16,32)
GL_DEPTH_SIZE :: Int -> GLAttribute

-- | Bits for stencil buffer
GL_STENCIL_SIZE :: Int -> GLAttribute

-- | Use red accumulation buffer with at least <i>argument</i> bits
GL_MIN_ACCUM_RED :: Int -> GLAttribute

-- | Use green accumulation buffer with at least <i>argument</i> bits
GL_MIN_ACCUM_GREEN :: Int -> GLAttribute

-- | Use blue accumulation buffer with at least <i>argument</i> bits
GL_MIN_ACCUM_BLUE :: Int -> GLAttribute

-- | Use alpha accumulation buffer with at least <i>argument</i> bits
GL_MIN_ACCUM_ALPHA :: Int -> GLAttribute

-- | 1 for multisampling support (antialiasing)
GL_SAMPLE_BUFFERS :: Int -> GLAttribute

-- | 4 for 2x2 antialiasing supersampling on most graphics cards
GL_SAMPLES :: Int -> GLAttribute

-- | request an OpenGL core profile. This will result in also requesting
--   OpenGL at least version 3.0, since wx 3.1
GL_CORE_PROFILE :: GLAttribute

-- | request a specific OpenGL major version number (&gt;= 3), since wx 3.1
GL_MAJOR_VERSION :: Int -> GLAttribute

-- | request a specific OpenGL minor version number (e.g. 2 for 3.2), since
--   wx 3.1
GL_MINOR_VERSION :: Int -> GLAttribute

-- | Create a standard openGL canvas window with a certain title and
--   attributes.
glCanvasCreateDefault :: Window a -> Style -> String -> [GLAttribute] -> IO (GLCanvas ())

-- | Create an openGL window. Use <a>nullPalette</a> to use the default
--   palette.
glCanvasCreateEx :: Window a -> Id -> Rect -> Style -> String -> [GLAttribute] -> Palette b -> IO (GLCanvas ())


module Graphics.UI.WXCore.Image

-- | Set the icon of a frame.
topLevelWindowSetIconFromFile :: TopLevelWindow a -> FilePath -> IO ()

-- | Initialize an image list with icons from files. Use a <a>sizeNull</a>
--   to use the native size of the loaded icons.
imageListAddIconsFromFiles :: ImageList a -> Size -> [FilePath] -> IO ()

-- | Add an icon from a file to an imagelist.
imageListAddIconFromFile :: ImageList a -> Size -> FilePath -> IO ()

-- | Load an icon (see <a>iconCreateFromFile</a>) and automatically delete
--   it after use.
withIconFromFile :: FilePath -> Size -> (Icon () -> IO a) -> IO a

-- | Load an icon from an icon file (ico,xbm,xpm,gif). The <a>Size</a>
--   argument gives the desired size but can be <a>sizeNull</a> to retrieve
--   the image in its natural size.
iconCreateFromFile :: FilePath -> Size -> IO (Icon ())

-- | Get the size of an icon.
iconGetSize :: Icon a -> IO Size

-- | Load a cursor (see <a>cursorCreateFromFile</a>) and automatically
--   delete it after use.
withCursorFromFile :: FilePath -> (Cursor () -> IO a) -> IO a

-- | Load a cursor from an icon file (ico,xbm,xpm,gif). For a reason, this
--   function is incompatible with <a>iconCreateFromFile</a>.
cursorCreateFromFile :: String -> IO (Cursor ())

-- | Load a bitmap (see <a>bitmapCreateFromFile</a>) and automatically
--   delete it after use.
withBitmapFromFile :: FilePath -> (Bitmap () -> IO a) -> IO a

-- | Load a bitmap from an image file (gif, jpg, png, etc.)
bitmapCreateFromFile :: FilePath -> IO (Bitmap ())

-- | The size of a bitmap.
bitmapGetSize :: Bitmap a -> IO Size

-- | Set the size of a bitmap.
bitmapSetSize :: Bitmap a -> Size -> IO ()

-- | Get an image type from a file extension.
imageTypeFromExtension :: String -> BitFlag

-- | Get an image type from a file name.
imageTypeFromFileName :: String -> BitFlag

-- | Get the pixels of an image.
imageGetPixels :: Image a -> IO [Color]

-- | Create an image from a list of pixels.
imageCreateFromPixels :: Size -> [Color] -> IO (Image ())

-- | Get the pixels of an image as an array
imageGetPixelArray :: (IArray a Color) => Image b -> IO (a Point Color)

-- | Create an image from a pixel array
imageCreateFromPixelArray :: (IArray a Color) => a Point Color -> IO (Image ())

-- | Get the size of an image
imageGetSize :: Image a -> IO Size

-- | Do something with the pixels of an image
withImageData :: Image a -> (Ptr () -> IO b) -> IO b

-- | Create an image from a pixel buffer. Note: the image will delete the
--   pixelbuffer.
imageCreateFromPixelBuffer :: PixelBuffer -> IO (Image ())

-- | Get the pixel buffer of an image. Note: use <a>withPixelBuffer</a>
--   instead

-- | <i>Deprecated: Use withPixelBuffer instead</i>
imageGetPixelBuffer :: Image a -> IO PixelBuffer
withPixelBuffer :: Image a -> (PixelBuffer -> IO b) -> IO b

-- | An abstract pixel buffer (= array of RGB values)
data PixelBuffer

-- | Create a pixel buffer. (To be deleted with <a>pixelBufferDelete</a>).
pixelBufferCreate :: Size -> IO PixelBuffer

-- | Delete a pixel buffer.
pixelBufferDelete :: PixelBuffer -> IO ()

-- | Initialize the pixel buffer with a grey color. The second argument
--   specifies the <i>greyness</i> as a number between 0.0 (black) and 1.0
--   (white).
pixelBufferInit :: PixelBuffer -> Color -> IO ()

-- | Set the color of a pixel.
pixelBufferSetPixel :: PixelBuffer -> Point -> Color -> IO ()

-- | Get the color of a pixel
pixelBufferGetPixel :: PixelBuffer -> Point -> IO Color

-- | Set all the pixels of a pixel buffer.
pixelBufferSetPixels :: PixelBuffer -> [Color] -> IO ()

-- | Get all the pixels of a pixel buffer as a single list.
pixelBufferGetPixels :: PixelBuffer -> IO [Color]

-- | The size of a pixel buffer
pixelBufferGetSize :: PixelBuffer -> Size


-- | Frame utility functions.
module Graphics.UI.WXCore.Frame

-- | Create a default frame and make it the top-level window.
frameCreateTopFrame :: String -> IO (Frame ())

-- | Create a frame with default settings.
frameCreateDefault :: String -> IO (Frame ())

-- | Set the top-level frame (calls <tt>cAppSetTopWindow</tt>).
frameSetTopFrame :: Frame a -> IO ()

-- | The default frame style for a normal top-level <a>Frame</a>.
frameDefaultStyle :: Style

-- | Center the frame on the screen.
frameCenter :: Frame a -> IO ()

-- | Center the frame horizontally on the screen.
frameCenterHorizontal :: Frame a -> IO ()

-- | Center the frame vertically on the screen.
frameCenterVertical :: Frame a -> IO ()

-- | The ultimate root parent of the widget.
windowGetRootParent :: Window a -> IO (Window ())

-- | The parent frame or dialog of a widget.
windowGetFrameParent :: Window a -> IO (Window ())

-- | Retrieve the current mouse position relative to the window position.
windowGetMousePosition :: Window a -> IO Point

-- | Get the window position relative to the origin of the display.
windowGetScreenPosition :: Window a -> IO Point

-- | Get the children of a window
windowChildren :: Window a -> IO [Window ()]

-- | The default frame style for a normal <a>Dialog</a>.
dialogDefaultStyle :: Style
statusBarCreateFields :: Frame a -> [Int] -> IO (StatusBar ())


-- | Combinators to specify layout. (These combinators use wxWidgets
--   <a>Sizer</a> objects).
--   
--   Layout can be specified using <a>windowSetLayout</a>. For example:
--   
--   <pre>
--   do f  &lt;- frameCreateTopFrame "Test"
--      ok &lt;- buttonCreate f idAny "Bye" rectNull 0
--      windowSetLayout f (widget ok)
--      ...
--   </pre>
--   
--   The <a>windowSetLayout</a> function takes <a>Layout</a> as its
--   argument. The <a>widget</a> combinator creates a layout from a window.
--   The <a>space</a> combinator creates an empty layout with a specific
--   width and height. Furthermore, we have the <a>label</a> combinator to
--   create a static label label and <a>boxed</a> to create a labeled
--   border around a layout. The <a>grid</a> combinator lays out elements
--   in a table with a given space between the elements. Here is for
--   example a layout for retrieving an <i>x</i> and <i>y</i> coordinate
--   from the user, with 5 pixels space between the controls:
--   
--   <pre>
--   boxed "coordinates" (grid 5 5 [[label "x", widget xinput]
--                                 ,[label "y", widget yinput]])
--   </pre>
--   
--   Combinators like <a>row</a> and <a>column</a> are specific instances
--   of grids. We can use these combinator to good effect to add an
--   <i>ok</i> and <i>cancel</i> button at the bottom of our dialog:
--   
--   <pre>
--   column 5 [ boxed "coordinates" (grid 5 5 [[label "x", widget xinput]
--                                            ,[label "y", widget yinput]])
--            , row 5 [widget ok, widget cancel]]
--   </pre>
--   
--   Layout <i>tranformers</i> influence attributes of a layout. The
--   <a>margin</a> combinator adds a margin around a layout. The
--   <i>align</i> combinators specify how a combinator is aligned when the
--   assigned area is larger than the layout itself. We can use these
--   transformers to add a margin around our dialog and to align the
--   buttons to the bottom right (instead of the default top-left):
--   
--   <pre>
--   margin 10 $ column 5 [ boxed "coordinates" (grid 5 5 [[label "x", widget xinput]
--                                                        ,[label "y", widget yinput]])
--                        , alignBottomRight $ row 5 [widget ok, widget cancel]]
--   </pre>
--   
--   Besides aligning a layout in its assigned area, we can also specify
--   that a layout should expand to fill the assigned area. The
--   <a>shaped</a> combinator fills an area while maintaining the original
--   proportions (or aspect ratio) of a layout. The <a>expand</a>
--   combinator always tries to fill the entire area (and alignment is
--   ignored).
--   
--   The final attribute is the <i>stretch</i> of a layout. A stretchable
--   layout may get a larger area assigned than the minimally required
--   area. This can be used to fill out the entire parent area -- this
--   happens for example when a user enlarges a dialog.
--   
--   The default stretch and expansion mode of layout containers, like
--   <a>grid</a> and <a>boxed</a>, depends on the stretch of the child
--   layouts. A column of a <i>grid</i> is only stretchable when all
--   elements of that column have horizontal stretch. The same holds for
--   rows with vertical stretch. When any column or row is stretchable, the
--   grid itself will also be stretchable in that direction and the grid
--   will <a>expand</a> to fill the assigned area by default (instead of
--   being <a>static</a>). Just like a grid, other containers, like
--   <a>container</a>, <a>boxed</a>, <a>tabs</a>, <a>row</a>, and
--   <a>column</a>, will also propagate the stretch and expansion mode of
--   their child layouts.
--   
--   Armed with the <a>stretch</a> combinators we can make our dialog
--   resizeable. We let the input widgets resize horizontally. Furthermore,
--   the button row will resize vertically and horizontally with the
--   buttons aligned to the bottom right. Due to the stretch propagation
--   rules, the <a>grid</a> and <a>boxed</a> stretch horizontally and
--   <a>expand</a> to fill the assigned area. The horizontal <a>row</a>
--   does <i>not</i> stretch by default (and we need to use an explicit
--   <a>stretch</a>) and it does <i>not</i> expand into the assigned area
--   by default (and therefore alignment works properly).
--   
--   <pre>
--   margin 10 $ column 5 [ boxed "coordinates" (grid 5 5 [[label "x", hstretch $ expand $ widget xinput]
--                                                        ,[label "y", hstretch $ expand $ widget yinput]])
--                        , stretch $ alignBottomRight $ row 5 [widget ok, widget cancel]]
--   </pre>
--   
--   There are some common uses of stretchable combinators. The <a>fill</a>
--   combinators combine stretch and expansion. For example, <a>hfill</a>
--   is defined as (<tt>hstretch . expand</tt>). The <i>float</i>
--   combinators combine alignment and <a>stretch</a>. For example,
--   <a>floatBottomRight</a> is defined as (<tt>stretch .
--   alignBottomRight</tt>). There are also horizontal and vertical float
--   combinators, like <a>hfloatCentre</a> and <a>vfloatBottom</a>. Here is
--   the above example using <a>fill</a> and float:
--   
--   <pre>
--   margin 10 $ column 5 [ boxed "coordinates" (grid 5 5 [[label "x", hfill $ widget xinput]
--                                                        ,[label "y", hfill $ widget yinput]])
--                        , floatBottomRight $ row 5 [widget ok, widget cancel]]
--   </pre>
--   
--   The <a>glue</a> combinators are stretchable empty space. For example,
--   <a>hglue</a> is defined as (<tt>hstretch (space 0 0)</tt>). We can use
--   glue to mimic alignment. Here is the above layout specified with glue.
--   Note that we use <a>hspace</a> to manually insert space between the
--   elements or otherwise there would be space between the glue and the
--   <i>ok</i> button.
--   
--   <pre>
--   margin 10 $ column 5 [ boxed "coordinates" (grid 5 5 [[label "x", hfill $ widget xinput]
--                                                        ,[label "y", hfill $ widget yinput]])
--                        , glue
--                        , row 0 [hglue, widget ok, hspace 5, widget cancel]]
--   </pre>
--   
--   Splitter windows can also be specified with layout; you get somewhat
--   less functionality but it is quite convenient for most applications. A
--   horizontal split is done using <a>hsplit</a> while a vertical split is
--   specified with a <a>vsplit</a>.
--   
--   The layout for notebooks is specified with the <a>tabs</a> combinator.
--   The following example shows this (and note also how we use
--   <a>container</a> to set the layout of panels):
--   
--   <pre>
--   nbook  &lt;- notebookCreate ...
--   panel1 &lt;- panelCreate nbook ...
--   ...
--   panel2 &lt;- panelCreate nbook ...
--   ...
--   windowSetLayout frame
--      (tabs nbook [tab "page one" $ container panel1 $ margin 10 $ floatCentre $ widget ok
--                  ,tab "page two" $ container panel2 $ margin 10 $ hfill $ widget quit])
--   </pre>
--   
--   The pages <i>always</i> need to be embedded inside a <a>container</a>
--   (normally a <a>Panel</a>). The title of the pages is determined from
--   the label of the container widget.
--   
--   Note: /At the moment, extra space is divided evenly among stretchable
--   layouts. We plan to add a (<i><tt>proportion :: Int -&gt; Layout -&gt;
--   Layout</tt></i>) combinator in the future to stretch layouts according
--   to a relative weight, but unfortunately, that entails implementing a
--   better <i><tt>FlexGrid</tt></i> sizer for wxWidgets./
module Graphics.UI.WXCore.Layout

-- | Abstract data type that represents the layout of controls in a window.
data Layout

-- | Create a <a>Sizer</a> from a <a>Layout</a> and a parent window.
sizerFromLayout :: Window a -> Layout -> IO (Sizer ())

-- | A tab page in a notebook: a title, a possible bitmap and a layout.
type TabPage = (String, Bitmap (), Layout)

-- | Set the layout of a window (automatically calls
--   <a>sizerFromLayout</a>).
windowSetLayout :: Window a -> Layout -> IO ()

-- | (primitive) Lift a basic control to a <a>Layout</a>.
layoutFromWindow :: Window a -> Layout

-- | Fits a widget properly by calling <a>windowReLayout</a> on the parent
--   frame or dialog (<a>windowGetFrameParent</a>).
windowReFit :: Window a -> IO ()

-- | Fits a widget properly by calling <a>windowReLayout</a> on the parent
--   frame or dialog (<a>windowGetFrameParent</a>).
windowReFitMinimal :: Window a -> IO ()

-- | Re-invoke layout algorithm to fit a window around its children. It
--   will enlarge when the current client size is too small, but not shrink
--   when the window is already large enough. (in contrast,
--   <a>windowReLayoutMinimal</a> will also shrink a window so that it
--   always minimally sized).
windowReLayout :: Window a -> IO ()

-- | Re-invoke layout algorithm to fit a window around its children. It
--   will resize the window to its minimal acceptable size
--   (<a>windowFit</a>).
windowReLayoutMinimal :: Window a -> IO ()

-- | Anything in the widget class can be layed out.
class Widget w

-- | Create a layout from a widget.
widget :: Widget w => w -> Layout

-- | Create a layout from a widget.
widget :: Widget w => w -> Layout

-- | (primitive) Create a static label label (= <a>StaticText</a>).
label :: String -> Layout

-- | (primitive) A line with a given width and height Not all ports
--   (notably not wxGTK) support specifying the transversal direction of
--   the line (e.g. height for a horizontal line)
rule :: Int -> Int -> Layout

-- | A horizontal line with a given width.
hrule :: Int -> Layout

-- | A vertical line with a given height.
vrule :: Int -> Layout

-- | (primitive) Create a <a>Layout</a> from a <a>Sizer</a> object.
sizer :: Sizer a -> Layout

-- | Layout elements in a horizontal direction with a certain amount of
--   space between the elements.
row :: Int -> [Layout] -> Layout

-- | Layout elements in a vertical direction with a certain amount of space
--   between the elements.
column :: Int -> [Layout] -> Layout

-- | (primitive) The expression (<tt>grid w h rows</tt>) creates a grid of
--   <tt>rows</tt>. The <tt>w</tt> argument is the extra horizontal space
--   between elements and <tt>h</tt> the extra vertical space between
--   elements. (implemented using the <tt>FlexGrid</tt> sizer).
--   
--   Only when <i>all</i> elements of a column have horizontal stretch (see
--   <a>stretch</a> and <a>hstretch</a>), the entire column will stretch
--   horizontally, and the same holds for rows with vertical stretch. When
--   any column or row in a grid can stretch, the grid itself will also
--   stretch in that direction and the grid will <a>expand</a> to fill the
--   assigned area by default (instead of being <a>static</a>).
grid :: Int -> Int -> [[Layout]] -> Layout

-- | (primitive) Create a labeled border around a layout (=
--   <a>StaticBox</a>). Just like a <a>grid</a>, the horizontal or vertical
--   stretch of the child layout determines the stretch and expansion mode
--   of the box.
boxed :: String -> Layout -> Layout

-- | (primitive) Add a container widget (for example, a <a>Panel</a>). Just
--   like a <a>grid</a>, the horizontal or vertical stretch of the child
--   layout determines the stretch and expansion mode of the container.
container :: Window a -> Layout -> Layout

-- | Create a simple tab page with a certain title and layout.
tab :: String -> Layout -> TabPage

-- | Create a tab page with a certain title, icon, and layout.
imageTab :: String -> Bitmap () -> Layout -> TabPage

-- | Create a notebook layout. The pages <i>always</i> need to be embedded
--   inside a <a>container</a> (normally a <a>Panel</a>). Just like a
--   <a>grid</a>, the horizontal or vertical stretch of the child layout
--   determines the stretch and expansion mode of the notebook.
tabs :: Notebook a -> [TabPage] -> Layout

-- | Add a horizontal sash bar between two windows. The two integer
--   arguments specify the width of the sash bar (5) and the initial height
--   of the top pane respectively.
hsplit :: SplitterWindow a -> Int -> Int -> Layout -> Layout -> Layout

-- | Add a vertical sash bar between two windows. The two integer arguments
--   specify the width of the sash bar (5) and the initial width of the
--   left pane respectively.
vsplit :: SplitterWindow a -> Int -> Int -> Layout -> Layout -> Layout

-- | An empty layout that stretchable in all directions.
glue :: Layout

-- | An empty layout that is horizontally stretchable.
hglue :: Layout

-- | An empty layout that is vertically stretchable.
vglue :: Layout

-- | (primitive) Empty layout with a given width and height.
space :: Int -> Int -> Layout

-- | Horizontal <a>space</a> of a certain width.
hspace :: Int -> Layout

-- | Vertical <a>space</a> of a certain height.
vspace :: Int -> Layout

-- | An empty layout. (see also <a>space</a>).
empty :: Layout

-- | Adjust the minimal size of a control dynamically when the content
--   changes. This is used for example to correctly layout static text or
--   buttons when the text or label changes at runtime. This property is
--   automatically set for <a>StaticText</a>, <a>label</a>s, and
--   <tt>button</tt>s.
dynamic :: Layout -> Layout

-- | (primitive) The layout is not stretchable. In a <a>grid</a>, the row
--   and column that contain this layout will not be resizeable. Note that
--   a <a>static</a> layout can still be assigned an area that is larger
--   than its preferred size due to grid alignment constraints. (default,
--   except for containers like <a>grid</a> and <a>boxed</a> where it
--   depends on the child layouts).
static :: Layout -> Layout

-- | (primitive) The layout is stretchable and can be assigned a larger
--   area in both the horizontal and vertical direction. See also
--   combinators like <a>fill</a> and <a>floatCentre</a>.
stretch :: Layout -> Layout

-- | (primitive) The layout is stretchable in the horizontal direction. See
--   also combinators like <a>hfill</a> and <a>hfloatCentre</a>.
hstretch :: Layout -> Layout

-- | (primitive) The layout is stretchable in the vertical direction. See
--   also combinators like <a>vfill</a> and <a>vfloatCentre</a>.
vstretch :: Layout -> Layout

-- | (primitive) Set the minimal size of a widget.
minsize :: Size -> Layout -> Layout

-- | (primitive) Never resize the layout, but align it in the assigned area
--   (default, except for containers like <a>grid</a> and <a>boxed</a>
--   where it depends on the child layouts).
rigid :: Layout -> Layout

-- | (primitive) Expand the layout to fill the assigned area but maintain
--   the original proportions of the layout. Note that the layout can still
--   be aligned in a horizontal or vertical direction.
shaped :: Layout -> Layout

-- | (primitive) Expand the layout to fill the assigned area entirely, even
--   when the original proportions can not be maintained. Note that
--   alignment will have no effect on such layout. See also <a>fill</a>.
expand :: Layout -> Layout

-- | The layout is stretchable and expands into the assigned area. (see
--   also <a>stretch</a> and <a>expand</a>).
fill :: Layout -> Layout

-- | The layout is horizontally stretchable and expands into the assigned
--   area. (see also <a>hstretch</a> and <a>expand</a>).
hfill :: Layout -> Layout

-- | The layout is vertically stretchable and expands into the assigned
--   area. (see also <a>vstretch</a> and <a>expand</a>).
vfill :: Layout -> Layout

-- | Add a margin of a certain width around the entire layout.
margin :: Int -> Layout -> Layout

-- | (primitive) Set the width of the margin (default is 10 pixels).
marginWidth :: Int -> Layout -> Layout

-- | (primitive) Remove the margin of a layout (default).
marginNone :: Layout -> Layout

-- | (primitive) Add a margin to the left.
marginLeft :: Layout -> Layout

-- | (primitive) Add a margin to the top.
marginTop :: Layout -> Layout

-- | (primitive) Add a right margin.
marginRight :: Layout -> Layout

-- | (primitive) Add a margin to the bottom.
marginBottom :: Layout -> Layout

-- | Make the layout stretchable and align it in the top-left corner of the
--   assigned area (default).
floatTopLeft :: Layout -> Layout

-- | Make the layout stretchable and align it centered on the top of the
--   assigned area.
floatTop :: Layout -> Layout

-- | Make the layout stretchable and align it to the top-right of the
--   assigned area.
floatTopRight :: Layout -> Layout

-- | Make the layout stretchable and align it centered to the left of the
--   assigned area.
floatLeft :: Layout -> Layout

-- | Make the layout stretchable and align it in the center of the assigned
--   area.
floatCentre :: Layout -> Layout

-- | Make the layout stretchable and align it in the center of the assigned
--   area.
floatCenter :: Layout -> Layout

-- | Make the layout stretchable and align it centered to the right of the
--   assigned area.
floatRight :: Layout -> Layout

-- | Make the layout stretchable and align it to the bottom-left of the
--   assigned area.
floatBottomLeft :: Layout -> Layout

-- | Make the layout stretchable and align it centered on the bottom of the
--   assigned area.
floatBottom :: Layout -> Layout

-- | Make the layout stretchable and align it to the bottom-right of the
--   assigned area.
floatBottomRight :: Layout -> Layout

-- | Make the layout horizontally stretchable and align to the left.
hfloatLeft :: Layout -> Layout

-- | Make the layout horizontally stretchable and align to the center.
hfloatCentre :: Layout -> Layout

-- | Make the layout horizontally stretchable and align to the center.
hfloatCenter :: Layout -> Layout

-- | Make the layout horizontally stretchable and align to the right.
hfloatRight :: Layout -> Layout

-- | Make the layout vertically stretchable and align to the top.
vfloatTop :: Layout -> Layout

-- | Make the layout vertically stretchable and align to the center.
vfloatCentre :: Layout -> Layout

-- | Make the layout vertically stretchable and align to the center.
vfloatCenter :: Layout -> Layout

-- | Make the layout vertically stretchable and align to the bottom.
vfloatBottom :: Layout -> Layout

-- | Align the layout in the center of the assigned area.
center :: Layout -> Layout

-- | Align the layout in the center of the assigned area.
centre :: Layout -> Layout

-- | Align the layout in the top-left corner of the assigned area
--   (default).
alignTopLeft :: Layout -> Layout

-- | Align the layout centered on the top of the assigned area.
alignTop :: Layout -> Layout

-- | Align the layout to the top-right of the assigned area.
alignTopRight :: Layout -> Layout

-- | Align the layout centered to the left of the assigned area.
alignLeft :: Layout -> Layout

-- | Align the layout in the center of the assigned area.
alignCentre :: Layout -> Layout

-- | Align the layout in the center of the assigned area.
alignCenter :: Layout -> Layout

-- | Align the layout centered to the right of the assigned area.
alignRight :: Layout -> Layout

-- | Align the layout to the bottom-left of the assigned area.
alignBottomLeft :: Layout -> Layout

-- | Align the layout centered on the bottom of the assigned area.
alignBottom :: Layout -> Layout

-- | Align the layout to the bottom-right of the assigned area.
alignBottomRight :: Layout -> Layout

-- | (primitive) Align horizontally to the left when the layout is assigned
--   to a larger area (default).
halignLeft :: Layout -> Layout

-- | (primitive) Center horizontally when assigned to a larger area.
halignCentre :: Layout -> Layout

-- | (primitive) Center horizontally when assigned to a larger area.
halignCenter :: Layout -> Layout

-- | (primitive) Align horizontally to the right when the layout is
--   assigned to a larger area.
halignRight :: Layout -> Layout

-- | (primitive) Align vertically to the top when the layout is assigned to
--   a larger area (default).
valignTop :: Layout -> Layout

-- | (primitive) Center vertically when the layout is assigned to a larger
--   area.
valignCentre :: Layout -> Layout

-- | (primitive) Center vertically when the layout is assigned to a larger
--   area.
valignCenter :: Layout -> Layout

-- | (primitive) Align vertically to the bottom when the layout is assigned
--   to a larger area.
valignBottom :: Layout -> Layout
nullLayouts :: [Layout]
instance Graphics.UI.WXCore.Layout.Widget Graphics.UI.WXCore.Layout.Layout
instance Graphics.UI.WXCore.Layout.Widget (Graphics.UI.WXCore.WxcClassTypes.Window a)


-- | Exports standard <i>defines</i> of wxWidgets.
module Graphics.UI.WXCore.Defines

-- | wxWidgets library kinds.
data WxToolkit

-- | GTK
WxGTK :: WxToolkit

-- | MacOS
WxMac :: WxToolkit

-- | Any windows
WxMSW :: WxToolkit
WxMotif :: WxToolkit

-- | SciTech soft MGL
WxMGL :: WxToolkit
WxUniversal :: WxToolkit

-- | OS/2
WxOSTwo :: WxToolkit

-- | X11
WxXEleven :: WxToolkit
WxUnknown :: WxToolkit

-- | Get the current wxWidgets library kind.
wxToolkit :: WxToolkit

-- | Return the version of the wxWidgets library. It is composed of the
--   major version times 1000, plus the minor version times 100, plus the
--   release number. For example, version 2.1.15 would be 2115.
wxVersion :: Int

-- | Find a file relative to the application or current directory.
--   (absolute paths are passed without modification). This allows one to
--   access resources relative to the installation directory in a portable
--   way.
getAbsoluteFilePath :: FilePath -> IO FilePath

-- | deprecated: Use System.FilePath module and/or its module's
--   <a>pathSeparator</a> instead.

-- | <i>Deprecated: Use System.FilePath module and/or its module's
--   pathSeparator instead</i>
dirSep :: String

-- | deprecated: Use System.FilePath module's <a>searchPathSeparator</a>
--   instead.

-- | <i>Deprecated: Use System.FilePath module's searchPathSeparator
--   instead</i>
pathSep :: String
instance GHC.Enum.Enum Graphics.UI.WXCore.Defines.WxToolkit
instance GHC.Show.Show Graphics.UI.WXCore.Defines.WxToolkit
instance GHC.Classes.Eq Graphics.UI.WXCore.Defines.WxToolkit


-- | Drag &amp; Drop events.
module Graphics.UI.WXCore.DragAndDrop

-- | Set a drop target window and <a>DataObject</a> that is associated with
--   drop event.
dropTarget :: Window a -> DataObject b -> IO (WXCDropTarget ())

-- | Create <a>DropSource</a>. Then <tt>dragAndDrop</tt> replace target's
--   <a>DataObject</a> by this <a>DataObject</a>.
dropSource :: DataObject a -> Window b -> IO (DropSource ())

-- | On Windows or Mac OS X platform, you must choose this function or
--   <a>dropSourceWithCursorByString</a>, if you want to use Custom Cursor
--   for Drag &amp; Drop event. <a>dropSourceWithIcon</a> doesn't work
--   these platform, and this function doesn't work other platforms.
dropSourceWithCursor :: DataObject a -> Window b -> Cursor c -> Cursor c -> Cursor c -> IO (DropSource ())
dropSourceWithCursorByString :: DataObject a -> Window b -> String -> String -> String -> IO (DropSource ())
dropSourceWithIcon :: DataObject a -> Window b -> Icon c -> Icon c -> Icon c -> IO (DropSource ())


-- | Drawing.
module Graphics.UI.WXCore.Draw

-- | Draw connected lines.
drawLines :: DC a -> [Point] -> IO ()

-- | Draw a polygon. The polygon is filled with the odd-even rule.
drawPolygon :: DC a -> [Point] -> IO ()

-- | Gets the dimensions of the string using the currently selected font.
getTextExtent :: DC a -> String -> IO Size

-- | Gets the dimensions of the string using the currently selected font.
--   Takes text string to measure, and returns the size, <i>descent</i> and
--   <i>external leading</i>. Descent is the dimension from the baseline of
--   the font to the bottom of the descender , and external leading is any
--   extra vertical space added to the font by the font designer (is
--   usually zero).
getFullTextExtent :: DC a -> String -> IO (Size, Int, Int)

-- | Clear a specific rectangle with the current background brush. This is
--   preferred to <a>dcClear</a> for scrolled windows as <a>dcClear</a>
--   sometimes only clears the original view area, instead of the currently
--   visible scrolled area. Unfortunately, the background brush is not set
--   correctly on wxMAC 2.4, and this will always clear to a white color on
--   mac systems.
dcClearRect :: DC a -> Rect -> IO ()

-- | Use a <a>PaintDC</a>. Draw on a window within an 'on paint' event.
withPaintDC :: Window a -> (PaintDC () -> IO b) -> IO b

-- | Use a <a>ClientDC</a>. Draw on a window from outside an 'on paint'
--   event.
withClientDC :: Window a -> (ClientDC () -> IO b) -> IO b

-- | Safely perform a drawing operation on a DC.
dcDraw :: DC a -> IO b -> IO b

-- | Use a <a>SVGFileDC</a>.
withSVGFileDC :: FilePath -> (SVGFileDC () -> IO b) -> IO b
withSVGFileDCWithSize :: FilePath -> Size -> (SVGFileDC () -> IO b) -> IO b
withSVGFileDCWithSizeAndResolution :: FilePath -> Size -> Float -> (SVGFileDC () -> IO b) -> IO b

-- | The drawing state (pen,brush,font,text color,text background color) of
--   a device context.
data DrawState

-- | Run a computation after which the original drawing state of the
--   <a>DC</a> is restored.
dcEncapsulate :: DC a -> IO b -> IO b

-- | Get the drawing state. (Should be deleted with
--   <a>drawStateDelete</a>).
dcGetDrawState :: DC a -> IO DrawState

-- | Set the drawing state.
dcSetDrawState :: DC a -> DrawState -> IO ()

-- | Release the resources associated with a drawing state.
drawStateDelete :: DrawState -> IO ()

-- | Use double buffering to draw to a <a>DC</a> -- reduces flicker. Note
--   that the <tt>windowOnPaint</tt> handler can already take care of
--   buffering automatically. The rectangle argument is normally the view
--   rectangle (<a>windowGetViewRect</a>). Uses a <a>MemoryDC</a> to draw
--   into memory first and than blit the result to the device context. The
--   memory area allocated is the minimal size necessary to accomodate the
--   rectangle, but is re-allocated on each invokation.
dcBuffer :: WindowDC a -> Rect -> (DC () -> IO ()) -> IO ()

-- | Optimized double buffering. Takes a possible reference to a bitmap. If
--   it is <a>Nothing</a>, a new bitmap is allocated everytime. Otherwise,
--   the reference is used to re-use an allocated bitmap if possible. The
--   <a>Rect</a> argument specifies the the current logical view rectangle.
--   The last argument is called to draw on the memory <a>DC</a>.
dcBufferWithRef :: WindowDC a -> Maybe (Var (Bitmap ())) -> Rect -> (DC () -> IO ()) -> IO ()

-- | Optimized double buffering. Takes a <i>clear</i> routine as its first
--   argument. Normally this is something like 'dc -&gt; dcClearRect dc
--   viewArea' but on certain platforms, like MacOS X, special handling is
--   necessary.
dcBufferWithRefEx :: WindowDC a -> (DC () -> IO ()) -> Maybe (Var (Bitmap ())) -> Rect -> (DC () -> IO ()) -> IO ()

-- | Optimized double buffering with a GCDC. Takes a <i>clear</i> routine
--   as its first argument. Normally this is something like 'dc -&gt;
--   dcClearRect dc viewArea' but on certain platforms, like MacOS X,
--   special handling is necessary.
dcBufferWithRefExGcdc :: WindowDC a -> (DC () -> IO ()) -> Maybe (Var (Bitmap ())) -> Rect -> (GCDC () -> IO b) -> IO ()

-- | Get logical view start, adjusted for scrolling.
windowGetViewStart :: Window a -> IO Point

-- | Get logical view rectangle, adjusted for scrolling.
windowGetViewRect :: Window a -> IO Rect

-- | Get logical coordinates adjusted for scrolling.
windowCalcUnscrolledPosition :: Window a -> Point -> IO Point

-- | Font descriptor. The font is normally specified thru the
--   <a>FontFamily</a>, giving some degree of portability. The
--   <a>_fontFace</a> can be used to specify the exact (platform dependent)
--   font.
--   
--   Note that the original wxWidgets <tt>FontStyle</tt> is renamed to
--   <tt>FontShape</tt>.
data FontStyle
FontStyle :: !Int -> !FontFamily -> !FontShape -> !FontWeight -> !Bool -> !String -> !Int -> FontStyle
[_fontSize] :: FontStyle -> !Int
[_fontFamily] :: FontStyle -> !FontFamily
[_fontShape] :: FontStyle -> !FontShape
[_fontWeight] :: FontStyle -> !FontWeight
[_fontUnderline] :: FontStyle -> !Bool

-- | normally <tt>""</tt>
[_fontFace] :: FontStyle -> !String

-- | normally <tt>wxFONTENCODING_DEFAULT</tt>
[_fontEncoding] :: FontStyle -> !Int

-- | Standard font families.
data FontFamily

-- | A system default font.
FontDefault :: FontFamily

-- | Decorative font.
FontDecorative :: FontFamily

-- | Formal serif font.
FontRoman :: FontFamily

-- | Hand writing font.
FontScript :: FontFamily

-- | Sans-serif font.
FontSwiss :: FontFamily

-- | Fixed pitch font.
FontModern :: FontFamily

-- | A teletype (i.e. monospaced) font
FontTeletype :: FontFamily

-- | The font style.
data FontShape
ShapeNormal :: FontShape
ShapeItalic :: FontShape
ShapeSlant :: FontShape

-- | The font weight.
data FontWeight
WeightNormal :: FontWeight
WeightBold :: FontWeight
WeightLight :: FontWeight

-- | Default 10pt font.
fontDefault :: FontStyle

-- | Default 10pt sans-serif font.
fontSwiss :: FontStyle

-- | Default 8pt font.
fontSmall :: FontStyle

-- | Default 10pt italic.
fontItalic :: FontStyle

-- | Monospaced font, 10pt.
fontFixed :: FontStyle

-- | Use a font that is automatically deleted at the end of the
--   computation.
withFontStyle :: FontStyle -> (Font () -> IO a) -> IO a

-- | Set a font that is automatically deleted at the end of the
--   computation.
dcWithFontStyle :: DC a -> FontStyle -> IO b -> IO b

-- | Set the font info of a DC.
dcSetFontStyle :: DC a -> FontStyle -> IO ()

-- | Get the current font info.
dcGetFontStyle :: DC a -> IO FontStyle

-- | Create a <a>Font</a> from <a>FontStyle</a>. Returns both the font and
--   a deletion procedure.
fontCreateFromStyle :: FontStyle -> IO (Font (), IO ())

-- | Get the <a>FontStyle</a> from a <a>Font</a> object.
fontGetFontStyle :: Font () -> IO FontStyle

-- | Brush style.
data BrushStyle
BrushStyle :: !BrushKind -> !Color -> BrushStyle
[_brushKind] :: BrushStyle -> !BrushKind
[_brushColor] :: BrushStyle -> !Color

-- | Brush kind.
data BrushKind

-- | No filling
BrushTransparent :: BrushKind

-- | Solid color
BrushSolid :: BrushKind

-- | Hatch pattern
BrushHatch :: !HatchStyle -> BrushKind
[_brushHatch] :: BrushKind -> !HatchStyle

-- | Bitmap pattern (on win95 only 8x8 bitmaps are supported)
BrushStipple :: !(Bitmap ()) -> BrushKind
[_brushBitmap] :: BrushKind -> !(Bitmap ())

-- | Hatch style.
data HatchStyle

-- | Backward diagonal
HatchBDiagonal :: HatchStyle

-- | Crossed diagonal
HatchCrossDiag :: HatchStyle

-- | Forward diagonal
HatchFDiagonal :: HatchStyle

-- | Crossed orthogonal
HatchCross :: HatchStyle

-- | Horizontal
HatchHorizontal :: HatchStyle

-- | Vertical
HatchVertical :: HatchStyle

-- | Default brush (transparent, black).
brushDefault :: BrushStyle

-- | A solid brush of a specific color.
brushSolid :: Color -> BrushStyle

-- | A transparent brush.
brushTransparent :: BrushStyle

-- | Set the brush style (and text background color) of a device context.
dcSetBrushStyle :: DC a -> BrushStyle -> IO ()

-- | Get the current brush of a device context.
dcGetBrushStyle :: DC a -> IO BrushStyle

-- | Use a brush that is automatically deleted at the end of the
--   computation.
withBrushStyle :: BrushStyle -> (Brush () -> IO a) -> IO a

-- | Use a brush that is automatically deleted at the end of the
--   computation.
dcWithBrushStyle :: DC a -> BrushStyle -> IO b -> IO b
dcWithBrush :: DC b -> Brush a -> IO c -> IO c

-- | Create a new brush from a <a>BrushStyle</a>. Returns both the brush
--   and its deletion procedure.
brushCreateFromStyle :: BrushStyle -> IO (Brush (), IO ())

-- | Get the <a>BrushStyle</a> of <a>Brush</a>.
brushGetBrushStyle :: Brush a -> IO BrushStyle

-- | Pen style.
data PenStyle
PenStyle :: !PenKind -> !Color -> !Int -> !CapStyle -> !JoinStyle -> PenStyle
[_penKind] :: PenStyle -> !PenKind
[_penColor] :: PenStyle -> !Color
[_penWidth] :: PenStyle -> !Int
[_penCap] :: PenStyle -> !CapStyle
[_penJoin] :: PenStyle -> !JoinStyle

-- | Pen kinds.
data PenKind

-- | No edge.
PenTransparent :: PenKind
PenSolid :: PenKind
PenDash :: !DashStyle -> PenKind
[_penDash] :: PenKind -> !DashStyle
PenHatch :: !HatchStyle -> PenKind
[_penHatch] :: PenKind -> !HatchStyle

-- | <tt>_penColor</tt> is ignored
PenStipple :: !(Bitmap ()) -> PenKind
[_penBitmap] :: PenKind -> !(Bitmap ())

-- | Cap style
data CapStyle

-- | End points are rounded
CapRound :: CapStyle
CapProjecting :: CapStyle
CapButt :: CapStyle

-- | Join style.
data JoinStyle

-- | Corners are rounded
JoinRound :: JoinStyle

-- | Corners are bevelled
JoinBevel :: JoinStyle

-- | Corners are blocked
JoinMiter :: JoinStyle

-- | Dash style
data DashStyle
DashDot :: DashStyle
DashLong :: DashStyle
DashShort :: DashStyle
DashDotShort :: DashStyle

-- | Default pen (<tt>PenStyle PenSolid black 1 CapRound JoinRound</tt>)
penDefault :: PenStyle

-- | A solid pen with a certain color and width.
penColored :: Color -> Int -> PenStyle

-- | A transparent pen.
penTransparent :: PenStyle

-- | Set the current pen style. The text color is also adapted.
dcSetPenStyle :: DC a -> PenStyle -> IO ()

-- | Get the current pen style.
dcGetPenStyle :: DC a -> IO PenStyle

-- | Use a pen that is automatically deleted at the end of the computation.
withPenStyle :: PenStyle -> (Pen () -> IO a) -> IO a

-- | Set a pen that is automatically deleted at the end of the computation.
dcWithPenStyle :: DC a -> PenStyle -> IO b -> IO b

-- | Set a pen that is used during a certain computation.
dcWithPen :: DC a -> Pen p -> IO b -> IO b

-- | Create a new pen from a <a>PenStyle</a>. Returns both the pen and its
--   deletion procedure.
penCreateFromStyle :: PenStyle -> IO (Pen (), IO ())

-- | Create a <a>PenStyle</a> from a <a>Pen</a>.
penGetPenStyle :: Pen a -> IO PenStyle
instance GHC.Show.Show Graphics.UI.WXCore.Draw.BrushStyle
instance GHC.Classes.Eq Graphics.UI.WXCore.Draw.BrushStyle
instance GHC.Show.Show Graphics.UI.WXCore.Draw.BrushKind
instance GHC.Classes.Eq Graphics.UI.WXCore.Draw.BrushKind
instance GHC.Show.Show Graphics.UI.WXCore.Draw.PenStyle
instance GHC.Classes.Eq Graphics.UI.WXCore.Draw.PenStyle
instance GHC.Show.Show Graphics.UI.WXCore.Draw.PenKind
instance GHC.Classes.Eq Graphics.UI.WXCore.Draw.PenKind
instance GHC.Show.Show Graphics.UI.WXCore.Draw.HatchStyle
instance GHC.Classes.Eq Graphics.UI.WXCore.Draw.HatchStyle
instance GHC.Show.Show Graphics.UI.WXCore.Draw.JoinStyle
instance GHC.Classes.Eq Graphics.UI.WXCore.Draw.JoinStyle
instance GHC.Show.Show Graphics.UI.WXCore.Draw.CapStyle
instance GHC.Classes.Eq Graphics.UI.WXCore.Draw.CapStyle
instance GHC.Show.Show Graphics.UI.WXCore.Draw.DashStyle
instance GHC.Classes.Eq Graphics.UI.WXCore.Draw.DashStyle
instance GHC.Show.Show Graphics.UI.WXCore.Draw.FontStyle
instance GHC.Classes.Eq Graphics.UI.WXCore.Draw.FontStyle
instance GHC.Show.Show Graphics.UI.WXCore.Draw.FontWeight
instance GHC.Classes.Eq Graphics.UI.WXCore.Draw.FontWeight
instance GHC.Show.Show Graphics.UI.WXCore.Draw.FontShape
instance GHC.Classes.Eq Graphics.UI.WXCore.Draw.FontShape
instance GHC.Show.Show Graphics.UI.WXCore.Draw.FontFamily
instance GHC.Classes.Eq Graphics.UI.WXCore.Draw.FontFamily


-- | Standard dialogs and (non modal) tip windows.
module Graphics.UI.WXCore.Dialogs

-- | An error dialog with a single <i>Ok</i> button.
--   
--   <pre>
--   errorDialog parent "error" "fatal error, please re-install windows"
--   </pre>
errorDialog :: Window a -> String -> String -> IO ()

-- | An warning dialog with a single <i>Ok</i> button.
--   
--   <pre>
--   warningDialog parent "warning" "you need a break"
--   </pre>
warningDialog :: Window a -> String -> String -> IO ()

-- | An information dialog with a single <i>Ok</i> button.
--   
--   <pre>
--   infoDialog parent "info" "you've got mail"
--   </pre>
infoDialog :: Window a -> String -> String -> IO ()

-- | The expression (<tt>confirmDialog caption msg yesDefault parent</tt>)
--   shows a confirm dialog with a <i>Yes</i> and <i>No</i> button. If
--   <tt>yesDefault</tt> is <a>True</a>, the <i>Yes</i> button is default,
--   otherwise the <i>No</i> button. Returns <a>True</a> when the
--   <i>Yes</i> button was pressed.
--   
--   <pre>
--   yes &lt;- confirmDialog parent "confirm" "are you sure that you want to reformat the hardisk?"
--   </pre>
confirmDialog :: Window a -> String -> String -> Bool -> IO Bool

-- | An dialog with an <i>Ok</i> and <i>Cancel</i> button. Returns
--   <a>True</a> when <i>Ok</i> is pressed.
--   
--   <pre>
--   proceedDialog parent "Error" "Do you want to debug this application?"
--   </pre>
proceedDialog :: Window a -> String -> String -> IO Bool

-- | Opens a non-modal tip window with a text. The window is closed
--   automatically when the user clicks the window or when it loses the
--   focus.
tipWindowMessage :: Window a -> String -> IO ()

-- | Opens a non-modal tip window with a text. The window is closed
--   automatically when the mouse leaves the specified area, or when the
--   user clicks the window, or when the window loses the focus.
tipWindowMessageBounded :: Window a -> String -> Rect -> IO ()

-- | Show a modal file selection dialog. Usage:
--   
--   <pre>
--   fileOpenDialog parent rememberCurrentDir allowReadOnly message wildcards directory filename
--   </pre>
--   
--   If <tt>rememberCurrentDir</tt> is <a>True</a>, the library changes the
--   current directory to the one where the files were chosen.
--   <tt>allowReadOnly</tt> determines whether the read-only files can be
--   selected. The <tt>message</tt> is displayed on top of the dialog. The
--   <tt>directory</tt> is the default directory (use the empty string for
--   the current directory). The <tt>filename</tt> is the default file
--   name. The <tt>wildcards</tt> determine the entries in the file
--   selection box. It consists of a list of pairs: the first element is a
--   description (<tt>"Image files"</tt>) and the second element a list of
--   wildcard patterns (<tt>["*.bmp","*.gif"]</tt>).
--   
--   <pre>
--   fileOpenDialog frame True True "Open image" [("Any file",["*.*"]),("Bitmaps",["*.bmp"])] "" ""
--   </pre>
--   
--   Returns <a>Nothing</a> when the user presses the cancel button.
fileOpenDialog :: Window a -> Bool -> Bool -> String -> [(String, [String])] -> FilePath -> FilePath -> IO (Maybe FilePath)

-- | Opens a dialog that lets the user select multiple files. See
--   <a>fileOpenDialog</a> for a description of the arguments. Returns the
--   empty list when the user selected no files or pressed the cancel
--   button.
filesOpenDialog :: Window a -> Bool -> Bool -> String -> [(String, [String])] -> FilePath -> FilePath -> IO [FilePath]

-- | Show a modal file save dialog. Usage:
--   
--   <pre>
--   fileSaveDialog parent rememberCurrentDir overwritePrompt message directory filename
--   </pre>
--   
--   The <tt>overwritePrompt</tt> argument determines whether the user gets
--   a prompt for confirmation when overwriting a file. The other arguments
--   are as in <a>fileOpenDialog</a>.
fileSaveDialog :: Window a -> Bool -> Bool -> String -> [(String, [String])] -> FilePath -> FilePath -> IO (Maybe FilePath)

-- | Show a modal directory dialog. Usage:
--   
--   <pre>
--   dirOpenDialog parent allowNewDir message directory
--   </pre>
--   
--   The <tt>allowNewDir</tt> argument determines whether the user can
--   create new directories and edit directory names. The <tt>message</tt>
--   is displayed on top of the dialog and <tt>directory</tt> is the
--   default directory (or empty for the current directory). Return
--   <a>Nothing</a> when the users presses the cancel button.
dirOpenDialog :: Window a -> Bool -> FilePath -> FilePath -> IO (Maybe FilePath)

-- | Show a font selection dialog with a given initial font. Returns
--   <a>Nothing</a> when cancel was pressed.
fontDialog :: Window a -> FontStyle -> IO (Maybe FontStyle)

-- | Show a color selection dialog given an initial color. Returns
--   <a>Nothing</a> when cancel was pressed.
colorDialog :: Window a -> Color -> IO (Maybe Color)

-- | Retrieve a password from a user. Returns the empty string on cancel.
--   Usage:
--   
--   <pre>
--   passwordDialog window message caption defaultText
--   </pre>
passwordDialog :: Window a -> String -> String -> String -> IO String

-- | Retrieve a text string from a user. Returns the empty string on
--   cancel. Usage:
--   
--   <pre>
--   textDialog window message caption defaultText
--   </pre>
textDialog :: Window a -> String -> String -> String -> IO String

-- | Retrieve a <i>positive</i> number from a user. Returns <a>Nothing</a>
--   on cancel. Usage:
--   
--   <pre>
--   numberDialog window message prompt caption initialValue minimum maximum
--   </pre>
numberDialog :: Window a -> String -> String -> String -> Int -> Int -> Int -> IO (Maybe Int)

-- | A primitive message dialog, specify icons and buttons.
--   
--   <pre>
--   r &lt;- messageDialog w "Confirm" "Do you really want that?"
--                         (wxYES_NO .+. wxNO_DEFAULT .+. wxICON_QUESTION)
--   </pre>
messageDialog :: Window a -> String -> String -> BitFlag -> IO BitFlag

-- | Generic file dialog function. Takes a function that is called when the
--   dialog is terminated, style flags, a message, a list of wildcards, a
--   directory, and a file name. For example:
--   
--   <pre>
--   fileOpenDialog  
--     = fileDialog parent result flags message wildcards directory filename
--     where
--       flags
--        = wxOPEN .+. (if rememberCurrentDir then wxCHANGE_DIR else 0) 
--          .+. (if allowReadOnly then 0 else wxHIDE_READONLY)
--   
--      result fd r
--        = if (r /= wxID_OK)
--           then return Nothing
--           else do fname &lt;- fileDialogGetPath fd
--                   return (Just fname)
--   </pre>
fileDialog :: Window a -> (FileDialog () -> Style -> IO b) -> Style -> String -> [(String, [String])] -> FilePath -> FilePath -> IO b


-- | Dynamically set (and get) Haskell event handlers for basic wxWidgets
--   events. Note that one should always call <a>skipCurrentEvent</a> when
--   an event is not processed in the event handler so that other
--   eventhandlers can process the event.
module Graphics.UI.WXCore.Events

-- | IO action to cancel events.
type Veto = IO ()

-- | Set an event handler for a push button.
buttonOnCommand :: Button a -> IO () -> IO ()

-- | Set an event handler for when a checkbox clicked.
checkBoxOnCommand :: CheckBox a -> (IO ()) -> IO ()

-- | Set an event handler for when a choice item is (de)selected.
choiceOnCommand :: Choice a -> IO () -> IO ()

-- | Set an event handler for when a combo box item is selected.
comboBoxOnCommand :: ComboBox a -> IO () -> IO ()

-- | Set an event handler for an enter command in a combo box.
comboBoxOnTextEnter :: ComboBox a -> IO () -> IO ()

-- | Set an event handler for "updated text", works for example on a
--   <a>TextCtrl</a> and <a>ComboBox</a>.
controlOnText :: Control a -> IO () -> IO ()

-- | Set an event handler for when a listbox item is (de)selected.
listBoxOnCommand :: ListBox a -> IO () -> IO ()

-- | Set an event handler for when a spinCtrl clicked.
spinCtrlOnCommand :: SpinCtrl a -> (IO ()) -> IO ()

-- | Set an event handler for when a radiobox item is selected.
radioBoxOnCommand :: RadioBox a -> IO () -> IO ()

-- | Set an event handler for when a slider item changes.
sliderOnCommand :: Slider a -> IO () -> IO ()

-- | Set an event handler for an enter command in a text control.
textCtrlOnTextEnter :: TextCtrl a -> IO () -> IO ()

-- | Set a list event handler.
listCtrlOnListEvent :: ListCtrl a -> (EventList -> IO ()) -> IO ()

-- | Set an event handler for a push button.
toggleButtonOnCommand :: ToggleButton a -> IO () -> IO ()

-- | Set a tree event handler.
treeCtrlOnTreeEvent :: TreeCtrl a -> (EventTree -> IO ()) -> IO ()

-- | Set a grid event handler.
gridOnGridEvent :: Grid a -> (EventGrid -> IO ()) -> IO ()

-- | Set a calendar event handler.
wizardOnWizEvent :: Wizard a -> (EventWizard -> IO ()) -> IO ()

-- | Set a PropertyGrid event handler.
propertyGridOnPropertyGridEvent :: PropertyGrid a -> (EventPropertyGrid -> IO ()) -> IO ()

-- | Set a mouse event handler for a window. The first argument determines
--   whether mouse motion events (<a>MouseMotion</a>) are handled or not.
windowOnMouse :: Window a -> Bool -> (EventMouse -> IO ()) -> IO ()

-- | Set an event handler for translated key presses.
windowOnKeyChar :: Window a -> (EventKey -> IO ()) -> IO ()

-- | Set an event handler for untranslated key presses. If
--   <a>skipCurrentEvent</a> is not called, the corresponding
--   <a>windowOnKeyChar</a> eventhandler won't be called.
windowOnKeyDown :: Window a -> (EventKey -> IO ()) -> IO ()

-- | Set an event handler for (untranslated) key releases.
windowOnKeyUp :: Window a -> (EventKey -> IO ()) -> IO ()

-- | Adds a close handler to the currently installed close handlers.
windowAddOnClose :: Window a -> IO () -> IO ()

-- | Set an event handler that is called when the user tries to close a
--   frame or dialog. Don't forget to call the previous handler or
--   <tt>frameDestroy</tt> explicitly or otherwise the frame won't be
--   closed.
windowOnClose :: Window a -> IO () -> IO ()

-- | Set an event handler that is called when the window is destroyed.
--   <i>Note: does not seem to work on Windows</i>.
windowOnDestroy :: Window a -> IO () -> IO ()

-- | Add a delete-event handler to the current installed delete-event
--   handlers.
--   
--   <pre>
--   windowAddOnDelete window new
--     = do prev &lt;- windowGetOnDelete window
--          windowOnDelete window (do{ new; prev })
--   </pre>
windowAddOnDelete :: Window a -> IO () -> IO ()

-- | Set an event handler that is called when the window is deleted. Use
--   with care as the window itself is in a deletion state.
windowOnDelete :: Window a -> IO () -> IO ()

-- | Set an event handler that is called when the window is created.
windowOnCreate :: Window a -> IO () -> IO ()

-- | An idle event is generated in idle time. The handler should return
--   whether more idle processing is needed (<a>True</a>) or otherwise the
--   event loop goes into a passive waiting state.
windowOnIdle :: Window a -> IO Bool -> IO ()

-- | A timer event is generated by an attached timer, see
--   <a>windowTimerAttach</a>. <i>Broken!</i> (use <a>timerOnCommand</a>
--   instead).
windowOnTimer :: Window a -> IO () -> IO ()

-- | Set an event handler that is called when the window is resized.
windowOnSize :: Window a -> IO () -> IO ()

-- | Set an event handler that is called when the window gets or loses the
--   focus. The event parameter is <a>True</a> when the window gets the
--   focus.
windowOnFocus :: Window a -> (Bool -> IO ()) -> IO ()

-- | Set an event handler that is called when the window is activated or
--   deactivated. The event parameter is <a>True</a> when the window is
--   activated.
windowOnActivate :: Window a -> (Bool -> IO ()) -> IO ()

-- | Set an event handler for paint events. The implementation uses an
--   intermediate buffer for non-flickering redraws. The device context
--   (<a>DC</a>) is always cleared before the paint handler is called. The
--   paint handler also gets the currently visible view area as an argument
--   (adjusted for scrolling). Note: you can not set both a
--   <a>windowOnPaintRaw</a> and <a>windowOnPaint</a> handler!
windowOnPaint :: Window a -> (DC () -> Rect -> IO ()) -> IO ()

-- | Set an event handler for <i>raw</i> paint events. Draws directly to
--   the paint device context (<a>PaintDC</a>) and the <a>DC</a> is not
--   cleared when the handler is called. The handler takes two other
--   arguments: the view rectangle and a list of <i>dirty</i> rectangles.
--   The rectangles contain logical coordinates and are already adjusted
--   for scrolled windows. Note: you can not set both a
--   <a>windowOnPaintRaw</a> and <a>windowOnPaint</a> handler!
windowOnPaintRaw :: Window a -> (PaintDC () -> Rect -> [Rect] -> IO ()) -> IO ()

-- | Set an event handler for GCDC paint events. The implementation uses an
--   intermediate buffer for non-flickering redraws. The device context
--   (<a>GCDC</a>) is always cleared before the paint handler is called.
--   The paint handler also gets the currently visible view area as an
--   argument (adjusted for scrolling). Note: you can not set both a
--   <a>windowOnPaintRaw</a> and <a>windowOnPaint</a> handler!
windowOnPaintGc :: Window a -> (GCDC () -> Rect -> IO ()) -> IO ()

-- | A context menu event is generated when the user right-clicks in a
--   window or presses shift-F10.
windowOnContextMenu :: Window a -> IO () -> IO ()

-- | Set a scroll event handler.
windowOnScroll :: Window a -> (EventScroll -> IO ()) -> IO ()

-- | Set a html event handler for a HTML window. The first argument
--   determines whether hover events (<a>HtmlCellHover</a>) are handled or
--   not.
htmlWindowOnHtmlEvent :: WXCHtmlWindow a -> Bool -> (EventHtml -> IO ()) -> IO ()

-- | A menu event is generated when the user selects a menu item. You
--   should install this handler on the window that owns the menubar or a
--   popup menu.
evtHandlerOnMenuCommand :: EvtHandler a -> Id -> IO () -> IO ()

-- | Called when a process is ended with the process <tt>pid</tt> and
--   exitcode.
evtHandlerOnEndProcess :: EvtHandler a -> (Int -> Int -> IO ()) -> IO ()

-- | Install an event handler on an input stream. The handler is called
--   whenever input is read (or when an error occurred). The third
--   parameter gives the size of the input batches. The original input
--   stream should no longer be referenced after this call!
evtHandlerOnInput :: EvtHandler b -> (String -> StreamStatus -> IO ()) -> InputStream a -> Int -> IO ()

-- | Install an event handler on a specific input sink. It is advised to
--   use the <a>evtHandlerOnInput</a> whenever retrieval of the handler is
--   not necessary.
evtHandlerOnInputSink :: EvtHandler b -> (String -> StreamStatus -> IO ()) -> InputSink a -> IO ()

-- | Set a taskbar icon event handler.
evtHandlerOnTaskBarIconEvent :: TaskBarIcon a -> (EventTaskBarIcon -> IO ()) -> IO ()

-- | Scintilla events. * Means extra information is available (excluding
--   position, key and modifiers) but not yet implemented. ! means it's
--   done
data EventSTC

-- | ! wxEVT_STC_CHANGE.
STCChange :: EventSTC

-- | ! wxEVT_STC_STYLENEEDED.
STCStyleNeeded :: EventSTC

-- | ? wxEVT_STC_CHARADDED. The position seems to be broken
STCCharAdded :: Char -> Int -> EventSTC

-- | ! wxEVT_STC_SAVEPOINTREACHED.
STCSavePointReached :: EventSTC

-- | ! wxEVT_STC_SAVEPOINTLEFT.
STCSavePointLeft :: EventSTC

-- | ! wxEVT_STC_ROMODIFYATTEMPT.
STCROModifyAttempt :: EventSTC

-- | <ul>
--   <li>wxEVT_STC_KEY. kolmodin 20050304: is this event ever raised? not
--   under linux. according to davve, not under windows either</li>
--   </ul>
STCKey :: EventSTC

-- | ! wxEVT_STC_DOUBLECLICK.
STCDoubleClick :: EventSTC

-- | ! wxEVT_STC_UPDATEUI.
STCUpdateUI :: EventSTC

-- | ? wxEVT_STC_MODIFIED.
STCModified :: Int -> Int -> (Maybe String) -> Int -> Int -> Int -> Int -> Int -> EventSTC

-- | ! wxEVT_STC_MACRORECORD iMessage wParam lParam
STCMacroRecord :: Int -> Int -> Int -> EventSTC

-- | ? wxEVT_STC_MARGINCLICK. kolmodin 20050304: Add something nicer for
--   alt, shift and ctrl? Perhaps a new datatype or a tuple.
STCMarginClick :: Bool -> Bool -> Bool -> Int -> Int -> EventSTC

-- | ! wxEVT_STC_NEEDSHOWN length position.
STCNeedShown :: Int -> Int -> EventSTC

-- | ! wxEVT_STC_PAINTED.
STCPainted :: EventSTC

-- | ! wxEVT_STC_USERLISTSELECTION listType text
STCUserListSelection :: Int -> String -> EventSTC

-- | ! wxEVT_STC_URIDROPPED
STCUriDropped :: String -> EventSTC

-- | ! wxEVT_STC_DWELLSTART
STCDwellStart :: Point -> EventSTC

-- | ! wxEVT_STC_DWELLEND
STCDwellEnd :: Point -> EventSTC

-- | ! wxEVT_STC_START_DRAG.
STCStartDrag :: Int -> Int -> String -> EventSTC

-- | ! wxEVT_STC_DRAG_OVER
STCDragOver :: Point -> DragResult -> EventSTC

-- | ! wxEVT_STC_DO_DROP
STCDoDrop :: String -> DragResult -> EventSTC

-- | ! wxEVT_STC_ZOOM
STCZoom :: EventSTC

-- | ! wxEVT_STC_HOTSPOT_CLICK
STCHotspotClick :: EventSTC

-- | ! wxEVT_STC_HOTSPOT_DCLICK
STCHotspotDClick :: EventSTC

-- | ! wxEVT_STC_CALLTIP_CLICK
STCCalltipClick :: EventSTC

-- | ! wxEVT_STC_AUTOCOMP_SELECTION
STCAutocompSelection :: EventSTC

-- | Unknown event. Should never occur.
STCUnknown :: EventSTC
stcOnSTCEvent :: StyledTextCtrl a -> (EventSTC -> IO ()) -> IO ()
stcGetOnSTCEvent :: StyledTextCtrl a -> IO (EventSTC -> IO ())

-- | Printer events.
data EventPrint

-- | Print a copy: cancel, start page, end page
PrintBeginDoc :: (IO ()) -> Int -> Int -> EventPrint
PrintEndDoc :: EventPrint

-- | Begin a print job.
PrintBegin :: EventPrint
PrintEnd :: EventPrint

-- | Prepare: chance to call <tt>printOutSetPageLimits</tt> for example.
PrintPrepare :: EventPrint

-- | Print a page: cancel, printer device context, page number.
PrintPage :: (IO ()) -> (DC ()) -> Int -> EventPrint

-- | Unknown print event with event code
PrintUnknown :: Int -> EventPrint

-- | Set an event handler for printing.
printOutOnPrint :: WXCPrintout a -> (EventPrint -> IO ()) -> IO ()

-- | Get the current button event handler on a window.
buttonGetOnCommand :: Window a -> IO (IO ())

-- | Get the current check box event handler.
checkBoxGetOnCommand :: CheckBox a -> IO (IO ())

-- | Get the current choice command event handler.
choiceGetOnCommand :: Choice a -> IO (IO ())

-- | Get the current combo box event handler for selections
comboBoxGetOnCommand :: ComboBox a -> IO (IO ())

-- | Get the current text enter event handler.
comboBoxGetOnTextEnter :: ComboBox a -> IO (IO ())

-- | Get the current event handler for updated text.
controlGetOnText :: Control a -> IO (IO ())

-- | Get the current listbox event handler for selections.
listBoxGetOnCommand :: ListBox a -> IO (IO ())

-- | Get the current check box event handler.
spinCtrlGetOnCommand :: SpinCtrl a -> IO (IO ())

-- | Get the current radio box command handler.
radioBoxGetOnCommand :: RadioBox a -> IO (IO ())

-- | Get the current slider command event handler.
sliderGetOnCommand :: Slider a -> IO (IO ())

-- | Get the current text enter event handler.
textCtrlGetOnTextEnter :: TextCtrl a -> IO (IO ())

-- | Get the current list event handler of a window.
listCtrlGetOnListEvent :: ListCtrl a -> IO (EventList -> IO ())

-- | Get the current button event handler on a window.
toggleButtonGetOnCommand :: Window a -> IO (IO ())

-- | Get the current tree event handler of a window.
treeCtrlGetOnTreeEvent :: TreeCtrl a -> IO (EventTree -> IO ())

-- | Get the current grid event handler of a window.
gridGetOnGridEvent :: Grid a -> IO (EventGrid -> IO ())

-- | Get the current calendar event handler of a window.
wizardGetOnWizEvent :: Wizard a -> IO (EventWizard -> IO ())

-- | Get the current PropertyGrid event handler of a window.
propertyGridGetOnPropertyGridEvent :: PropertyGrid a -> IO (EventPropertyGrid -> IO ())

-- | Get the current mouse event handler of a window.
windowGetOnMouse :: Window a -> IO (EventMouse -> IO ())

-- | Get the current translated key handler of a window.
windowGetOnKeyChar :: Window a -> IO (EventKey -> IO ())

-- | Get the current key down handler of a window.
windowGetOnKeyDown :: Window a -> IO (EventKey -> IO ())

-- | Get the current key release handler of a window.
windowGetOnKeyUp :: Window a -> IO (EventKey -> IO ())

-- | Get the current close event handler.
windowGetOnClose :: Window a -> IO (IO ())

-- | Get the current destroy event handler.
windowGetOnDestroy :: Window a -> IO (IO ())

-- | Get the current delete event handler.
windowGetOnDelete :: Window a -> IO (IO ())

-- | Get the current create event handler.
windowGetOnCreate :: Window a -> IO (IO ())

-- | Get the current context menu event handler.
windowGetOnIdle :: Window a -> IO (IO Bool)

-- | Get the current timer handler.
windowGetOnTimer :: Window a -> IO (IO ())

-- | Get the current resize event handler.
windowGetOnSize :: Window a -> IO (IO ())

-- | Get the current focus event handler.
windowGetOnFocus :: Window a -> IO (Bool -> IO ())

-- | Get the current activate event handler.
windowGetOnActivate :: Window a -> IO (Bool -> IO ())

-- | Get the current paint event handler.
windowGetOnPaint :: Window a -> IO (DC () -> Rect -> IO ())

-- | Get the current <i>raw</i> paint event handler.
windowGetOnPaintRaw :: Window a -> IO (PaintDC () -> Rect -> [Rect] -> IO ())

-- | Get the current paint event handler.
windowGetOnPaintGc :: Window a -> IO (GCDC () -> Rect -> IO ())

-- | Get the current context menu event handler.
windowGetOnContextMenu :: Window a -> IO (IO ())

-- | Get the current scroll event handler of a window.
windowGetOnScroll :: Window a -> IO (EventScroll -> IO ())

-- | Get the current HTML event handler of a HTML window.
htmlWindowGetOnHtmlEvent :: WXCHtmlWindow a -> IO (EventHtml -> IO ())

-- | Get the current event handler for a certain menu.
evtHandlerGetOnMenuCommand :: EvtHandler a -> Id -> IO (IO ())

-- | Retrieve the current end process handler.
evtHandlerGetOnEndProcess :: EvtHandler a -> IO (Int -> Int -> IO ())

-- | Retrieve the current input stream handler.
evtHandlerGetOnInputSink :: EvtHandler b -> IO (String -> StreamStatus -> IO ())

-- | Get the current event handler for a taskbar icon.
evtHandlerGetOnTaskBarIconEvent :: EvtHandler a -> Id -> EventTaskBarIcon -> IO (IO ())

-- | Get the current print handler
printOutGetOnPrint :: WXCPrintout a -> IO (EventPrint -> IO ())

-- | Create a new <a>Timer</a> that is attached to a window. It is
--   automatically deleted when its owner is deleted (using
--   <a>windowAddOnDelete</a>). The owning window will receive timer events
--   (<a>windowOnTimer</a>). <i>Broken!</i> (use
--   'windowTimerCreate'\/'timerOnCommand' instead.)
windowTimerAttach :: Window a -> IO (Timer ())

-- | Create a new <a>TimerEx</a> timer. It is automatically deleted when
--   its owner is deleted (using <a>windowAddOnDelete</a>). React to timer
--   events using <a>timerOnCommand</a>.
windowTimerCreate :: Window a -> IO (TimerEx ())

-- | Set an event handler that is called on a timer tick. This works for
--   <a>TimerEx</a> objects.
timerOnCommand :: TimerEx a -> IO () -> IO ()

-- | Get the current timer event handler.
timerGetOnCommand :: TimerEx a -> IO (IO ())

-- | <tt>appRegisterIdle interval handler</tt> registers a global idle
--   event handler that is at least called every <tt>interval</tt>
--   milliseconds (and possible more). Returns a method that can be used to
--   unregister this handler (so that it doesn't take any resources
--   anymore). Multiple calls to this method chains the different idle
--   event handlers.
appRegisterIdle :: Int -> IO (IO ())
data EventCalendar
CalendarDayChanged :: (DateTime ()) -> EventCalendar
CalendarDoubleClicked :: (DateTime ()) -> EventCalendar
CalendarMonthChanged :: (DateTime ()) -> EventCalendar
CalendarSelectionChanged :: (DateTime ()) -> EventCalendar
CalendarWeekdayClicked :: Int -> EventCalendar
CalendarYearChanged :: (DateTime ()) -> EventCalendar
CalendarUnknown :: EventCalendar

-- | Set a calendar event handler.
calendarCtrlOnCalEvent :: CalendarCtrl a -> (EventCalendar -> IO ()) -> IO ()

-- | Get the current calendar event handler of a window.
calendarCtrlGetOnCalEvent :: CalendarCtrl a -> IO (EventCalendar -> IO ())

-- | The status of a stream (see <a>StreamBase</a>)
data StreamStatus

-- | No error.
StreamOk :: StreamStatus

-- | No more input.
StreamEof :: StreamStatus

-- | Read error.
StreamReadError :: StreamStatus

-- | Write error.
StreamWriteError :: StreamStatus

-- | Convert a stream status code into <a>StreamStatus</a>.
streamStatusFromInt :: Int -> StreamStatus

-- | The <tt>Modifiers</tt> indicate the meta keys that have been pressed
--   (<a>True</a>) or not (<a>False</a>).
data Modifiers
Modifiers :: !Bool -> !Bool -> !Bool -> !Bool -> Modifiers

-- | alt key down
[altDown] :: Modifiers -> !Bool

-- | shift key down
[shiftDown] :: Modifiers -> !Bool

-- | control key down
[controlDown] :: Modifiers -> !Bool

-- | meta key down
[metaDown] :: Modifiers -> !Bool

-- | Show modifiers, for example for use in menus.
showModifiers :: Modifiers -> String

-- | Construct a <a>Modifiers</a> structure with no meta keys pressed.
noneDown :: Modifiers

-- | Construct a <a>Modifiers</a> structure with just Shift meta key
--   pressed.
justShift :: Modifiers

-- | Construct a <a>Modifiers</a> structure with just Alt meta key pressed.
justAlt :: Modifiers

-- | Construct a <a>Modifiers</a> structure with just Ctrl meta key
--   pressed.
justControl :: Modifiers

-- | Construct a <a>Modifiers</a> structure with just Meta meta key
--   pressed.
justMeta :: Modifiers

-- | Test if no meta key was pressed.
isNoneDown :: Modifiers -> Bool

-- | Test if no shift, alt, or control key was pressed.
isNoShiftAltControlDown :: Modifiers -> Bool

-- | Mouse events. The <a>Point</a> gives the logical (unscrolled)
--   position.
data EventMouse

-- | Mouse was moved over the client area of the window
MouseMotion :: !Point -> !Modifiers -> EventMouse

-- | Mouse enters in the client area of the window
MouseEnter :: !Point -> !Modifiers -> EventMouse

-- | Mouse leaves the client area of the window
MouseLeave :: !Point -> !Modifiers -> EventMouse

-- | Mouse left button goes down
MouseLeftDown :: !Point -> !Modifiers -> EventMouse

-- | Mouse left button goes up
MouseLeftUp :: !Point -> !Modifiers -> EventMouse

-- | Mouse left button double click
MouseLeftDClick :: !Point -> !Modifiers -> EventMouse

-- | Mouse left button drag
MouseLeftDrag :: !Point -> !Modifiers -> EventMouse

-- | Mouse right button goes down
MouseRightDown :: !Point -> !Modifiers -> EventMouse

-- | Mouse right button goes up
MouseRightUp :: !Point -> !Modifiers -> EventMouse

-- | Mouse right button double click
MouseRightDClick :: !Point -> !Modifiers -> EventMouse

-- | Mouse right button drag (unsupported on most platforms)
MouseRightDrag :: !Point -> !Modifiers -> EventMouse

-- | Mouse middle button goes down
MouseMiddleDown :: !Point -> !Modifiers -> EventMouse

-- | Mouse middle button goes up
MouseMiddleUp :: !Point -> !Modifiers -> EventMouse

-- | Mouse middle button double click
MouseMiddleDClick :: !Point -> !Modifiers -> EventMouse

-- | Mouse middle button drag (unsupported on most platforms)
MouseMiddleDrag :: !Point -> !Modifiers -> EventMouse

-- | Mouse wheel rotation. (Bool is True for a downward rotation)
MouseWheel :: !Bool -> !Point -> !Modifiers -> EventMouse

-- | Show an <a>EventMouse</a> in a user friendly way.
showMouse :: EventMouse -> String

-- | Extract the position from a <a>MouseEvent</a>.
mousePos :: EventMouse -> Point

-- | Extract the modifiers from a <a>MouseEvent</a>.
mouseModifiers :: EventMouse -> Modifiers

-- | A keyboard event contains the key, the modifiers and the focus point.
data EventKey
EventKey :: !Key -> !Modifiers -> !Point -> EventKey

-- | A <a>Key</a> represents a single key on a keyboard.
data Key

-- | An ascii code.
KeyChar :: !Char -> Key

-- | An unknown virtual key.
KeyOther :: !KeyCode -> Key
KeyBack :: Key
KeyTab :: Key
KeyReturn :: Key
KeyEscape :: Key
KeySpace :: Key
KeyDelete :: Key
KeyInsert :: Key
KeyEnd :: Key
KeyHome :: Key
KeyLeft :: Key
KeyUp :: Key
KeyRight :: Key
KeyDown :: Key
KeyPageUp :: Key
KeyPageDown :: Key
KeyStart :: Key
KeyClear :: Key
KeyShift :: Key
KeyAlt :: Key
KeyControl :: Key
KeyMenu :: Key
KeyPause :: Key
KeyCapital :: Key
KeyHelp :: Key
KeySelect :: Key
KeyPrint :: Key
KeyExecute :: Key
KeySnapshot :: Key
KeyCancel :: Key
KeyLeftButton :: Key
KeyRightButton :: Key
KeyMiddleButton :: Key
KeyNum0 :: Key
KeyNum1 :: Key
KeyNum2 :: Key
KeyNum3 :: Key
KeyNum4 :: Key
KeyNum5 :: Key
KeyNum6 :: Key
KeyNum7 :: Key
KeyNum8 :: Key
KeyNum9 :: Key
KeyMultiply :: Key
KeyAdd :: Key
KeySeparator :: Key
KeySubtract :: Key
KeyDecimal :: Key
KeyDivide :: Key
KeyF1 :: Key
KeyF2 :: Key
KeyF3 :: Key
KeyF4 :: Key
KeyF5 :: Key
KeyF6 :: Key
KeyF7 :: Key
KeyF8 :: Key
KeyF9 :: Key
KeyF10 :: Key
KeyF11 :: Key
KeyF12 :: Key
KeyF13 :: Key
KeyF14 :: Key
KeyF15 :: Key
KeyF16 :: Key
KeyF17 :: Key
KeyF18 :: Key
KeyF19 :: Key
KeyF20 :: Key
KeyF21 :: Key
KeyF22 :: Key
KeyF23 :: Key
KeyF24 :: Key
KeyNumLock :: Key
KeyScroll :: Key

-- | Extract the key from a keyboard event.
keyKey :: EventKey -> Key

-- | Extract the modifiers from a keyboard event.
keyModifiers :: EventKey -> Modifiers

-- | Extract the position from a keyboard event.
keyPos :: EventKey -> Point

-- | Show a key for use in menus for example.
showKey :: Key -> String

-- | Show a key/modifiers combination, for example for use in menus.
showKeyModifiers :: Key -> Modifiers -> String

-- | Drag results
data DragResult
DragError :: DragResult
DragNone :: DragResult
DragCopy :: DragResult
DragMove :: DragResult
DragLink :: DragResult
DragCancel :: DragResult
DragUnknown :: DragResult

-- | Set an event handler that is called when the drop target can be filled
--   with data. This function require to use <a>dropTargetGetData</a> in
--   your event handler to fill data.
dropTargetOnData :: DropTarget a -> (Point -> DragResult -> IO DragResult) -> IO ()

-- | Set an event handler for an drop' command in a drop' target.
dropTargetOnDrop :: DropTarget a -> (Point -> IO Bool) -> IO ()

-- | Set an event handler for an enter command in a drop' target.
dropTargetOnEnter :: DropTarget a -> (Point -> DragResult -> IO DragResult) -> IO ()

-- | Set an event handler for a drag over command in a drop' target.
dropTargetOnDragOver :: DropTarget a -> (Point -> DragResult -> IO DragResult) -> IO ()

-- | Set an event handler for a leave command in a drop' target.
dropTargetOnLeave :: DropTarget a -> (IO ()) -> IO ()
data DragMode
CopyOnly :: DragMode
AllowMove :: DragMode
Default :: DragMode

-- | Set an event handler for a drag &amp; drop command between drag source
--   window and drop target. You must set <tt>dropTarget</tt> before use
--   this action. And If you use <a>fileDropTarget</a> or
--   <a>textDropTarget</a>, you need not use this.
dragAndDrop :: DropSource a -> DragMode -> (DragResult -> IO ()) -> IO ()

-- | Set an event handler that is called when files are dropped in target
--   window.
fileDropTarget :: Window a -> (Point -> [String] -> IO ()) -> IO ()

-- | Set an event handler that is called when text is dropped in target
--   window.
textDropTarget :: Window a -> TextDataObject b -> (Point -> String -> IO ()) -> IO ()

-- | Scroll events.
data EventScroll

-- | scroll to top
ScrollTop :: !Orientation -> !Int -> EventScroll

-- | scroll to bottom
ScrollBottom :: !Orientation -> !Int -> EventScroll

-- | scroll line up
ScrollLineUp :: !Orientation -> !Int -> EventScroll

-- | scroll line down
ScrollLineDown :: !Orientation -> !Int -> EventScroll

-- | scroll page up
ScrollPageUp :: !Orientation -> !Int -> EventScroll

-- | scroll page down
ScrollPageDown :: !Orientation -> !Int -> EventScroll

-- | frequent event when user drags the thumbtrack
ScrollTrack :: !Orientation -> !Int -> EventScroll

-- | thumbtrack is released
ScrollRelease :: !Orientation -> !Int -> EventScroll

-- | The orientation of a widget.
data Orientation
Horizontal :: Orientation
Vertical :: Orientation

-- | Get the orientation of a scroll event.
scrollOrientation :: EventScroll -> Orientation

-- | Get the position of the scroll bar.
scrollPos :: EventScroll -> Int

-- | Tree control events
data EventTree

-- | Drag with right button. Call <tt>IO</tt> action to continue dragging.
TreeBeginRDrag :: TreeItem -> !Point -> (IO ()) -> EventTree
TreeBeginDrag :: TreeItem -> !Point -> (IO ()) -> EventTree
TreeEndDrag :: TreeItem -> !Point -> EventTree

-- | Edit a label. Call <tt>IO</tt> argument to disallow the edit.
TreeBeginLabelEdit :: TreeItem -> String -> (IO ()) -> EventTree

-- | End edit. <tt>Bool</tt> is <a>True</a> when the edit was cancelled.
--   Call the <tt>IO</tt> argument to veto the action.
TreeEndLabelEdit :: TreeItem -> String -> Bool -> (IO ()) -> EventTree
TreeDeleteItem :: TreeItem -> EventTree
TreeItemActivated :: TreeItem -> EventTree
TreeItemCollapsed :: TreeItem -> EventTree

-- | Call the <tt>IO</tt> argument to veto.
TreeItemCollapsing :: TreeItem -> (IO ()) -> EventTree

-- | Call the <tt>IO</tt> argument to veto.
TreeItemExpanding :: TreeItem -> (IO ()) -> EventTree
TreeItemExpanded :: TreeItem -> EventTree
TreeItemRightClick :: TreeItem -> EventTree
TreeItemMiddleClick :: TreeItem -> EventTree
TreeSelChanged :: TreeItem -> TreeItem -> EventTree

-- | Call the <tt>IO</tt> argument to veto.
TreeSelChanging :: TreeItem -> TreeItem -> (IO ()) -> EventTree
TreeKeyDown :: TreeItem -> EventKey -> EventTree
TreeUnknown :: EventTree

-- | List control events.
data EventList

-- | Drag with left mouse button. Call <tt>IO</tt> argument to veto this
--   action.
ListBeginDrag :: !ListIndex -> !Point -> (IO ()) -> EventList

-- | Drag with right mouse button. <tt>IO</tt> argument to veto this
--   action.
ListBeginRDrag :: !ListIndex -> !Point -> (IO ()) -> EventList

-- | Edit label. Call <tt>IO</tt> argument to veto this action.
ListBeginLabelEdit :: !ListIndex -> (IO ()) -> EventList

-- | End editing label. <tt>Bool</tt> argument is <a>True</a> when
--   cancelled. Call <tt>IO</tt> argument to veto this action.
ListEndLabelEdit :: !ListIndex -> !Bool -> (IO ()) -> EventList
ListDeleteItem :: !ListIndex -> EventList
ListDeleteAllItems :: EventList
ListItemSelected :: !ListIndex -> EventList
ListItemDeselected :: !ListIndex -> EventList

-- | Activate (ENTER or double click)
ListItemActivated :: !ListIndex -> EventList
ListItemFocused :: !ListIndex -> EventList
ListItemMiddleClick :: !ListIndex -> EventList
ListItemRightClick :: !ListIndex -> EventList
ListInsertItem :: !ListIndex -> EventList

-- | Column has been clicked. (-1 when clicked in control header outside
--   any column)
ListColClick :: !Int -> EventList
ListColRightClick :: !Int -> EventList

-- | Column is dragged. Index is of the column left of the divider that is
--   being dragged. Call <tt>IO</tt> argument to veto this action.
ListColBeginDrag :: !Int -> (IO ()) -> EventList
ListColDragging :: !Int -> EventList

-- | Column has been dragged. Call <tt>IO</tt> argument to veto this
--   action.
ListColEndDrag :: !Int -> (IO ()) -> EventList
ListKeyDown :: !Key -> EventList

-- | (Inclusive) range of list items that are advised to be cached.
ListCacheHint :: !Int -> !Int -> EventList
ListUnknown :: EventList

-- | Type synonym for documentation purposes.
type ListIndex = Int

-- | Grid events.
data EventGrid
GridCellMouse :: !Row -> !Column -> !EventMouse -> EventGrid
GridLabelMouse :: !Row -> !Column -> !EventMouse -> EventGrid
GridCellChange :: !Row -> !Column -> !(IO ()) -> EventGrid
GridCellSelect :: !Row -> !Column -> !(IO ()) -> EventGrid
GridCellDeSelect :: !Row -> !Column -> !(IO ()) -> EventGrid
GridEditorHidden :: !Row -> !Column -> !(IO ()) -> EventGrid
GridEditorShown :: !Row -> !Column -> !(IO ()) -> EventGrid
GridEditorCreated :: !Row -> !Column -> (IO (Control ())) -> EventGrid
GridColSize :: !Column -> !Point -> !Modifiers -> (IO ()) -> EventGrid
GridRowSize :: !Row -> !Point -> !Modifiers -> (IO ()) -> EventGrid
GridRangeSelect :: !Row -> !Column -> !Row -> !Column -> !Rect -> !Modifiers -> !(IO ()) -> EventGrid
GridRangeDeSelect :: !Row -> !Column -> !Row -> !Column -> !Rect -> !Modifiers -> !(IO ()) -> EventGrid
GridUnknown :: !Row -> !Column -> !Int -> EventGrid
type Row = Int
type Column = Int

-- | HTML window events
data EventHtml

-- | A <i>cell</i> is clicked. Contains the cell <i>id</i> attribute value,
--   the mouse event and the logical coordinates.
HtmlCellClicked :: String -> EventMouse -> Point -> EventHtml

-- | The mouse hovers over a cell. Contains the cell <i>id</i> attribute
--   value.
HtmlCellHover :: String -> EventHtml

-- | A link is clicked. Contains the hyperlink, the frame target, the cell
--   <i>id</i> attribute value, the mouse event, and the logical
--   coordinates.
HtmlLinkClicked :: String -> String -> String -> EventMouse -> Point -> EventHtml

-- | Called when a <tt><a>title</a></tt> tag is parsed.
HtmlSetTitle :: String -> EventHtml

-- | Unrecognised HTML event
HtmlUnknown :: EventHtml
data EventTaskBarIcon
TaskBarIconMove :: EventTaskBarIcon
TaskBarIconLeftDown :: EventTaskBarIcon
TaskBarIconLeftUp :: EventTaskBarIcon
TaskBarIconRightDown :: EventTaskBarIcon
TaskBarIconRightUp :: EventTaskBarIcon
TaskBarIconLeftDClick :: EventTaskBarIcon
TaskBarIconRightDClick :: EventTaskBarIcon
TaskBarIconUnknown :: EventTaskBarIcon
data EventWizard
WizardPageChanged :: Direction -> EventWizard
WizardPageChanging :: Direction -> Veto -> EventWizard
WizardPageShown :: EventWizard
WizardCancel :: Veto -> EventWizard
WizardHelp :: EventWizard
WizardFinished :: EventWizard
WizardUnknown :: EventWizard
data Direction
Backward :: Direction
Forward :: Direction

-- | PropertyGrid control events.
data EventPropertyGrid
PropertyGridHighlighted :: (Maybe (PGProperty ())) -> EventPropertyGrid
PropertyGridChanged :: (PGProperty ()) -> EventPropertyGrid
PropertyGridUnknown :: EventPropertyGrid

-- | Represents a page in the AuiNotebook for a
newtype WindowId
WindowId :: Int -> WindowId
data WindowSelection
WindowSelection :: Int -> (Maybe PageWindow) -> WindowSelection
data PageWindow
PageWindow :: WindowId -> (Window ()) -> PageWindow
[winId] :: PageWindow -> WindowId
[win] :: PageWindow -> (Window ())

-- | AuiNotebook events.
data EventAuiNotebook
AuiNotebookAllowDnd :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookBeginDrag :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookBgDclick :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookButton :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookDragDone :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookDragMotion :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookEndDrag :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookPageChanged :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookPageChanging :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookPageClose :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookPageClosed :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookTabMiddleDown :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookTabMiddleUp :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookTabRightDown :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookTabRightUp :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiNotebookUnknown :: EventAuiNotebook
AuiTabCtrlPageChanging :: WindowSelection -> WindowSelection -> EventAuiNotebook
[newSel] :: EventAuiNotebook -> WindowSelection
[oldSel] :: EventAuiNotebook -> WindowSelection
AuiTabCtrlUnknown :: EventAuiNotebook
noWindowSelection :: WindowSelection

-- | use when you want to handle just wxAuiNotebook
auiNotebookOnAuiNotebookEvent :: String -> EventId -> AuiNotebook a -> (EventAuiNotebook -> IO ()) -> IO ()

-- | use when you want to handle both wxAuiNotebook and wxAuiTabCtrl
auiNotebookOnAuiNotebookEventEx :: String -> EventId -> AuiNotebook a -> (EventAuiNotebook -> IO ()) -> IO ()
auiNotebookGetOnAuiNotebookEvent :: EventId -> AuiNotebook a -> IO (EventAuiNotebook -> IO ())

-- | Pass the event on the next <i>wxWidgets</i> event handler, either on
--   this window or its parent. Always call this method when you do not
--   process the event. (This function just call <a>skipCurrentEvent</a>).
propagateEvent :: IO ()

-- | Pass the event on the next <i>wxWidgets</i> event handler, either on
--   this window or its parent. Always call this method when you do not
--   process the event. <i>Note:</i> The use of <a>propagateEvent</a> is
--   encouraged as it is a much better name than <a>skipCurrentEvent</a>.
--   This function name is just for better compatibility with wxWidgets :-)
skipCurrentEvent :: IO ()

-- | Do something with the current event <i>if</i> we are calling from an
--   event handler.
withCurrentEvent :: (Event () -> IO ()) -> IO ()

-- | Installs an init handler and starts the event loop. Note: the closure
--   is deleted when initialization is complete, and than the Haskell init
--   function is started.
appOnInit :: IO () -> IO ()

-- | Attach a Haskell value to tree item data. The <a>IO</a> action
--   executed when the object is deleted.
treeCtrlSetItemClientData :: TreeCtrl a -> TreeItem -> IO () -> b -> IO ()

-- | Use attached Haskell data locally in a type-safe way.
evtHandlerWithClientData :: EvtHandler a -> b -> ((b -> IO ()) -> IO b -> IO c) -> IO c

-- | Attach a Haskell value to an object derived from <a>EvtHandler</a>.
--   The <a>IO</a> action executed when the object is deleted.
evtHandlerSetClientData :: EvtHandler a -> IO () -> b -> IO ()

-- | Use attached Haskell data locally. This makes it type-safe.
objectWithClientData :: WxObject a -> b -> ((b -> IO ()) -> IO b -> IO c) -> IO c

-- | Attach Haskell value to an arbitrary object. The <a>IO</a> action is
--   executed when the object is deleted. Note:
--   <a>evtHandlerSetClientData</a> is preferred when possible.
objectSetClientData :: WxObject a -> IO () -> b -> IO ()

-- | Read the input from an <a>InputSinkEvent</a>.
inputSinkEventLastString :: InputSinkEvent a -> IO String

-- | A low-level virtual key code.
type KeyCode = Int

-- | Tranform modifiers into an accelerator modifiers code.
modifiersToAccelFlags :: Modifiers -> Int

-- | A virtual key code to a key.
keyCodeToKey :: KeyCode -> Key

-- | From a key to a virtual key code.
keyToKeyCode :: Key -> KeyCode

-- | Set a generic event handler on a certain window.
windowOnEvent :: Window a -> [EventId] -> handler -> (Event () -> IO ()) -> IO ()

-- | Set a generic event handler on a certain window. Takes also a
--   computation that is run when the event handler is destroyed -- the
--   argument is <a>True</a> if the owner is deleted, and <a>False</a> if
--   the event handler is disconnected for example.
windowOnEventEx :: Window a -> [EventId] -> handler -> (Bool -> IO ()) -> (Event () -> IO ()) -> IO ()

-- | Type synonym to make the type signatures shorter for the documentation
--   :-)
type OnEvent = (Bool -> IO ()) -> (Event () -> IO ()) -> IO ()

-- | Sets a generic event handler, just as <a>evtHandlerOnEventConnect</a>
--   but first disconnects any event handlers for the same kind of events.
evtHandlerOnEvent :: EvtHandler a -> Id -> Id -> [EventId] -> handler -> OnEvent

-- | Sets a generic event handler on an <a>EvtHandler</a> object. The call
--   (<tt>evtHandlerOnEventConnect firstId lastId eventIds state destroy
--   handler object</tt>) sets an event handler <tt>handler</tt> on
--   <tt>object</tt>. The eventhandler gets called whenever an event
--   happens that is in the list <tt>eventIds</tt> on an object with an
--   <a>Id</a> between <tt>firstId</tt> and <tt>lastId</tt> (use -1 for any
--   object). The <tt>state</tt> is any kind of Haskell data that is
--   attached to this handler. It can be retrieved via
--   <a>unsafeGetHandlerState</a>. Normally, the <tt>state</tt> is the
--   event handler itself. This allows the current event handler to be
--   retrieved via calls to <a>buttonGetOnCommand</a> for example. The
--   <tt>destroy</tt> action is called when the event handler is destroyed.
--   Its argument is <a>True</a> when the owner is deleted, and
--   <a>False</a> if the event handler is just disconnected.
evtHandlerOnEventConnect :: EvtHandler a -> Id -> Id -> [EventId] -> state -> OnEvent

-- | Retrieve an attached Haskell value to a tree item, previously attached
--   with <a>treeCtrlSetItemClientData</a>.
unsafeTreeCtrlGetItemClientData :: TreeCtrl a -> TreeItem -> IO (Maybe b)

-- | Retrieve an attached Haskell value, previously attached with
--   <a>evtHandlerSetClientData</a>.
unsafeEvtHandlerGetClientData :: EvtHandler a -> IO (Maybe b)

-- | Retrieve an attached Haskell value.
unsafeObjectGetClientData :: WxObject a -> IO (Maybe b)

-- | Retrieves the state associated with a certain event handler. If no
--   event handler is defined for this kind of event or <a>Id</a>, the
--   default value is returned.
unsafeGetHandlerState :: EvtHandler a -> Id -> EventId -> b -> IO b

-- | Retrieve the event handler state for a certain event on a window.
unsafeWindowGetHandlerState :: Window a -> EventId -> b -> IO b
instance GHC.Classes.Eq Graphics.UI.WXCore.Events.EventAuiNotebook
instance GHC.Show.Show Graphics.UI.WXCore.Events.EventAuiNotebook
instance GHC.Classes.Eq Graphics.UI.WXCore.Events.WindowSelection
instance GHC.Show.Show Graphics.UI.WXCore.Events.WindowSelection
instance GHC.Classes.Eq Graphics.UI.WXCore.Events.PageWindow
instance GHC.Show.Show Graphics.UI.WXCore.Events.PageWindow
instance GHC.Show.Show Graphics.UI.WXCore.Events.WindowId
instance GHC.Classes.Eq Graphics.UI.WXCore.Events.WindowId
instance GHC.Classes.Eq Graphics.UI.WXCore.Events.EventTaskBarIcon
instance GHC.Show.Show Graphics.UI.WXCore.Events.EventTaskBarIcon
instance GHC.Show.Show Graphics.UI.WXCore.Events.DragMode
instance GHC.Classes.Eq Graphics.UI.WXCore.Events.DragMode
instance GHC.Show.Show Graphics.UI.WXCore.Events.DragResult
instance GHC.Classes.Eq Graphics.UI.WXCore.Events.DragResult
instance GHC.Show.Show Graphics.UI.WXCore.Events.EventKey
instance GHC.Classes.Eq Graphics.UI.WXCore.Events.EventKey
instance GHC.Classes.Eq Graphics.UI.WXCore.Events.Key
instance GHC.Classes.Eq Graphics.UI.WXCore.Events.EventMouse
instance GHC.Classes.Eq Graphics.UI.WXCore.Events.Modifiers
instance GHC.Show.Show Graphics.UI.WXCore.Events.StreamStatus
instance GHC.Classes.Eq Graphics.UI.WXCore.Events.StreamStatus
instance GHC.Show.Show Graphics.UI.WXCore.Events.EventScroll
instance GHC.Show.Show Graphics.UI.WXCore.Events.Orientation
instance GHC.Classes.Eq Graphics.UI.WXCore.Events.Orientation
instance GHC.Show.Show Graphics.UI.WXCore.Events.EventSTC
instance GHC.Show.Show Graphics.UI.WXCore.Events.EventHtml
instance GHC.Show.Show Graphics.UI.WXCore.Events.Modifiers
instance GHC.Show.Show Graphics.UI.WXCore.Events.EventMouse
instance GHC.Show.Show Graphics.UI.WXCore.Events.Key


-- | Printer abstraction layer. See <tt>samples/wx/Print.hs</tt> for a
--   demo.
--   
--   The application should create a <a>pageSetupDialog</a> to hold the
--   printer settings of the user.
--   
--   <pre>
--   f &lt;- frame [text := "Print demo"]                               
--   
--   -- Create a pageSetup dialog with an initial margin of 25 mm.
--   pageSetup &lt;- pageSetupDialog f 25
--   </pre>
--   
--   The dialog can be shown using <a>pageSetupShowModal</a>. Furthermore,
--   the function <a>printDialog</a> and <a>printPreview</a> can be used to
--   show a print dialog and preview window.
--   
--   <pre>
--   mprint   &lt;- menuItem file 
--                  [ text := "&amp;Print..."
--                  , help := "Print a test"
--                  , on command := printDialog pageSetup "Test"  pageFun printFun
--                  ]
--   mpreview &lt;- menuItem file 
--                  [ text := "&amp;Print preview"
--                  , help := "Print preview"
--                  , on command := printPreview pageSetup "Test" pageFun printFun 
--   </pre>
--   
--   Those functions take a <a>PageFunction</a> and <a>PrintFunction</a>
--   respectively that get called to determine the number of needed pages
--   and to draw on the printer DC respectively. The framework takes
--   automatic care of printer margins, preview scaling etc.
module Graphics.UI.WXCore.Print

-- | Create a (hidden) page setup dialog that remembers printer settings.
--   It is a parameter to the functions <a>printDialog</a> and
--   <a>printPreview</a>. The creation function takes a parent frame and
--   the initial page margins (in millimeters) as an argument.
pageSetupDialog :: Frame a -> Int -> IO (PageSetupDialog ())

-- | Show the page setup dialog
pageSetupShowModal :: PageSetupDialog a -> IO ()

-- | Show a print dialog.
printDialog :: PageSetupDialog a -> String -> PageFunction -> PrintFunction -> IO ()

-- | Show a preview window
printPreview :: PageSetupDialog a -> String -> PageFunction -> PrintFunction -> IO ()

-- | Return a page range given page info, print info, and the printable
--   size. The printable size is the number of pixels available for
--   printing without the page margins.
type PageFunction = PageInfo -> PrintInfo -> Size -> (Int, Int)

-- | Print a page given page info, print info, the printable size, the
--   printer device context and the current page. The printable size is the
--   number of pixels available for printing without the page margins
type PrintFunction = PageInfo -> PrintInfo -> Size -> DC () -> Int -> IO ()

-- | Information from the page setup dialog. All measurements are in
--   millimeters.
data PageInfo
PageInfo :: Size -> Rect -> PageInfo

-- | The page size (in millimeters)
[pageSize] :: PageInfo -> Size

-- | The available page area (=margins) (in millimeters)
[pageArea] :: PageInfo -> Rect

-- | Printer information.
data PrintInfo
PrintInfo :: Size -> Size -> Size -> PrintInfo

-- | screen pixels per inch
[screenPPI] :: PrintInfo -> Size

-- | printer pixels per inch
[printerPPI] :: PrintInfo -> Size

-- | printable area (in pixels) = PageInfo pageSize minus printer margins
[printPageSize] :: PrintInfo -> Size

-- | Get page info
pageSetupDataGetPageInfo :: PageSetupDialogData a -> IO PageInfo

-- | Set page info
pageSetupDataSetPageInfo :: PageSetupDialogData a -> PageInfo -> IO ()

-- | Extract print info
printOutGetPrintInfo :: Printout a -> IO PrintInfo

-- | Get the parent frame of a <a>PageSetupDialog</a>.
pageSetupDialogGetFrame :: PageSetupDialog a -> IO (Frame ())
instance GHC.Show.Show Graphics.UI.WXCore.Print.PrintInfo
instance GHC.Show.Show Graphics.UI.WXCore.Print.PageInfo


-- | Process and stream wrappers.
module Graphics.UI.WXCore.Process

-- | Type of input receiver function.
type OnReceive = String -> StreamStatus -> IO ()

-- | Type of end-of-process event handler. Gets the exitcode as its
--   argument.
type OnEndProcess = Int -> IO ()

-- | (<tt>processExecAsyncTimer command processOutputOnEnd onEndProcess
--   onOutput onErrorOutput parent</tt>) starts the <tt>command</tt>
--   asynchronously. The handler <tt>onEndProcess</tt> is called when the
--   process terminates. <tt>onOutput</tt> receives the output from
--   <tt>stdout</tt>, while <tt>onErrorOutput</tt> receives output from
--   <tt>stderr</tt>. If <tt>processOutputOnEnd</tt> is <a>True</a>, the
--   remaining output of a terminated process is processed (calling
--   <tt>onOutput</tt>). The call returns a triple
--   (<tt>send,process,pid</tt>): The <tt>send</tt> function is used to
--   send input to the <tt>stdin</tt> pipe of the process. The process
--   object is returned in <tt>process</tt> and the process identifier in
--   <tt>pid</tt>.
--   
--   Note: The method uses idle event timers to process the output
--   channels. On many platforms this is much more trustworthy and robust
--   than the <a>processExecAsync</a> that uses threads (which can cause
--   all kinds of portability problems).
processExecAsyncTimed :: Window a -> String -> Bool -> OnEndProcess -> OnReceive -> OnReceive -> IO (String -> IO StreamStatus, Process (), Int)

-- | deprecated: use <a>processExecAsyncTimed</a> instead (if possible).
--   (<tt>processExecAsync command bufferSize onEndProcess onOutput
--   onErrorOutput parent</tt>) starts the <tt>command</tt> asynchronously.
--   The handler <tt>onEndProcess</tt> is called when the process
--   terminates. <tt>onOutput</tt> receives the output from
--   <tt>stdout</tt>, while <tt>onErrorOutput</tt> receives output from
--   <tt>stderr</tt>. The <tt>bufferSize</tt> determines the intermediate
--   buffer used to cache the output from those channels. The calls returns
--   a triple (<tt>send,process,pid</tt>): The <tt>send</tt> function is
--   used to send input to the <tt>stdin</tt> pipe of the process. The
--   process object is returned in <tt>process</tt> and the process
--   identifier in <tt>pid</tt>.

-- | <i>Deprecated: Use processExecAsyncTimed instead (if possible)</i>
processExecAsync :: Window a -> String -> Int -> OnEndProcess -> OnReceive -> OnReceive -> IO (String -> IO (), Process (), Int)

-- | The status of a stream (see <a>StreamBase</a>)
data StreamStatus

-- | No error.
StreamOk :: StreamStatus

-- | No more input.
StreamEof :: StreamStatus

-- | Read error.
StreamReadError :: StreamStatus

-- | Write error.
StreamWriteError :: StreamStatus

-- | Return the status of the stream
streamBaseStatus :: StreamBase a -> IO StreamStatus

-- | Get the entire contents of an input stream. The content is returned as
--   a lazy stream (like <tt>hGetContents</tt>).
inputStreamGetContents :: InputStream a -> IO String

-- | Get the entire contents of an input stream. The content is returned as
--   a lazy stream (like <tt>hGetContents</tt>). The contents are returned
--   in lazy <i>batches</i>, whose size is determined by the first
--   parameter.
inputStreamGetContentsN :: InputStream a -> Int -> IO String

-- | <tt>inputStreamGetLine s n</tt> reads a line of at most <tt>n</tt>
--   characters from the input stream (potentially waiting for input). The
--   function does automatic end-of-line conversion. If the line ends with
--   <tt>\n</tt>, an entire line has been read, otherwise, either the
--   maximum has been reached, or no more input was available.
inputStreamGetLine :: InputStream a -> Int -> IO String

-- | The expression (<tt>inputStreamGetString n input</tt>) reads a string
--   of maximally <tt>n</tt> characters from <tt>input</tt>.
inputStreamGetString :: InputStream a -> Int -> IO String

-- | Read a single character from the input. (equals
--   <a>inputStreamGetC</a>)
inputStreamGetChar :: InputStream a -> IO Char

-- | Write a string to an output stream, potentially blocking until all
--   output has been written.
outputStreamPutString :: OutputStream a -> String -> IO ()

-- | <tt>inputStreamGetLineNoWait stream n</tt> reads a line of at most
--   <tt>n</tt> characters from the input stream in a non-blocking way. The
--   function does automatic end-of-line conversion. If the line ends with
--   <tt>\n</tt>, an entire line has been read, otherwise, either the
--   maximum has been reached, or no more input was available.
inputStreamGetLineNoWait :: InputStream a -> Int -> IO String

-- | <tt>inputStreamGetStringNoWait stream n</tt> reads a line of at most
--   <tt>n</tt> characters from the input stream in a non-blocking way.
inputStreamGetStringNoWait :: InputStream a -> Int -> IO String

-- | Read a single character from the input, returning <tt>Nothing</tt> if
--   no input was available (using <a>inputStreamCanRead</a>).
inputStreamGetCharNoWait :: InputStream a -> IO (Maybe Char)

-- | Write a string to an output stream, returning the number of bytes
--   actually written.
outputStreamPutStringNoWait :: OutputStream a -> String -> IO Int


module Graphics.UI.WXCore.Controls

-- | Set a text control as a log target.
textCtrlMakeLogActiveTarget :: TextCtrl a -> IO ()

-- | Sets the active log target and deletes the old one.
logDeleteAndSetActiveTarget :: Log a -> IO ()

-- | Represents the children of a tree control.
data TreeCookie

-- | Get a <tt>TreeCookie</tt> to iterate through the children of tree
--   node.
treeCtrlGetChildCookie :: TreeCtrl a -> TreeItem -> IO TreeCookie

-- | Get the next child of a tree node. Returns <a>Nothing</a> when the end
--   of the list is reached. This also invalidates the tree cookie.
treeCtrlGetNextChild2 :: TreeCtrl a -> TreeCookie -> IO (Maybe TreeItem)

-- | Iterate on the list of children of a tree node.
treeCtrlWithChildren :: TreeCtrl a -> TreeItem -> (TreeItem -> IO b) -> IO [b]

-- | Get the children of tree node.
treeCtrlGetChildren :: TreeCtrl a -> TreeItem -> IO [TreeItem]

-- | Get the selections of a tree control.
treeCtrlGetSelections2 :: TreeCtrl a -> IO [TreeItem]

-- | Return the current selection in a listbox.
listBoxGetSelectionList :: ListBox a -> IO [Int]

-- | Use a <a>clipboardSetData</a> or <a>clipboardGetData</a> in this
--   function. But don't use long computation in this function. Because
--   this function encloses the computation with <a>clipboardOpen</a> and
--   <a>clipboardClose</a>, and wxHaskell uses Global clipboard on your
--   environment. So, long computation causes problem.
execClipBoardData :: Clipboard a -> (Clipboard a -> IO b) -> IO b

-- | (<tt>enumerateFontsList encoding fixedWidthOnly</tt>) return the Names
--   of the available fonts in a list. To get all available fonts call
--   <tt>enumerateFontsList wxFONTENCODING_SYSTEM False</tt>. See also
--   <tt>enumerateFonts</tt>.
enumerateFontsList :: Int -> Bool -> IO [String]

-- | (<tt>enumerateFonts encoding fixedWidthOnly f</tt> calls successive
--   <tt>f name</tt> for the fonts installed on the system. It stops if the
--   function return False. See also <tt>enumerateFontsList</tt>.
enumerateFonts :: Int -> Bool -> (String -> IO Bool) -> IO ()

-- | This function just left for backward-compatiblity. Update your code to
--   use <a>wxcAppMilliSleep</a> instead.

-- | <i>Deprecated: Use wxcAppMilliSleep instead</i>
wxcAppUSleep :: Int -> IO ()


-- | The <a>WXCore</a> module is the interface to the core wxWidgets
--   functionality.
--   
--   The library contains the automatically generated interface to the raw
--   wxWidgets API in <a>Graphics.UI.WXCore.WxcClasses</a>,
--   <a>Graphics.UI.WXCore.WxcClassTypes</a>, and
--   <a>Graphics.UI.WXCore.WxcDefs</a>.
--   
--   The other helper modules contain convenient wrappers but only use
--   functional abstractions: no type classes or other fancy Haskell
--   features. (The higher-level <a>Graphics.UI.WX</a> module provides such
--   abstractions.)
module Graphics.UI.WXCore

-- | Start the event loop. Takes an initialisation action as argument.
--   Except for <a>run</a>, the functions in the WX library can only be
--   called from this initialisation action or from event handlers,
--   otherwise bad things will happen :-)
run :: IO a -> IO ()
