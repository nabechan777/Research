-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package Research
@version 0.1.0.0

module Database.Relational.Query.PostgreSQL
runRelation :: (ToSql SqlValue p, IConnection conn, FromSql SqlValue a) => conn -> Relation p a -> p -> IO [a]

module Database.Record.TH.PostgreSQL
defineTable :: DatabaseName -> TableName -> Q [Dec]

module Database.Relations.Course
data Course
Course :: !Int32 -> !(Maybe Int32) -> !(Maybe Int32) -> !(Maybe Int32) -> Course
[courseId] :: Course -> !Int32
[studentId] :: Course -> !(Maybe Int32)
[lectureId] :: Course -> !(Maybe Int32)
[score] :: Course -> !(Maybe Int32)
updateCourse :: KeyUpdate Int32 Course
selectCourse :: Query Int32 Course
score' :: Pi Course (Maybe Int32)
lectureId' :: Pi Course (Maybe Int32)
studentId' :: Pi Course (Maybe Int32)
courseId' :: Pi Course Int32
insertQueryCourse :: forall p_ah4S. Relation p_ah4S Course -> InsertQuery p_ah4S
insertCourse :: Insert Course
course :: Relation () Course
tableOfCourse :: Table Course
columnOffsetsCourse :: Array Int Int
instance GHC.Generics.Generic Database.Relations.Course.Course
instance GHC.Show.Show Database.Relations.Course.Course
instance Database.Record.Persistable.PersistableWidth Database.Relations.Course.Course
instance Database.Relational.Query.ProjectableClass.ProductConstructor (GHC.Int.Int32 -> GHC.Base.Maybe GHC.Int.Int32 -> GHC.Base.Maybe GHC.Int.Int32 -> GHC.Base.Maybe GHC.Int.Int32 -> Database.Relations.Course.Course)
instance Database.Relational.Query.ProjectableClass.ShowConstantTermsSQL Database.Relations.Course.Course
instance Database.Relational.Query.Table.TableDerivable Database.Relations.Course.Course
instance Database.Record.KeyConstraint.HasColumnConstraint Database.Record.KeyConstraint.Primary Database.Relations.Course.Course
instance Database.Record.KeyConstraint.HasKeyConstraint Database.Record.KeyConstraint.Primary Database.Relations.Course.Course
instance Database.Relational.Query.Constraint.HasConstraintKey Database.Record.KeyConstraint.Primary Database.Relations.Course.Course GHC.Int.Int32
instance Database.Record.KeyConstraint.HasColumnConstraint Database.Record.KeyConstraint.NotNull Database.Relations.Course.Course
instance Database.Record.FromSql.FromSql Database.HDBC.SqlValue.SqlValue Database.Relations.Course.Course
instance Database.Record.ToSql.ToSql Database.HDBC.SqlValue.SqlValue Database.Relations.Course.Course

module Database.Relations.Lecture
data Lecture
Lecture :: !Int32 -> !String -> !String -> !String -> !Int32 -> Lecture
[lectureId] :: Lecture -> !Int32
[name] :: Lecture -> !String
[period] :: Lecture -> !String
[field] :: Lecture -> !String
[credit] :: Lecture -> !Int32
updateLecture :: KeyUpdate Int32 Lecture
selectLecture :: Query Int32 Lecture
credit' :: Pi Lecture Int32
field' :: Pi Lecture String
period' :: Pi Lecture String
name' :: Pi Lecture String
lectureId' :: Pi Lecture Int32
insertQueryLecture :: forall p_apz3. Relation p_apz3 Lecture -> InsertQuery p_apz3
insertLecture :: Insert Lecture
lecture :: Relation () Lecture
tableOfLecture :: Table Lecture
columnOffsetsLecture :: Array Int Int
instance GHC.Generics.Generic Database.Relations.Lecture.Lecture
instance GHC.Show.Show Database.Relations.Lecture.Lecture
instance Database.Record.Persistable.PersistableWidth Database.Relations.Lecture.Lecture
instance Database.Relational.Query.ProjectableClass.ProductConstructor (GHC.Int.Int32 -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String -> GHC.Int.Int32 -> Database.Relations.Lecture.Lecture)
instance Database.Relational.Query.ProjectableClass.ShowConstantTermsSQL Database.Relations.Lecture.Lecture
instance Database.Relational.Query.Table.TableDerivable Database.Relations.Lecture.Lecture
instance Database.Record.KeyConstraint.HasColumnConstraint Database.Record.KeyConstraint.Primary Database.Relations.Lecture.Lecture
instance Database.Record.KeyConstraint.HasKeyConstraint Database.Record.KeyConstraint.Primary Database.Relations.Lecture.Lecture
instance Database.Relational.Query.Constraint.HasConstraintKey Database.Record.KeyConstraint.Primary Database.Relations.Lecture.Lecture GHC.Int.Int32
instance Database.Record.KeyConstraint.HasColumnConstraint Database.Record.KeyConstraint.NotNull Database.Relations.Lecture.Lecture
instance Database.Record.FromSql.FromSql Database.HDBC.SqlValue.SqlValue Database.Relations.Lecture.Lecture
instance Database.Record.ToSql.ToSql Database.HDBC.SqlValue.SqlValue Database.Relations.Lecture.Lecture

module Database.Relations.Student
data Student
Student :: !Int32 -> !Int32 -> !String -> !String -> !String -> !String -> Student
[studentId] :: Student -> !Int32
[studentNumber] :: Student -> !Int32
[name] :: Student -> !String
[faculty] :: Student -> !String
[department] :: Student -> !String
[semester] :: Student -> !String
updateStudent :: KeyUpdate Int32 Student
selectStudent :: Query Int32 Student
semester' :: Pi Student String
department' :: Pi Student String
faculty' :: Pi Student String
name' :: Pi Student String
studentNumber' :: Pi Student Int32
studentId' :: Pi Student Int32
insertQueryStudent :: forall p_atwH. Relation p_atwH Student -> InsertQuery p_atwH
insertStudent :: Insert Student
student :: Relation () Student
tableOfStudent :: Table Student
columnOffsetsStudent :: Array Int Int
instance GHC.Generics.Generic Database.Relations.Student.Student
instance GHC.Show.Show Database.Relations.Student.Student
instance Database.Record.Persistable.PersistableWidth Database.Relations.Student.Student
instance Database.Relational.Query.ProjectableClass.ProductConstructor (GHC.Int.Int32 -> GHC.Int.Int32 -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String -> Database.Relations.Student.Student)
instance Database.Relational.Query.ProjectableClass.ShowConstantTermsSQL Database.Relations.Student.Student
instance Database.Relational.Query.Table.TableDerivable Database.Relations.Student.Student
instance Database.Record.KeyConstraint.HasColumnConstraint Database.Record.KeyConstraint.Primary Database.Relations.Student.Student
instance Database.Record.KeyConstraint.HasKeyConstraint Database.Record.KeyConstraint.Primary Database.Relations.Student.Student
instance Database.Relational.Query.Constraint.HasConstraintKey Database.Record.KeyConstraint.Primary Database.Relations.Student.Student GHC.Int.Int32
instance Database.Record.KeyConstraint.HasColumnConstraint Database.Record.KeyConstraint.NotNull Database.Relations.Student.Student
instance Database.Record.FromSql.FromSql Database.HDBC.SqlValue.SqlValue Database.Relations.Student.Student
instance Database.Record.ToSql.ToSql Database.HDBC.SqlValue.SqlValue Database.Relations.Student.Student

module Library.AccessDatabase
run :: IO ()
selectAllFromLecture :: Relation () Lecture
type Period = String
selectAllFromLectureWherePeriod :: Relation Period Lecture
type StudentNumber = Int32
selectAllFromStudentWhereStudentNumber :: Relation StudentNumber Student

module Library.InsertDB
students :: [Student]
lectures :: [Lecture]
run :: IO ()

module Library.Interface
type Period = String
type EachLecture = [[String]]
type OneWeekLecture = [[[String]]]
run :: IO ()
type Semester = String
createSemesterInformation :: Frame () -> Semester -> IO (Layout)
createStudentInformation :: Frame () -> Student -> IO (Layout)
createCourseRegistration :: Frame () -> OneWeekLecture -> IO (Layout)
type Specilize = Int
type Common = Int
createRecord :: Frame () -> (Common, Specilize) -> IO (Layout)
