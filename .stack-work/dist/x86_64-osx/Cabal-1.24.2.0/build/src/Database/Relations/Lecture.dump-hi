
==================== FINAL INTERFACE ====================
2018-01-21 07:10:50.201908 UTC

interface Research-0.1.0.0-Hn4FdcrWuuOKVDFLG4379u:Database.Relations.Lecture [family instance module] 8002
  interface hash: c79e9d82067a114502988ea9bdc0b92c
  ABI hash: a3d0a6edf65f75df4bef0cc745eac654
  export-list hash: ffaddb1d0318e4dd09285da6660414f0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5320a755f0678d3de6dbb8c17ea710e9
  sig of: Nothing
  used TH splices: True
  where
exports:
  Database.Relations.Lecture.columnOffsetsLecture
  Database.Relations.Lecture.credit'
  Database.Relations.Lecture.field'
  Database.Relations.Lecture.insertLecture
  Database.Relations.Lecture.insertQueryLecture
  Database.Relations.Lecture.lecture
  Database.Relations.Lecture.lectureId'
  Database.Relations.Lecture.name'
  Database.Relations.Lecture.period'
  Database.Relations.Lecture.selectLecture
  Database.Relations.Lecture.tableOfLecture
  Database.Relations.Lecture.updateLecture
  Database.Relations.Lecture.Lecture{Database.Relations.Lecture.Lecture credit field lectureId name period}
module dependencies: Database.Record.TH.PostgreSQL
package dependencies: HDBC-2.4.0.2@HDBC-2.4.0.2-CMf0h3SvMqFJUriR2hhqrA
                      HDBC-postgresql-2.3.2.5@HDBC-postgresql-2.3.2.5-8DjPA5M2Phy2z1B24f9HKN
                      HDBC-session-0.1.1.1@HDBC-session-0.1.1.1-8iI0BgP0QiAFY1v4elsx1d
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      convertible-1.1.1.0@convertible-1.1.1.0-FM6RC8n6JG91WdGj8q2BzE
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      names-th-0.2.0.3@names-th-0.2.0.3-FWd9uhhaPk73vacdw3xBxG
                      old-locale-1.0.0.7@old-locale-1.0.0.7-KGBP1BSKxH5GCm0LnZP04j
                      old-time-1.1.0.3@old-time-1.1.0.3-KWRsMSdY26c2L27Y9n9cyq
                      parsec-3.1.11@parsec-3.1.11-1aqiimsgq2dCv7eoaC8WuX
                      persistable-record-0.5.1.1@persistable-record-0.5.1.1-8Nzb50WMmIH2ecrfnqIMY
                      pretty-1.1.3.3@pretty-1.1.3.3
                      relational-query-0.9.5.0@relational-query-0.9.5.0-17dprTVhIzzB8eMhOSb3o8
                      relational-query-HDBC-0.6.4.1@relational-query-HDBC-0.6.4.1-9QB1S93pLy24XYDJQMAff0
                      relational-schemas-0.1.4.1@relational-schemas-0.1.4.1-D8GFg9X4V2sD9u4K7gADAa
                      sql-words-0.1.5.1@sql-words-0.1.5.1-6ekOanNrtOKYD1ABcjRAD
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      th-data-compat-0.0.2.4@th-data-compat-0.0.2.4-GbISCvWnyQk60k5xubIzhH
                      th-reify-compat-0.0.1.3@th-reify-compat-0.0.1.3-FdL2m7tyb2p89Gevm936I5
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-1DpjxLeTvGg7ttZZojxJR5
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         convertible-1.1.1.0@convertible-1.1.1.0-FM6RC8n6JG91WdGj8q2BzE:Data.Convertible.Instances.C
         convertible-1.1.1.0@convertible-1.1.1.0-FM6RC8n6JG91WdGj8q2BzE:Data.Convertible.Instances.Map
         convertible-1.1.1.0@convertible-1.1.1.0-FM6RC8n6JG91WdGj8q2BzE:Data.Convertible.Instances.Num
         convertible-1.1.1.0@convertible-1.1.1.0-FM6RC8n6JG91WdGj8q2BzE:Data.Convertible.Instances.Text
         convertible-1.1.1.0@convertible-1.1.1.0-FM6RC8n6JG91WdGj8q2BzE:Data.Convertible.Instances.Time
         persistable-record-0.5.1.1@persistable-record-0.5.1.1-8Nzb50WMmIH2ecrfnqIMY:Database.Record.Instances
         persistable-record-0.5.1.1@persistable-record-0.5.1.1-8Nzb50WMmIH2ecrfnqIMY:Database.Record.TupleInstances
         relational-query-0.9.5.0@relational-query-0.9.5.0-17dprTVhIzzB8eMhOSb3o8:Database.Relational.Query.Monad.Aggregate
         relational-query-0.9.5.0@relational-query-0.9.5.0-17dprTVhIzzB8eMhOSb3o8:Database.Relational.Query.Projection
         relational-query-0.9.5.0@relational-query-0.9.5.0-17dprTVhIzzB8eMhOSb3o8:Database.Relational.Query.Pure
         relational-query-0.9.5.0@relational-query-0.9.5.0-17dprTVhIzzB8eMhOSb3o8:Database.Relational.Query.TupleInstances
         relational-query-HDBC-0.6.4.1@relational-query-HDBC-0.6.4.1-9QB1S93pLy24XYDJQMAff0:Database.HDBC.Record.Persistable
         relational-query-HDBC-0.6.4.1@relational-query-HDBC-0.6.4.1-9QB1S93pLy24XYDJQMAff0:Database.HDBC.Schema.PostgreSQL
         relational-query-HDBC-0.6.4.1@relational-query-HDBC-0.6.4.1-9QB1S93pLy24XYDJQMAff0:Database.HDBC.SqlValueExtra
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         relational-schemas-0.1.4.1@relational-schemas-0.1.4.1-D8GFg9X4V2sD9u4K7gADAa:Database.Relational.Schema.PgCatalog.PgAttribute
                         relational-schemas-0.1.4.1@relational-schemas-0.1.4.1-D8GFg9X4V2sD9u4K7gADAa:Database.Relational.Schema.PgCatalog.PgClass
                         relational-schemas-0.1.4.1@relational-schemas-0.1.4.1-D8GFg9X4V2sD9u4K7gADAa:Database.Relational.Schema.PgCatalog.PgConstraint
                         relational-schemas-0.1.4.1@relational-schemas-0.1.4.1-D8GFg9X4V2sD9u4K7gADAa:Database.Relational.Schema.PgCatalog.PgNamespace
                         relational-schemas-0.1.4.1@relational-schemas-0.1.4.1-D8GFg9X4V2sD9u4K7gADAa:Database.Relational.Schema.PgCatalog.PgType
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
import  -/  HDBC-2.4.0.2@HDBC-2.4.0.2-CMf0h3SvMqFJUriR2hhqrA:Database.HDBC.SqlValue 81c8c7ba328011d887c39476cf67caed
import  -/  Database.Record.TH.PostgreSQL e196b55e2d7637d108cfb8ab34ba8970
  exports: b41da3922b09972de925422838a4011b
  defineTable ba3c3261311faca2b170936a284e77d6
import  -/  array-0.5.1.1@array-0.5.1.1:Data.Array.Base a1a813de21dd195f39f7a053a2142a3f
import  -/  base-4.9.1.0:GHC.Arr dbae05e7a9c0aba55cc706ecf0406507
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Generics 1dbec2bc7dd1c5bd8c89ed857eaed19b
import  -/  base-4.9.1.0:GHC.Int e6f85fcab22769385fba2b5fce0acb40
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  persistable-record-0.5.1.1@persistable-record-0.5.1.1-8Nzb50WMmIH2ecrfnqIMY:Database.Record.FromSql 7e729004faa8af09889fb54a8ec3b92b
import  -/  persistable-record-0.5.1.1@persistable-record-0.5.1.1-8Nzb50WMmIH2ecrfnqIMY:Database.Record.KeyConstraint f4c8f549cd6adb080f72864b8e8b54bc
import  -/  persistable-record-0.5.1.1@persistable-record-0.5.1.1-8Nzb50WMmIH2ecrfnqIMY:Database.Record.Persistable 1ebca24166184a0800431fb6bdcb7f49
import  -/  persistable-record-0.5.1.1@persistable-record-0.5.1.1-8Nzb50WMmIH2ecrfnqIMY:Database.Record.ToSql 7ad42e7383d6911ede7b6e736e9e6eb8
import  -/  relational-query-0.9.5.0@relational-query-0.9.5.0-17dprTVhIzzB8eMhOSb3o8:Database.Relational.Query.Constraint 67b0f3b3e330dcc1b5e2bf7370efda97
import  -/  relational-query-0.9.5.0@relational-query-0.9.5.0-17dprTVhIzzB8eMhOSb3o8:Database.Relational.Query.Derives 6554064bbd92332a7e60a76713dfeb35
import  -/  relational-query-0.9.5.0@relational-query-0.9.5.0-17dprTVhIzzB8eMhOSb3o8:Database.Relational.Query.Monad.BaseType 0d6f3b243e166c0bee65a69da6258818
import  -/  relational-query-0.9.5.0@relational-query-0.9.5.0-17dprTVhIzzB8eMhOSb3o8:Database.Relational.Query.Pi c1150b1e2b5dc241ff85f9aac6a6e86d
import  -/  relational-query-0.9.5.0@relational-query-0.9.5.0-17dprTVhIzzB8eMhOSb3o8:Database.Relational.Query.Pi.Unsafe 74dd2540171737cd8688c8680a12feb9
import  -/  relational-query-0.9.5.0@relational-query-0.9.5.0-17dprTVhIzzB8eMhOSb3o8:Database.Relational.Query.ProjectableClass b60bb16c0a3267d92438e804b95c5114
import  -/  relational-query-0.9.5.0@relational-query-0.9.5.0-17dprTVhIzzB8eMhOSb3o8:Database.Relational.Query.Relation b88e647d987f06689e2bd0841aedb368
import  -/  relational-query-0.9.5.0@relational-query-0.9.5.0-17dprTVhIzzB8eMhOSb3o8:Database.Relational.Query.Table 6b446be5743f5d6378c268c137ce27d6
import  -/  relational-query-0.9.5.0@relational-query-0.9.5.0-17dprTVhIzzB8eMhOSb3o8:Database.Relational.Query.Type d1402393a966655860ff9f46dcc3e30b
73da2bdfb7ded481f58d0ffd5cd574e9
  $fFromSqlSqlValueLecture ::
    Database.Record.FromSql.FromSql
      Database.HDBC.SqlValue.SqlValue Database.Relations.Lecture.Lecture
  DFunId
  {- Arity: 1, Strictness: <L,U>m, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Database.Relations.Lecture.$fFromSqlSqlValueLecture_$crecordFromSql
                  `cast`
                (Sym (Database.Record.FromSql.N:FromSql[0]) <Database.HDBC.SqlValue.SqlValue>_N <Database.Relations.Lecture.Lecture>_N) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fFromSqlSqlValueLecture1 ::
    [Database.HDBC.SqlValue.SqlValue]
    -> (Database.Relations.Lecture.Lecture,
        [Database.HDBC.SqlValue.SqlValue])
  {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Database.HDBC.SqlValue.SqlValue]) ->
                 case Database.Relations.Lecture.$w$crecordFromSql
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fFromSqlSqlValueLecture_$crecordFromSql ::
    Database.Record.FromSql.RecordFromSql
      Database.HDBC.SqlValue.SqlValue Database.Relations.Lecture.Lecture
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.$fFromSqlSqlValueLecture1
                  `cast`
                (Sym (Database.Record.FromSql.N:RecordFromSql[0]
                          <Database.HDBC.SqlValue.SqlValue>_R
                          <Database.Relations.Lecture.Lecture>_R)) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fGenericLecture ::
    GHC.Generics.Generic Database.Relations.Lecture.Lecture
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Relations.Lecture.Lecture
                  Database.Relations.Lecture.$fGenericLecture_$cfrom
                  Database.Relations.Lecture.$fGenericLecture_$cto -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fGenericLecture1 ::
    Database.Relations.Lecture.Lecture
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Lecture" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "lectureId")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.SourceStrict
                'GHC.Generics.DecidedUnpack)
             (GHC.Generics.K1 GHC.Generics.R GHC.Int.Int32)
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "name")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.SourceStrict
                                 'GHC.Generics.DecidedStrict)
                              (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "period")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.SourceStrict
                                 'GHC.Generics.DecidedStrict)
                              (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "field")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.SourceStrict
                                                   'GHC.Generics.DecidedStrict)
                                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "credit")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.SourceStrict
                                                                    'GHC.Generics.DecidedUnpack)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R GHC.Int.Int32))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSSSL),1*U(U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Database.Relations.Lecture.Lecture) ->
                 case x1 of wild { Database.Relations.Lecture.Lecture dt g2 g3 g4 dt1 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "lectureId")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.SourceStrict
                            'GHC.Generics.DecidedUnpack)
                         (GHC.Generics.K1 GHC.Generics.R GHC.Int.Int32)
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "name")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.SourceStrict
                                             'GHC.Generics.DecidedStrict)
                                          (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "period")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.SourceStrict
                            'GHC.Generics.DecidedStrict)
                         (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                       GHC.Generics.:*: (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "field")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.SourceStrict
                                              'GHC.Generics.DecidedStrict)
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "credit")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.SourceStrict
                                                               'GHC.Generics.DecidedUnpack)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Int.Int32)))
                    @ x
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "lectureId")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.SourceStrict
                               'GHC.Generics.DecidedUnpack)
                            (GHC.Generics.K1 GHC.Generics.R GHC.Int.Int32))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "name")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.SourceStrict
                               'GHC.Generics.DecidedStrict)
                            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                       @ x
                       (GHC.Int.I32# dt)
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Int.Int32>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "lectureId")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.SourceStrict
                                         'GHC.Generics.DecidedUnpack>_P
                                      <GHC.Generics.K1 GHC.Generics.R GHC.Int.Int32>_R) <x>_N))
                       g2
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "name")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.SourceStrict
                                         'GHC.Generics.DecidedStrict>_P
                                      <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R) <x>_N)))
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "period")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.SourceStrict
                               'GHC.Generics.DecidedStrict)
                            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "field")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.SourceStrict
                               'GHC.Generics.DecidedStrict)
                            (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "credit")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.SourceStrict
                                                'GHC.Generics.DecidedUnpack)
                                             (GHC.Generics.K1 GHC.Generics.R GHC.Int.Int32))
                       @ x
                       g3
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "period")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.SourceStrict
                                         'GHC.Generics.DecidedStrict>_P
                                      <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R) <x>_N))
                       (GHC.Generics.:*:
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "field")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.SourceStrict
                                  'GHC.Generics.DecidedStrict)
                               (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "credit")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.SourceStrict
                                  'GHC.Generics.DecidedUnpack)
                               (GHC.Generics.K1 GHC.Generics.R GHC.Int.Int32))
                          @ x
                          g4
                            `cast`
                          (Trans
                               (Sym (GHC.Generics.N:K1[0]
                                         <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                               (Sym (GHC.Generics.N:M1[0]
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "field")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.SourceStrict
                                            'GHC.Generics.DecidedStrict>_P
                                         <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R) <x>_N))
                          (GHC.Int.I32# dt1)
                            `cast`
                          (Trans
                               (Sym (GHC.Generics.N:K1[0]
                                         <GHC.Generics.R>_P <GHC.Int.Int32>_R <x>_P))
                               (Sym (GHC.Generics.N:M1[0]
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "credit")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.SourceStrict
                                            'GHC.Generics.DecidedUnpack>_P
                                         <GHC.Generics.K1
                                            GHC.Generics.R GHC.Int.Int32>_R) <x>_N)))))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "Lecture" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "lectureId")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.SourceStrict
                                  'GHC.Generics.DecidedUnpack)
                               (GHC.Generics.K1 GHC.Generics.R GHC.Int.Int32)
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "name")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.SourceStrict
                                                   'GHC.Generics.DecidedStrict)
                                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "period")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.SourceStrict
                                                   'GHC.Generics.DecidedStrict)
                                                (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)
                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just "field")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.SourceStrict
                                                                     'GHC.Generics.DecidedStrict)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R GHC.Base.String)
                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                   GHC.Generics.S
                                                                                   ('GHC.Generics.MetaSel
                                                                                      ('GHC.Base.Just
                                                                                         "credit")
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.SourceStrict
                                                                                      'GHC.Generics.DecidedUnpack)
                                                                                   (GHC.Generics.K1
                                                                                      GHC.Generics.R
                                                                                      GHC.Int.Int32)))>_R) <x>_N) }) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fGenericLecture_$cfrom ::
    Database.Relations.Lecture.Lecture
    -> GHC.Generics.Rep Database.Relations.Lecture.Lecture x
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSSSL),1*U(U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.$fGenericLecture1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Database.Relations.Lecture.Lecture>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "Lecture"
                                       "Database.Relations.Lecture"
                                       "Research-0.1.0.0-Hn4FdcrWuuOKVDFLG4379u"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "Lecture" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                       ((GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "lectureId")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.SourceStrict
                                              'GHC.Generics.DecidedUnpack)
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Int.Int32)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "name")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.SourceStrict
                                                               'GHC.Generics.DecidedStrict)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Base.String))
                                        GHC.Generics.:*: (GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "period")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.SourceStrict
                                                               'GHC.Generics.DecidedStrict)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Base.String)
                                                          GHC.Generics.:*: (GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 ('GHC.Base.Just
                                                                                    "field")
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.SourceStrict
                                                                                 'GHC.Generics.DecidedStrict)
                                                                              (GHC.Generics.K1
                                                                                 GHC.Generics.R
                                                                                 GHC.Base.String)
                                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                                               GHC.Generics.S
                                                                                               ('GHC.Generics.MetaSel
                                                                                                  ('GHC.Base.Just
                                                                                                     "credit")
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.SourceStrict
                                                                                                  'GHC.Generics.DecidedUnpack)
                                                                                               (GHC.Generics.K1
                                                                                                  GHC.Generics.R
                                                                                                  GHC.Int.Int32))))>_R))
                          (Sub (Sym (Database.Relations.Lecture.Rep_Lecture[0]))) <x>_N) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fGenericLecture_$cto ::
    GHC.Generics.Rep Database.Relations.Lecture.Lecture x
    -> Database.Relations.Lecture.Lecture
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(SS)S(SS(SS))),1*U(1*U(U,U),1*U(U,1*U(U,U)))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (w :: GHC.Generics.Rep Database.Relations.Lecture.Lecture x) ->
                 case w `cast`
                      (Trans
                           (Sub (Database.Relations.Lecture.Rep_Lecture[0]))
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.D>_P
                                     <'GHC.Generics.MetaData
                                        "Lecture"
                                        "Database.Relations.Lecture"
                                        "Research-0.1.0.0-Hn4FdcrWuuOKVDFLG4379u"
                                        'GHC.Types.False>_P
                                     <GHC.Generics.C1
                                        ('GHC.Generics.MetaCons
                                           "Lecture" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                        ((GHC.Generics.S1
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Base.Just "lectureId")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.SourceStrict
                                               'GHC.Generics.DecidedUnpack)
                                            (GHC.Generics.Rec0 GHC.Int.Int32)
                                          GHC.Generics.:*: GHC.Generics.S1
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "name")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.SourceStrict
                                                                'GHC.Generics.DecidedStrict)
                                                             (GHC.Generics.Rec0 GHC.Base.String))
                                         GHC.Generics.:*: (GHC.Generics.S1
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "period")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.SourceStrict
                                                                'GHC.Generics.DecidedStrict)
                                                             (GHC.Generics.Rec0 GHC.Base.String)
                                                           GHC.Generics.:*: (GHC.Generics.S1
                                                                               ('GHC.Generics.MetaSel
                                                                                  ('GHC.Base.Just
                                                                                     "field")
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.SourceStrict
                                                                                  'GHC.Generics.DecidedStrict)
                                                                               (GHC.Generics.Rec0
                                                                                  GHC.Base.String)
                                                                             GHC.Generics.:*: GHC.Generics.S1
                                                                                                ('GHC.Generics.MetaSel
                                                                                                   ('GHC.Base.Just
                                                                                                      "credit")
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.SourceStrict
                                                                                                   'GHC.Generics.DecidedUnpack)
                                                                                                (GHC.Generics.Rec0
                                                                                                   GHC.Int.Int32))))>_R)
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Lecture" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <(GHC.Generics.S1
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "lectureId")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.SourceStrict
                                            'GHC.Generics.DecidedUnpack)
                                         (GHC.Generics.Rec0 GHC.Int.Int32)
                                       GHC.Generics.:*: GHC.Generics.S1
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "name")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.SourceStrict
                                                             'GHC.Generics.DecidedStrict)
                                                          (GHC.Generics.Rec0 GHC.Base.String))
                                      GHC.Generics.:*: (GHC.Generics.S1
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "period")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.SourceStrict
                                                             'GHC.Generics.DecidedStrict)
                                                          (GHC.Generics.Rec0 GHC.Base.String)
                                                        GHC.Generics.:*: (GHC.Generics.S1
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "field")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.SourceStrict
                                                                               'GHC.Generics.DecidedStrict)
                                                                            (GHC.Generics.Rec0
                                                                               GHC.Base.String)
                                                                          GHC.Generics.:*: GHC.Generics.S1
                                                                                             ('GHC.Generics.MetaSel
                                                                                                ('GHC.Base.Just
                                                                                                   "credit")
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.SourceStrict
                                                                                                'GHC.Generics.DecidedUnpack)
                                                                                             (GHC.Generics.Rec0
                                                                                                GHC.Int.Int32)))>_R)) <x>_N) of ww { GHC.Generics.:*: ww1 ww2 ->
                 case ww1 of ww3 { GHC.Generics.:*: ww4 ww5 ->
                 case ww2 of ww6 { GHC.Generics.:*: ww7 ww8 ->
                 case ww8 of ww9 { GHC.Generics.:*: ww10 ww11 ->
                 case ww4
                        `cast`
                      (Trans
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.S>_P
                                <'GHC.Generics.MetaSel
                                   ('GHC.Base.Just "lectureId")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.SourceStrict
                                   'GHC.Generics.DecidedUnpack>_P
                                <GHC.Generics.K1 GHC.Generics.R GHC.Int.Int32>_R <x>_N)
                           (GHC.Generics.N:K1[0]
                                <GHC.Generics.R>_P
                                <GHC.Int.Int32>_R
                                <x>_P)) of dt { GHC.Int.I32# dt1 ->
                 case ww5
                        `cast`
                      (Trans
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.S>_P
                                <'GHC.Generics.MetaSel
                                   ('GHC.Base.Just "name")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.SourceStrict
                                   'GHC.Generics.DecidedStrict>_P
                                <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R <x>_N)
                           (GHC.Generics.N:K1[0]
                                <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P)) of dt2 { DEFAULT ->
                 case ww7
                        `cast`
                      (Trans
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.S>_P
                                <'GHC.Generics.MetaSel
                                   ('GHC.Base.Just "period")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.SourceStrict
                                   'GHC.Generics.DecidedStrict>_P
                                <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R <x>_N)
                           (GHC.Generics.N:K1[0]
                                <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P)) of dt3 { DEFAULT ->
                 case ww10
                        `cast`
                      (Trans
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.S>_P
                                <'GHC.Generics.MetaSel
                                   ('GHC.Base.Just "field")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.SourceStrict
                                   'GHC.Generics.DecidedStrict>_P
                                <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R <x>_N)
                           (GHC.Generics.N:K1[0]
                                <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P)) of dt4 { DEFAULT ->
                 case ww11
                        `cast`
                      (Trans
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.S>_P
                                <'GHC.Generics.MetaSel
                                   ('GHC.Base.Just "credit")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.SourceStrict
                                   'GHC.Generics.DecidedUnpack>_P
                                <GHC.Generics.K1 GHC.Generics.R GHC.Int.Int32>_R <x>_N)
                           (GHC.Generics.N:K1[0]
                                <GHC.Generics.R>_P
                                <GHC.Int.Int32>_R
                                <x>_P)) of dt5 { GHC.Int.I32# dt6 ->
                 Database.Relations.Lecture.Lecture
                   dt1
                   dt2
                   dt3
                   dt4
                   dt6 } } } } } } } } }) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fHasColumnConstraintNotNullLecture ::
    Database.Record.KeyConstraint.HasColumnConstraint
      Database.Record.KeyConstraint.NotNull
      Database.Relations.Lecture.Lecture
  DFunId
  {- Strictness: m, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Database.Relations.Lecture.$fHasColumnConstraintNotNullLecture_$ccolumnConstraint
                  `cast`
                (Sym (Database.Record.KeyConstraint.N:HasColumnConstraint[0]) <Database.Record.KeyConstraint.NotNull>_N <Database.Relations.Lecture.Lecture>_N) -}
f99f350f2df2e49be9ef854b411d586c
  $fHasColumnConstraintNotNullLecture1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fHasColumnConstraintNotNullLecture_$ccolumnConstraint ::
    Database.Record.KeyConstraint.ColumnConstraint
      Database.Record.KeyConstraint.NotNull
      Database.Relations.Lecture.Lecture
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.$fHasColumnConstraintNotNullLecture1
                  `cast`
                (Sym (Database.Record.KeyConstraint.N:ColumnConstraint[0]
                          <Database.Record.KeyConstraint.NotNull>_P
                          <Database.Relations.Lecture.Lecture>_P)) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fHasColumnConstraintPrimaryLecture ::
    Database.Record.KeyConstraint.HasColumnConstraint
      Database.Record.KeyConstraint.Primary
      Database.Relations.Lecture.Lecture
  DFunId
  {- Strictness: m, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Database.Relations.Lecture.$fHasColumnConstraintPrimaryLecture_$ccolumnConstraint
                  `cast`
                (Sym (Database.Record.KeyConstraint.N:HasColumnConstraint[0]) <Database.Record.KeyConstraint.Primary>_N <Database.Relations.Lecture.Lecture>_N) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fHasColumnConstraintPrimaryLecture_$ccolumnConstraint ::
    Database.Record.KeyConstraint.ColumnConstraint
      Database.Record.KeyConstraint.Primary
      Database.Relations.Lecture.Lecture
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.$fHasColumnConstraintNotNullLecture1
                  `cast`
                (Sym (Database.Record.KeyConstraint.N:ColumnConstraint[0]
                          <Database.Record.KeyConstraint.Primary>_P
                          <Database.Relations.Lecture.Lecture>_P)) -}
85966732a04a90ebdb58f8a8694d8daf
  $fHasConstraintKeyPrimaryLectureInt1 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Database.Relations.Lecture.$fHasColumnConstraintNotNullLecture1
                   (GHC.Types.[] @ GHC.Types.Int)) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fHasConstraintKeyPrimaryLectureInt32 ::
    Database.Relational.Query.Constraint.HasConstraintKey
      Database.Record.KeyConstraint.Primary
      Database.Relations.Lecture.Lecture
      GHC.Int.Int32
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Record.KeyConstraint.Primary
                  @ Database.Relations.Lecture.Lecture
                  @ GHC.Int.Int32
                  (Database.Record.Persistable.unsafeValueWidth @ GHC.Int.Int32)
                    `cast`
                  (Sym (Database.Record.Persistable.N:PersistableWidth[0]) <GHC.Int.Int32>_N)
                  Database.Relations.Lecture.$fHasConstraintKeyPrimaryLectureInt32_$cconstraintKey -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fHasConstraintKeyPrimaryLectureInt32_$cconstraintKey ::
    Database.Relational.Query.Constraint.Key
      Database.Record.KeyConstraint.Primary
      Database.Relations.Lecture.Lecture
      GHC.Int.Int32
  {- Strictness: m,
     Unfolding: (Database.Relational.Query.Constraint.Key
                   @ Database.Record.KeyConstraint.Primary
                   @ Database.Relations.Lecture.Lecture
                   @ GHC.Int.Int32
                   Database.Relations.Lecture.$fHasConstraintKeyPrimaryLectureInt1
                   (Database.Record.Persistable.unsafeValueWidth @ GHC.Int.Int32)) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fHasKeyConstraintPrimaryLecture ::
    Database.Record.KeyConstraint.HasKeyConstraint
      Database.Record.KeyConstraint.Primary
      Database.Relations.Lecture.Lecture
  DFunId
  {- Strictness: m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Database.Relations.Lecture.$fHasKeyConstraintPrimaryLecture_$ckeyConstraint
                  `cast`
                (Sym (Database.Record.KeyConstraint.N:HasKeyConstraint[0]) <Database.Record.KeyConstraint.Primary>_N <Database.Relations.Lecture.Lecture>_N) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fHasKeyConstraintPrimaryLecture_$ckeyConstraint ::
    Database.Record.KeyConstraint.KeyConstraint
      Database.Record.KeyConstraint.Primary
      Database.Relations.Lecture.Lecture
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.$fHasConstraintKeyPrimaryLectureInt1
                  `cast`
                (Sym (Database.Record.KeyConstraint.N:KeyConstraint[0]
                          <Database.Record.KeyConstraint.Primary>_P
                          <Database.Relations.Lecture.Lecture>_P)) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fPersistableWidthLecture ::
    Database.Record.Persistable.PersistableWidth
      Database.Relations.Lecture.Lecture
  DFunId
  {- Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Database.Relations.Lecture.$fPersistableWidthLecture_$s$dmpersistableWidth
                  `cast`
                (Sym (Database.Record.Persistable.N:PersistableWidth[0]) <Database.Relations.Lecture.Lecture>_N) -}
efa263f14e327ea3b31d56b13c49056b
  $fPersistableWidthLecture1 ::
    Database.Record.Persistable.GFieldWidthList
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "Lecture"
            "Database.Relations.Lecture"
            "Research-0.1.0.0-Hn4FdcrWuuOKVDFLG4379u"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Lecture" 'GHC.Generics.PrefixI 'GHC.Types.True)
            ((GHC.Generics.S1
                ('GHC.Generics.MetaSel
                   ('GHC.Base.Just "lectureId")
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.SourceStrict
                   'GHC.Generics.DecidedUnpack)
                (GHC.Generics.Rec0 GHC.Int.Int32)
              GHC.Generics.:*: GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    ('GHC.Base.Just "name")
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.SourceStrict
                                    'GHC.Generics.DecidedStrict)
                                 (GHC.Generics.Rec0 GHC.Base.String))
             GHC.Generics.:*: (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    ('GHC.Base.Just "period")
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.SourceStrict
                                    'GHC.Generics.DecidedStrict)
                                 (GHC.Generics.Rec0 GHC.Base.String)
                               GHC.Generics.:*: (GHC.Generics.S1
                                                   ('GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "field")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.SourceStrict
                                                      'GHC.Generics.DecidedStrict)
                                                   (GHC.Generics.Rec0 GHC.Base.String)
                                                 GHC.Generics.:*: GHC.Generics.S1
                                                                    ('GHC.Generics.MetaSel
                                                                       ('GHC.Base.Just "credit")
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.SourceStrict
                                                                       'GHC.Generics.DecidedUnpack)
                                                                    (GHC.Generics.Rec0
                                                                       GHC.Int.Int32))))))
  {- Arity: 1, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.$fPersistableWidthLecture2
                  `cast`
                (Trans
                     (forall (a2 :: <*>_N).
                      Trans
                          (Sym (Data.DList.N:DList[0] <GHC.Types.Int>_R))
                          (Trans
                               (Sym (Data.Functor.Const.N:Const[0]
                                         <*>_N
                                         <Data.DList.DList GHC.Types.Int>_R
                                         <GHC.Generics.M1
                                            GHC.Generics.D
                                            ('GHC.Generics.MetaData
                                               "Lecture"
                                               "Database.Relations.Lecture"
                                               "Research-0.1.0.0-Hn4FdcrWuuOKVDFLG4379u"
                                               'GHC.Types.False)
                                            (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "Lecture" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                               ((GHC.Generics.S1
                                                   ('GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "lectureId")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.SourceStrict
                                                      'GHC.Generics.DecidedUnpack)
                                                   (GHC.Generics.Rec0 GHC.Int.Int32)
                                                 GHC.Generics.:*: GHC.Generics.S1
                                                                    ('GHC.Generics.MetaSel
                                                                       ('GHC.Base.Just "name")
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.SourceStrict
                                                                       'GHC.Generics.DecidedStrict)
                                                                    (GHC.Generics.Rec0
                                                                       GHC.Base.String))
                                                GHC.Generics.:*: (GHC.Generics.S1
                                                                    ('GHC.Generics.MetaSel
                                                                       ('GHC.Base.Just "period")
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.SourceStrict
                                                                       'GHC.Generics.DecidedStrict)
                                                                    (GHC.Generics.Rec0
                                                                       GHC.Base.String)
                                                                  GHC.Generics.:*: (GHC.Generics.S1
                                                                                      ('GHC.Generics.MetaSel
                                                                                         ('GHC.Base.Just
                                                                                            "field")
                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                         'GHC.Generics.SourceStrict
                                                                                         'GHC.Generics.DecidedStrict)
                                                                                      (GHC.Generics.Rec0
                                                                                         GHC.Base.String)
                                                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          ('GHC.Base.Just
                                                                                                             "credit")
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.SourceStrict
                                                                                                          'GHC.Generics.DecidedUnpack)
                                                                                                       (GHC.Generics.Rec0
                                                                                                          GHC.Int.Int32)))))
                                            a2>_P))
                               (Sym (Database.Record.Persistable.N:ProductConst[0]) <Data.DList.DList
                                                                                       GHC.Types.Int>_N <GHC.Generics.M1
                                                                                                           GHC.Generics.D
                                                                                                           ('GHC.Generics.MetaData
                                                                                                              "Lecture"
                                                                                                              "Database.Relations.Lecture"
                                                                                                              "Research-0.1.0.0-Hn4FdcrWuuOKVDFLG4379u"
                                                                                                              'GHC.Types.False)
                                                                                                           (GHC.Generics.M1
                                                                                                              GHC.Generics.C
                                                                                                              ('GHC.Generics.MetaCons
                                                                                                                 "Lecture"
                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                 'GHC.Types.True)
                                                                                                              ((GHC.Generics.S1
                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                     ('GHC.Base.Just
                                                                                                                        "lectureId")
                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                     'GHC.Generics.SourceStrict
                                                                                                                     'GHC.Generics.DecidedUnpack)
                                                                                                                  (GHC.Generics.Rec0
                                                                                                                     GHC.Int.Int32)
                                                                                                                GHC.Generics.:*: GHC.Generics.S1
                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                      ('GHC.Base.Just
                                                                                                                                         "name")
                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                      'GHC.Generics.SourceStrict
                                                                                                                                      'GHC.Generics.DecidedStrict)
                                                                                                                                   (GHC.Generics.Rec0
                                                                                                                                      GHC.Base.String))
                                                                                                               GHC.Generics.:*: (GHC.Generics.S1
                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                      ('GHC.Base.Just
                                                                                                                                         "period")
                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                      'GHC.Generics.SourceStrict
                                                                                                                                      'GHC.Generics.DecidedStrict)
                                                                                                                                   (GHC.Generics.Rec0
                                                                                                                                      GHC.Base.String)
                                                                                                                                 GHC.Generics.:*: (GHC.Generics.S1
                                                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                                                        ('GHC.Base.Just
                                                                                                                                                           "field")
                                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                        'GHC.Generics.SourceStrict
                                                                                                                                                        'GHC.Generics.DecidedStrict)
                                                                                                                                                     (GHC.Generics.Rec0
                                                                                                                                                        GHC.Base.String)
                                                                                                                                                   GHC.Generics.:*: GHC.Generics.S1
                                                                                                                                                                      ('GHC.Generics.MetaSel
                                                                                                                                                                         ('GHC.Base.Just
                                                                                                                                                                            "credit")
                                                                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                         'GHC.Generics.SourceStrict
                                                                                                                                                                         'GHC.Generics.DecidedUnpack)
                                                                                                                                                                      (GHC.Generics.Rec0
                                                                                                                                                                         GHC.Int.Int32)))))
                                                                                                           a2>_N)))
                     (Sym (Database.Record.Persistable.N:GFieldWidthList[0]
                               <GHC.Generics.M1
                                  GHC.Generics.D
                                  ('GHC.Generics.MetaData
                                     "Lecture"
                                     "Database.Relations.Lecture"
                                     "Research-0.1.0.0-Hn4FdcrWuuOKVDFLG4379u"
                                     'GHC.Types.False)
                                  (GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Lecture" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     ((GHC.Generics.S1
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "lectureId")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.SourceStrict
                                            'GHC.Generics.DecidedUnpack)
                                         (GHC.Generics.Rec0 GHC.Int.Int32)
                                       GHC.Generics.:*: GHC.Generics.S1
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "name")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.SourceStrict
                                                             'GHC.Generics.DecidedStrict)
                                                          (GHC.Generics.Rec0 GHC.Base.String))
                                      GHC.Generics.:*: (GHC.Generics.S1
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "period")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.SourceStrict
                                                             'GHC.Generics.DecidedStrict)
                                                          (GHC.Generics.Rec0 GHC.Base.String)
                                                        GHC.Generics.:*: (GHC.Generics.S1
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "field")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.SourceStrict
                                                                               'GHC.Generics.DecidedStrict)
                                                                            (GHC.Generics.Rec0
                                                                               GHC.Base.String)
                                                                          GHC.Generics.:*: GHC.Generics.S1
                                                                                             ('GHC.Generics.MetaSel
                                                                                                ('GHC.Base.Just
                                                                                                   "credit")
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.SourceStrict
                                                                                                'GHC.Generics.DecidedUnpack)
                                                                                             (GHC.Generics.Rec0
                                                                                                GHC.Int.Int32)))))>_N))) -}
13b2a4b1e326da63b0d644140b2e7fd1
  $fPersistableWidthLecture2 :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ @ a2 (eta :: [GHC.Types.Int]) ->
                 GHC.Types.:
                   @ GHC.Types.Int
                   (Database.Record.Persistable.unsafeValueWidth @ GHC.Int.Int32)
                     `cast`
                   (Trans
                        (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                          GHC.Types.Int>_N <GHC.Int.Int32>_N)
                        (Trans
                             (Data.Functor.Const.N:Const[0]
                                  <*>_N <Data.Monoid.Sum GHC.Types.Int>_R <GHC.Int.Int32>_P)
                             (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                   (GHC.Types.:
                      @ GHC.Types.Int
                      (Database.Record.Persistable.unsafeValueWidth @ GHC.Base.String)
                        `cast`
                      (Trans
                           (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                             GHC.Types.Int>_N <[GHC.Types.Char]>_N)
                           (Trans
                                (Data.Functor.Const.N:Const[0]
                                     <*>_N <Data.Monoid.Sum GHC.Types.Int>_R <[GHC.Types.Char]>_P)
                                (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                      (GHC.Types.:
                         @ GHC.Types.Int
                         (Database.Record.Persistable.unsafeValueWidth @ GHC.Base.String)
                           `cast`
                         (Trans
                              (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                                GHC.Types.Int>_N <[GHC.Types.Char]>_N)
                              (Trans
                                   (Data.Functor.Const.N:Const[0]
                                        <*>_N
                                        <Data.Monoid.Sum GHC.Types.Int>_R
                                        <[GHC.Types.Char]>_P)
                                   (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                         (GHC.Types.:
                            @ GHC.Types.Int
                            (Database.Record.Persistable.unsafeValueWidth @ GHC.Base.String)
                              `cast`
                            (Trans
                                 (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                                   GHC.Types.Int>_N <[GHC.Types.Char]>_N)
                                 (Trans
                                      (Data.Functor.Const.N:Const[0]
                                           <*>_N
                                           <Data.Monoid.Sum GHC.Types.Int>_R
                                           <[GHC.Types.Char]>_P)
                                      (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                            (GHC.Types.:
                               @ GHC.Types.Int
                               (Database.Record.Persistable.unsafeValueWidth @ GHC.Int.Int32)
                                 `cast`
                               (Trans
                                    (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                                      GHC.Types.Int>_N <GHC.Int.Int32>_N)
                                    (Trans
                                         (Data.Functor.Const.N:Const[0]
                                              <*>_N
                                              <Data.Monoid.Sum GHC.Types.Int>_R
                                              <GHC.Int.Int32>_P)
                                         (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                               eta))))) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fPersistableWidthLecture_$s$dmpersistableWidth ::
    Database.Record.Persistable.PersistableRecordWidth
      Database.Relations.Lecture.Lecture
  {- Unfolding: InlineRule (-3, True, False)
                (Database.Record.Persistable.pmapConst
                   @ (GHC.Arr.Array GHC.Types.Int GHC.Types.Int)
                   @ (Data.Monoid.Sum GHC.Types.Int)
                   @ Database.Relations.Lecture.Lecture
                   (\ (a2 :: GHC.Arr.Array GHC.Types.Int GHC.Types.Int)[OneShot] ->
                    case a2 of wild { GHC.Arr.Array l u dt ds ->
                    GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      (GHC.Arr.unsafeAt @ GHC.Types.Int @ GHC.Types.Int wild)
                      (Database.Record.Persistable.$dmpersistableWidth_$slessSafeIndex
                         (l, u)
                         (GHC.Types.I# dt)
                         (GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ (GHC.Types.Int, GHC.Types.Int)
                            @ GHC.Types.Int
                            (Data.Tuple.snd @ GHC.Types.Int @ GHC.Types.Int)
                            (l, u))) })
                     `cast`
                   (<GHC.Arr.Array GHC.Types.Int GHC.Types.Int>_R
                    ->_R Sym (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R))
                   (Database.Record.Persistable.genericFieldOffsets
                      @ Database.Relations.Lecture.Lecture
                      Database.Relations.Lecture.$fGenericLecture
                      Database.Relations.Lecture.$fPersistableWidthLecture1
                        `cast`
                      (Database.Record.Persistable.GFieldWidthList
                         (Sym (Database.Relations.Lecture.Rep_Lecture[0])))_R)) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fProductConstructor(->) ::
    Database.Relational.Query.ProjectableClass.ProductConstructor
      (GHC.Int.Int32
       -> GHC.Base.String
       -> GHC.Base.String
       -> GHC.Base.String
       -> GHC.Int.Int32
       -> Database.Relations.Lecture.Lecture)
  DFunId
  {- Arity: 5, HasNoCafRefs, Strictness: <S,U><S,U><S,U><S,U><S,U>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Database.Relations.Lecture.$WLecture
                  `cast`
                (Sym (Database.Relational.Query.ProjectableClass.N:ProductConstructor[0]
                          <GHC.Int.Int32
                           -> GHC.Base.String
                           -> GHC.Base.String
                           -> GHC.Base.String
                           -> GHC.Int.Int32
                           -> Database.Relations.Lecture.Lecture>_N)) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fShowConstantTermsSQLLecture ::
    Database.Relational.Query.ProjectableClass.ShowConstantTermsSQL
      Database.Relations.Lecture.Lecture
  DFunId
  {- Arity: 1, Strictness: <S(LSSSL),1*U(U,U,U,U,U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Database.Relations.Lecture.$fShowConstantTermsSQLLecture_$cshowConstantTermsSQL'
                  `cast`
                (Sym (Database.Relational.Query.ProjectableClass.N:ShowConstantTermsSQL[0]
                          <Database.Relations.Lecture.Lecture>_N)) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fShowConstantTermsSQLLecture_$cshowConstantTermsSQL' ::
    Database.Relations.Lecture.Lecture
    -> Data.DList.DList
         Database.Relational.Query.Internal.SQL.StringSQL
  {- Arity: 1, Strictness: <S(LSSSL),1*U(U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Database.Relations.Lecture.Lecture) ->
                 case w of ww { Database.Relations.Lecture.Lecture ww1 ww2 ww3 ww4 ww5 ->
                 Database.Relations.Lecture.$w$cshowConstantTermsSQL'
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5 }) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fShowLecture :: GHC.Show.Show Database.Relations.Lecture.Lecture
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Relations.Lecture.Lecture
                  Database.Relations.Lecture.$fShowLecture_$cshowsPrec
                  Database.Relations.Lecture.$fShowLecture_$cshow
                  Database.Relations.Lecture.$fShowLecture_$cshowList -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fShowLecture1 ::
    Database.Relations.Lecture.Lecture -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Database.Relations.Lecture.Lecture)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Database.Relations.Lecture.Lecture ww1 ww2 ww3 ww4 ww5 ->
                 Database.Relations.Lecture.$w$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   w1 }) -}
04bb7f3970380ee11e334629b1fc6370
  $fShowLecture2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
03a97ae3959a96c2712ba8c26d475eee
  $fShowLecture3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "credit = "#) -}
c83fd8818620da81ca1dfecb4f9401fc
  $fShowLecture4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "field = "#) -}
a346c007fae57371e0ae73c3171722af
  $fShowLecture5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "period = "#) -}
d83903cca19e4f7a75bb3094435b20be
  $fShowLecture6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "name = "#) -}
6e7791d48f3498e7bc13de7283d09956
  $fShowLecture7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
7b54bde38b30cf751c9166b853844067
  $fShowLecture8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "lectureId = "#) -}
4309dcd656fd8d5810b582c2c29ac04a
  $fShowLecture9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Lecture {"#) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fShowLecture_$cshow ::
    Database.Relations.Lecture.Lecture -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LSSSL),1*U(U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Database.Relations.Lecture.Lecture) ->
                 Database.Relations.Lecture.$fShowLecture_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fShowLecture_$cshowList ::
    [Database.Relations.Lecture.Lecture] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Database.Relations.Lecture.Lecture
                   Database.Relations.Lecture.$fShowLecture1) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fShowLecture_$cshowsPrec ::
    GHC.Types.Int
    -> Database.Relations.Lecture.Lecture -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S(LSSSL),1*U(U,U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Database.Relations.Lecture.Lecture)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Database.Relations.Lecture.Lecture ww3 ww4 ww5 ww6 ww7 ->
                 Database.Relations.Lecture.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   w2 } }) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fTableDerivableLecture ::
    Database.Relational.Query.Table.TableDerivable
      Database.Relations.Lecture.Lecture
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.Relations.Lecture.Lecture
                  Database.Relations.Lecture.$fPersistableWidthLecture_$s$dmpersistableWidth
                    `cast`
                  (Sym (Database.Record.Persistable.N:PersistableWidth[0]) <Database.Relations.Lecture.Lecture>_N)
                  Database.Relations.Lecture.$fTableDerivableLecture_$cderivedTable -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fTableDerivableLecture_$cderivedTable ::
    Database.Relational.Query.Table.Table
      Database.Relations.Lecture.Lecture
  {- Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.tableOfLecture -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fToSqlSqlValueLecture ::
    Database.Record.ToSql.ToSql
      Database.HDBC.SqlValue.SqlValue Database.Relations.Lecture.Lecture
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Database.HDBC.SqlValue.SqlValue
                  @ Database.Relations.Lecture.Lecture
                  Database.Relations.Lecture.$fPersistableWidthLecture_$s$dmpersistableWidth
                    `cast`
                  (Sym (Database.Record.Persistable.N:PersistableWidth[0]) <Database.Relations.Lecture.Lecture>_N)
                  Database.Relations.Lecture.$fToSqlSqlValueLecture_$crecordToSql -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fToSqlSqlValueLecture1 ::
    Database.Relations.Lecture.Lecture
    -> Database.Record.ToSql.ToSqlM Database.HDBC.SqlValue.SqlValue ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSSSL),1*U(U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Database.Relations.Lecture.Lecture) ->
                 case w of ww { Database.Relations.Lecture.Lecture ww1 ww2 ww3 ww4 ww5 ->
                 case Database.Relations.Lecture.$w$crecordToSql
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5 of ww6 { (#,#) ww7 ww8 ->
                 (ww7, ww8)
                   `cast`
                 (Trans
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <((), Data.DList.DList Database.HDBC.SqlValue.SqlValue)>_R))
                      (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                <Data.DList.DList Database.HDBC.SqlValue.SqlValue>_N
                                <Data.Functor.Identity.Identity>_R
                                <()>_N))) } }) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $fToSqlSqlValueLecture_$crecordToSql ::
    Database.Record.ToSql.RecordToSql
      Database.HDBC.SqlValue.SqlValue Database.Relations.Lecture.Lecture
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSSSL),1*U(U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.$fToSqlSqlValueLecture1
                  `cast`
                (Sym (Database.Record.ToSql.N:RecordToSql[0]
                          <Database.HDBC.SqlValue.SqlValue>_N
                          <Database.Relations.Lecture.Lecture>_R)) -}
eaeb562e8519f3d6605be07579348860
  $tc'Lecture :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   672619646909099983##
                   15660091072474546003##
                   Database.Relations.Lecture.$trModule
                   Database.Relations.Lecture.$tc'Lecture1) -}
7933e66a11777d39f8575f2d07359a7a
  $tc'Lecture1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Lecture"#) -}
fe5a94ab7afd1e291948f9b239e9a8a5
  $tcLecture :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7853061765839168252##
                   1107788191108277755##
                   Database.Relations.Lecture.$trModule
                   Database.Relations.Lecture.$tcLecture1) -}
25585baba82e9a180f64515d2c007a6e
  $tcLecture1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lecture"#) -}
e9aa7447d399825814d13ab6d1db5378
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Database.Relations.Lecture.$trModule2
                   Database.Relations.Lecture.$trModule1) -}
60961be06ade9514f3d07d69f52b362a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Database.Relations.Lecture"#) -}
9aa174753ef477b14f5d11222bea359f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Research-0.1.0.0-Hn4FdcrWuuOKVDFLG4379u"#) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  $w$crecordFromSql ::
    [Database.HDBC.SqlValue.SqlValue]
    -> (# Database.Relations.Lecture.Lecture,
          [Database.HDBC.SqlValue.SqlValue] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: [Database.HDBC.SqlValue.SqlValue]) ->
                 let {
                   ds :: [Database.HDBC.SqlValue.SqlValue]
                   = case w of wild {
                       [] -> GHC.List.scanl2 @ Database.HDBC.SqlValue.SqlValue
                       : ds1 xs -> xs }
                 } in
                 let {
                   ds1 :: ((GHC.Generics.:*:)
                             (GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "period")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.SourceStrict
                                   'GHC.Generics.DecidedStrict)
                                (GHC.Generics.Rec0 GHC.Base.String))
                             (GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "field")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.SourceStrict
                                   'GHC.Generics.DecidedStrict)
                                (GHC.Generics.Rec0 GHC.Base.String)
                              GHC.Generics.:*: GHC.Generics.S1
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "credit")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.SourceStrict
                                                    'GHC.Generics.DecidedUnpack)
                                                 (GHC.Generics.Rec0 GHC.Int.Int32))
                             GHC.Prim.Any,
                           [Database.HDBC.SqlValue.SqlValue])
                   = case Database.Relations.Lecture.$w$dGFromSql
                            @ GHC.Prim.Any
                            (case ds of wild {
                               [] -> GHC.List.scanl2 @ Database.HDBC.SqlValue.SqlValue
                               : ds2 xs -> xs }) of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 (# case ds1 of wild { (,) a2 vals' ->
                    case a2 of wild1 { GHC.Generics.:*: ds2 ds3 ->
                    case ds3 of wild2 { GHC.Generics.:*: ds4 ds5 ->
                    case Database.HDBC.SqlValue.$fConvertibleSqlValueInt32_$csafeConvert
                           (GHC.List.head @ Database.HDBC.SqlValue.SqlValue w) of wild3 {
                      Data.Either.Left e
                      -> case e of ww { Data.Convertible.Base.ConvertError ww1 ww2 ww3 ww4 ->
                         case Data.Convertible.Base.convert2 @ GHC.Int.Int32 ww1 ww2 ww3 ww4
                         ret_ty Database.Relations.Lecture.Lecture
                         of {} }
                      Data.Either.Right r
                      -> case r of dt { GHC.Int.I32# dt1 ->
                         case Database.HDBC.SqlValue.$fConvertibleSqlValueByteString_$csafeConvert1
                                (GHC.List.head @ Database.HDBC.SqlValue.SqlValue ds) of wild4 {
                           Data.Either.Left e
                           -> case e of ww { Data.Convertible.Base.ConvertError ww1 ww2 ww3 ww4 ->
                              case Data.Convertible.Base.convert2
                                     @ GHC.Base.String
                                     ww1
                                     ww2
                                     ww3
                                     ww4
                              ret_ty Database.Relations.Lecture.Lecture
                              of {} }
                           Data.Either.Right r1
                           -> case r1 of dt2 { DEFAULT ->
                              case ds2
                                     `cast`
                                   (Trans
                                        (GHC.Generics.N:M1[0]
                                             <GHC.Generics.S>_P
                                             <'GHC.Generics.MetaSel
                                                ('GHC.Base.Just "period")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.SourceStrict
                                                'GHC.Generics.DecidedStrict>_P
                                             <GHC.Generics.K1
                                                GHC.Generics.R GHC.Base.String>_R <GHC.Prim.Any>_N)
                                        (GHC.Generics.N:K1[0]
                                             <GHC.Generics.R>_P
                                             <GHC.Base.String>_R
                                             <GHC.Prim.Any>_P)) of dt3 { DEFAULT ->
                              case ds4
                                     `cast`
                                   (Trans
                                        (GHC.Generics.N:M1[0]
                                             <GHC.Generics.S>_P
                                             <'GHC.Generics.MetaSel
                                                ('GHC.Base.Just "field")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.SourceStrict
                                                'GHC.Generics.DecidedStrict>_P
                                             <GHC.Generics.K1
                                                GHC.Generics.R GHC.Base.String>_R <GHC.Prim.Any>_N)
                                        (GHC.Generics.N:K1[0]
                                             <GHC.Generics.R>_P
                                             <GHC.Base.String>_R
                                             <GHC.Prim.Any>_P)) of dt4 { DEFAULT ->
                              case ds5
                                     `cast`
                                   (Trans
                                        (GHC.Generics.N:M1[0]
                                             <GHC.Generics.S>_P
                                             <'GHC.Generics.MetaSel
                                                ('GHC.Base.Just "credit")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.SourceStrict
                                                'GHC.Generics.DecidedUnpack>_P
                                             <GHC.Generics.K1
                                                GHC.Generics.R GHC.Int.Int32>_R <GHC.Prim.Any>_N)
                                        (GHC.Generics.N:K1[0]
                                             <GHC.Generics.R>_P
                                             <GHC.Int.Int32>_R
                                             <GHC.Prim.Any>_P)) of dt5 { GHC.Int.I32# dt6 ->
                              Database.Relations.Lecture.Lecture
                                dt1
                                dt2
                                dt3
                                dt4
                                dt6 } } } } } } } } } },
                    case ds1 of wild { (,) a2 vals' -> vals' } #)) -}
7aec5be9f38ff57a16342a462a47110c
  $w$crecordToSql ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> (# (), Data.DList.DList Database.HDBC.SqlValue.SqlValue #)
  {- Arity: 5, HasNoCafRefs, Strictness: <L,U><S,U><S,U><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Prim.Int#) ->
                 let {
                   b1 :: GHC.Int.Int32 {- Strictness: m -} = GHC.Int.I32# ww4
                 } in
                 let {
                   k :: Database.HDBC.SqlValue.SqlValue
                   = Database.HDBC.SqlValue.SqlInt32 b1
                 } in
                 let {
                   ds :: Database.HDBC.SqlValue.SqlValue
                   = Database.HDBC.SqlValue.SqlString ww3
                 } in
                 let {
                   ds1 :: Database.HDBC.SqlValue.SqlValue
                   = Database.HDBC.SqlValue.SqlString ww2
                 } in
                 let {
                   k1 :: Database.HDBC.SqlValue.SqlValue
                   = Database.HDBC.SqlValue.SqlString ww1
                 } in
                 let {
                   a2 :: GHC.Int.Int32 {- Strictness: m -} = GHC.Int.I32# ww
                 } in
                 let {
                   ds2 :: Database.HDBC.SqlValue.SqlValue
                   = Database.HDBC.SqlValue.SqlInt32 a2
                 } in
                 (# GHC.Tuple.(),
                    (\ (eta1 :: [Database.HDBC.SqlValue.SqlValue]) ->
                     GHC.Types.:
                       @ Database.HDBC.SqlValue.SqlValue
                       ds2
                       (GHC.Types.:
                          @ Database.HDBC.SqlValue.SqlValue
                          k1
                          (GHC.Types.:
                             @ Database.HDBC.SqlValue.SqlValue
                             ds1
                             (GHC.Types.:
                                @ Database.HDBC.SqlValue.SqlValue
                                ds
                                (GHC.Types.: @ Database.HDBC.SqlValue.SqlValue k eta1)))))
                      `cast`
                    (Sym (Data.DList.N:DList[0]
                              <Database.HDBC.SqlValue.SqlValue>_R)) #)) -}
8444ae3ce55a6caa322657dc089be782
  $w$cshowConstantTermsSQL' ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> Data.DList.DList
         Database.Relational.Query.Internal.SQL.StringSQL
  {- Arity: 5, Strictness: <L,U><S,U><S,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Prim.Int#) ->
                 let {
                   xs :: Data.DList.DList Language.SQL.Keyword.Internal.Type.Keyword
                   = Database.Relations.Lecture.$w$dGShowConstantTermsSQL1
                       @ GHC.Prim.Any
                       (GHC.Int.I32# ww)
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Int.Int32>_R <GHC.Prim.Any>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "lectureId")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.SourceStrict
                                         'GHC.Generics.DecidedUnpack>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R GHC.Int.Int32>_R) <GHC.Prim.Any>_N))
                       ww1
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.String>_R <GHC.Prim.Any>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "name")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.SourceStrict
                                         'GHC.Generics.DecidedStrict>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R GHC.Base.String>_R) <GHC.Prim.Any>_N))
                 } in
                 let {
                   xs1 :: [GHC.Types.Char]
                   = GHC.Base.++
                       @ GHC.Types.Char
                       (Database.Relational.Query.Pure.$fShowConstantTermsSQLByteString_rec
                          ww2)
                       Database.Relational.Query.Pure.$fShowConstantTermsSQLByteString2
                 } in
                 let {
                   xs2 :: [GHC.Types.Char]
                   = GHC.Types.:
                       @ GHC.Types.Char
                       Database.Relational.Query.Pure.$fShowConstantTermsSQLByteString3
                       xs1
                 } in
                 let {
                   xs3 :: [GHC.Types.Char] -> [GHC.Types.Char] {- Arity: 1 -}
                   = GHC.Base.++ @ GHC.Types.Char xs2
                 } in
                 let {
                   xs4 :: Language.SQL.Keyword.Internal.Type.Keyword
                   = Language.SQL.Keyword.Internal.Type.Sequence
                       xs3 `cast` (Sym (Language.SQL.Keyword.Internal.Type.N:DString[0]))
                 } in
                 let {
                   ys :: Data.DList.DList Language.SQL.Keyword.Internal.Type.Keyword
                   = Database.Relations.Lecture.$w$dGShowConstantTermsSQL
                       @ GHC.Prim.Any
                       ww3
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.String>_R <GHC.Prim.Any>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "field")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.SourceStrict
                                         'GHC.Generics.DecidedStrict>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R GHC.Base.String>_R) <GHC.Prim.Any>_N))
                       (GHC.Int.I32# ww4)
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Int.Int32>_R <GHC.Prim.Any>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "credit")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.SourceStrict
                                         'GHC.Generics.DecidedUnpack>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R GHC.Int.Int32>_R) <GHC.Prim.Any>_N))
                 } in
                 (\ (eta :: [Language.SQL.Keyword.Internal.Type.Keyword]) ->
                  xs
                    `cast`
                  (Data.DList.N:DList[0]
                       <Language.SQL.Keyword.Internal.Type.Keyword>_R)
                    (GHC.Types.:
                       @ Database.Relational.Query.Internal.SQL.StringSQL
                       xs4
                       (ys
                          `cast`
                        (Data.DList.N:DList[0]
                             <Language.SQL.Keyword.Internal.Type.Keyword>_R)
                          eta)))
                   `cast`
                 (Sym (Data.DList.N:DList[0]
                           <Language.SQL.Keyword.Internal.Type.Keyword>_R))) -}
cd0c9bc76b67adc863e6661c10982383
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 7, Strictness: <S,U><L,U><S,U><S,U><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: GHC.Prim.Int#)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Database.Relations.Lecture.$fShowLecture9
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Database.Relations.Lecture.$fShowLecture8
                          (case GHC.Show.$wshowSignedInt
                                  0#
                                  ww1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Database.Relations.Lecture.$fShowLecture7
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        Database.Relations.Lecture.$fShowLecture6
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows6
                                           (GHC.Show.showLitString
                                              ww2
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.shows6
                                                 (GHC.Base.++
                                                    @ GHC.Types.Char
                                                    Database.Relations.Lecture.$fShowLecture7
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       Database.Relations.Lecture.$fShowLecture5
                                                       (GHC.Types.:
                                                          @ GHC.Types.Char
                                                          GHC.Show.shows6
                                                          (GHC.Show.showLitString
                                                             ww3
                                                             (GHC.Types.:
                                                                @ GHC.Types.Char
                                                                GHC.Show.shows6
                                                                (GHC.Base.++
                                                                   @ GHC.Types.Char
                                                                   Database.Relations.Lecture.$fShowLecture7
                                                                   (GHC.Base.++
                                                                      @ GHC.Types.Char
                                                                      Database.Relations.Lecture.$fShowLecture4
                                                                      (GHC.Types.:
                                                                         @ GHC.Types.Char
                                                                         GHC.Show.shows6
                                                                         (GHC.Show.showLitString
                                                                            ww4
                                                                            (GHC.Types.:
                                                                               @ GHC.Types.Char
                                                                               GHC.Show.shows6
                                                                               (GHC.Base.++
                                                                                  @ GHC.Types.Char
                                                                                  Database.Relations.Lecture.$fShowLecture7
                                                                                  (GHC.Base.++
                                                                                     @ GHC.Types.Char
                                                                                     Database.Relations.Lecture.$fShowLecture3
                                                                                     (case GHC.Show.$wshowSignedInt
                                                                                             0#
                                                                                             ww5
                                                                                             (GHC.Base.++
                                                                                                @ GHC.Types.Char
                                                                                                Database.Relations.Lecture.$fShowLecture2
                                                                                                x) of ww6 { (#,#) ww7 ww8 ->
                                                                                      GHC.Types.:
                                                                                        @ GHC.Types.Char
                                                                                        ww7
                                                                                        ww8 })))))))))))))))))) of ww6 { (#,#) ww7 ww8 ->
                           GHC.Types.: @ GHC.Types.Char ww7 ww8 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
253610ffeb67cbea626f93ea80bf3e53
  $w$dGFromSql ::
    [Database.HDBC.SqlValue.SqlValue]
    -> (# (GHC.Generics.:*:)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  ('GHC.Base.Just "period")
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.SourceStrict
                  'GHC.Generics.DecidedStrict)
               (GHC.Generics.Rec0 GHC.Base.String))
            (GHC.Generics.S1
               ('GHC.Generics.MetaSel
                  ('GHC.Base.Just "field")
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.SourceStrict
                  'GHC.Generics.DecidedStrict)
               (GHC.Generics.Rec0 GHC.Base.String)
             GHC.Generics.:*: GHC.Generics.S1
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "credit")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.SourceStrict
                                   'GHC.Generics.DecidedUnpack)
                                (GHC.Generics.Rec0 GHC.Int.Int32))
            a1,
          [Database.HDBC.SqlValue.SqlValue] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ @ a2 (w :: [Database.HDBC.SqlValue.SqlValue]) ->
                 let {
                   ds :: [Database.HDBC.SqlValue.SqlValue]
                   = case w of wild {
                       [] -> GHC.List.scanl2 @ Database.HDBC.SqlValue.SqlValue
                       : ds1 xs -> xs }
                 } in
                 let {
                   ds1 :: [Database.HDBC.SqlValue.SqlValue]
                   = case ds of wild {
                       [] -> GHC.List.scanl2 @ Database.HDBC.SqlValue.SqlValue
                       : ds2 xs -> xs }
                 } in
                 (# GHC.Generics.:*:
                      @ (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              ('GHC.Base.Just "period")
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.SourceStrict
                              'GHC.Generics.DecidedStrict)
                           (GHC.Generics.Rec0 GHC.Base.String))
                      @ (GHC.Generics.S1
                           ('GHC.Generics.MetaSel
                              ('GHC.Base.Just "field")
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.SourceStrict
                              'GHC.Generics.DecidedStrict)
                           (GHC.Generics.Rec0 GHC.Base.String)
                         GHC.Generics.:*: GHC.Generics.S1
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Base.Just "credit")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.SourceStrict
                                               'GHC.Generics.DecidedUnpack)
                                            (GHC.Generics.Rec0 GHC.Int.Int32))
                      @ a2
                      (case Database.HDBC.SqlValue.$fConvertibleSqlValueByteString_$csafeConvert1
                              (GHC.List.head @ Database.HDBC.SqlValue.SqlValue w) of wild {
                         Data.Either.Left e
                         -> (Data.Convertible.Base.convert1 @ GHC.Base.String e)
                              `cast`
                            (Trans
                                 (Sym (GHC.Generics.N:K1[0]
                                           <GHC.Generics.R>_P <[GHC.Types.Char]>_R <a2>_P))
                                 (Sym (GHC.Generics.N:M1[0]
                                           <GHC.Generics.S>_P
                                           <'GHC.Generics.MetaSel
                                              ('GHC.Base.Just "period")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.SourceStrict
                                              'GHC.Generics.DecidedStrict>_P
                                           <GHC.Generics.K1
                                              GHC.Generics.R GHC.Base.String>_R) <a2>_N))
                         Data.Either.Right r
                         -> r `cast`
                            (Trans
                                 (Sym (GHC.Generics.N:K1[0]
                                           <GHC.Generics.R>_P <[GHC.Types.Char]>_R <a2>_P))
                                 (Sym (GHC.Generics.N:M1[0]
                                           <GHC.Generics.S>_P
                                           <'GHC.Generics.MetaSel
                                              ('GHC.Base.Just "period")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.SourceStrict
                                              'GHC.Generics.DecidedStrict>_P
                                           <GHC.Generics.K1
                                              GHC.Generics.R GHC.Base.String>_R) <a2>_N)) })
                      (GHC.Generics.:*:
                         @ (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "field")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.SourceStrict
                                 'GHC.Generics.DecidedStrict)
                              (GHC.Generics.Rec0 GHC.Base.String))
                         @ (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "credit")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.SourceStrict
                                 'GHC.Generics.DecidedUnpack)
                              (GHC.Generics.Rec0 GHC.Int.Int32))
                         @ a2
                         (case Database.HDBC.SqlValue.$fConvertibleSqlValueByteString_$csafeConvert1
                                 (GHC.List.head @ Database.HDBC.SqlValue.SqlValue ds) of wild {
                            Data.Either.Left e
                            -> (Data.Convertible.Base.convert1 @ GHC.Base.String e)
                                 `cast`
                               (Trans
                                    (Sym (GHC.Generics.N:K1[0]
                                              <GHC.Generics.R>_P <[GHC.Types.Char]>_R <a2>_P))
                                    (Sym (GHC.Generics.N:M1[0]
                                              <GHC.Generics.S>_P
                                              <'GHC.Generics.MetaSel
                                                 ('GHC.Base.Just "field")
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.SourceStrict
                                                 'GHC.Generics.DecidedStrict>_P
                                              <GHC.Generics.K1
                                                 GHC.Generics.R GHC.Base.String>_R) <a2>_N))
                            Data.Either.Right r
                            -> r `cast`
                               (Trans
                                    (Sym (GHC.Generics.N:K1[0]
                                              <GHC.Generics.R>_P <[GHC.Types.Char]>_R <a2>_P))
                                    (Sym (GHC.Generics.N:M1[0]
                                              <GHC.Generics.S>_P
                                              <'GHC.Generics.MetaSel
                                                 ('GHC.Base.Just "field")
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.SourceStrict
                                                 'GHC.Generics.DecidedStrict>_P
                                              <GHC.Generics.K1
                                                 GHC.Generics.R GHC.Base.String>_R) <a2>_N)) })
                         (case Database.HDBC.SqlValue.$fConvertibleSqlValueInt32_$csafeConvert
                                 (GHC.List.head @ Database.HDBC.SqlValue.SqlValue ds1) of wild {
                            Data.Either.Left e
                            -> (Data.Convertible.Base.convert1 @ GHC.Int.Int32 e)
                                 `cast`
                               (Trans
                                    (Sym (GHC.Generics.N:K1[0]
                                              <GHC.Generics.R>_P <GHC.Int.Int32>_R <a2>_P))
                                    (Sym (GHC.Generics.N:M1[0]
                                              <GHC.Generics.S>_P
                                              <'GHC.Generics.MetaSel
                                                 ('GHC.Base.Just "credit")
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.SourceStrict
                                                 'GHC.Generics.DecidedUnpack>_P
                                              <GHC.Generics.K1
                                                 GHC.Generics.R GHC.Int.Int32>_R) <a2>_N))
                            Data.Either.Right r
                            -> r `cast`
                               (Trans
                                    (Sym (GHC.Generics.N:K1[0]
                                              <GHC.Generics.R>_P <GHC.Int.Int32>_R <a2>_P))
                                    (Sym (GHC.Generics.N:M1[0]
                                              <GHC.Generics.S>_P
                                              <'GHC.Generics.MetaSel
                                                 ('GHC.Base.Just "credit")
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.SourceStrict
                                                 'GHC.Generics.DecidedUnpack>_P
                                              <GHC.Generics.K1
                                                 GHC.Generics.R GHC.Int.Int32>_R) <a2>_N)) })),
                    GHC.List.tail @ Database.HDBC.SqlValue.SqlValue ds1 #)) -}
b8d130b27a1d29471d06116b8691f5f7
  $w$dGShowConstantTermsSQL ::
    GHC.Generics.M1
      GHC.Generics.S
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "field")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.SourceStrict
         'GHC.Generics.DecidedStrict)
      (GHC.Generics.Rec0 GHC.Base.String)
      a1
    -> GHC.Generics.M1
         GHC.Generics.S
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "credit")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.SourceStrict
            'GHC.Generics.DecidedUnpack)
         (GHC.Generics.Rec0 GHC.Int.Int32)
         a1
    -> Data.DList.DList
         Database.Relational.Query.Internal.SQL.StringSQL
  {- Arity: 2, Strictness: <L,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ @ a2
                   (ww :: GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "field")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.SourceStrict
                               'GHC.Generics.DecidedStrict)
                            (GHC.Generics.Rec0 GHC.Base.String)
                            a2)
                   (ww1 :: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "credit")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.SourceStrict
                                'GHC.Generics.DecidedUnpack)
                             (GHC.Generics.Rec0 GHC.Int.Int32)
                             a2) ->
                 let {
                   xs :: [GHC.Types.Char]
                   = GHC.Base.++
                       @ GHC.Types.Char
                       (Database.Relational.Query.Pure.$fShowConstantTermsSQLByteString_rec
                          ww
                            `cast`
                          (Trans
                               (GHC.Generics.N:M1[0]
                                    <GHC.Generics.S>_P
                                    <'GHC.Generics.MetaSel
                                       ('GHC.Base.Just "field")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.SourceStrict
                                       'GHC.Generics.DecidedStrict>_P
                                    <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R <a2>_N)
                               (GHC.Generics.N:K1[0]
                                    <GHC.Generics.R>_P <[GHC.Types.Char]>_R <a2>_P)))
                       Database.Relational.Query.Pure.$fShowConstantTermsSQLByteString2
                 } in
                 let {
                   xs1 :: [GHC.Types.Char]
                   = GHC.Types.:
                       @ GHC.Types.Char
                       Database.Relational.Query.Pure.$fShowConstantTermsSQLByteString3
                       xs
                 } in
                 let {
                   xs2 :: [GHC.Types.Char] -> [GHC.Types.Char] {- Arity: 1 -}
                   = GHC.Base.++ @ GHC.Types.Char xs1
                 } in
                 let {
                   xs3 :: Language.SQL.Keyword.Internal.Type.Keyword
                   = Language.SQL.Keyword.Internal.Type.Sequence
                       xs2 `cast` (Sym (Language.SQL.Keyword.Internal.Type.N:DString[0]))
                 } in
                 let {
                   ys :: GHC.Base.String
                   = case ww1
                            `cast`
                          (Trans
                               (GHC.Generics.N:M1[0]
                                    <GHC.Generics.S>_P
                                    <'GHC.Generics.MetaSel
                                       ('GHC.Base.Just "credit")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.SourceStrict
                                       'GHC.Generics.DecidedUnpack>_P
                                    <GHC.Generics.K1 GHC.Generics.R GHC.Int.Int32>_R <a2>_N)
                               (GHC.Generics.N:K1[0]
                                    <GHC.Generics.R>_P
                                    <GHC.Int.Int32>_R
                                    <a2>_P)) of wild { GHC.Int.I32# x# ->
                     case GHC.Show.$wshowSignedInt
                            0#
                            x#
                            (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                     GHC.Types.: @ GHC.Types.Char ww5 ww6 } }
                 } in
                 let {
                   ys1 :: [GHC.Types.Char] -> [GHC.Types.Char] {- Arity: 1 -}
                   = GHC.Base.++ @ GHC.Types.Char ys
                 } in
                 let {
                   ys2 :: Language.SQL.Keyword.Internal.Type.Keyword
                   = Language.SQL.Keyword.Internal.Type.Sequence
                       ys1 `cast` (Sym (Language.SQL.Keyword.Internal.Type.N:DString[0]))
                 } in
                 (\ (eta :: [Language.SQL.Keyword.Internal.Type.Keyword]) ->
                  GHC.Types.:
                    @ Database.Relational.Query.Internal.SQL.StringSQL
                    xs3
                    (GHC.Types.:
                       @ Database.Relational.Query.Internal.SQL.StringSQL
                       ys2
                       eta))
                   `cast`
                 (Sym (Data.DList.N:DList[0]
                           <Language.SQL.Keyword.Internal.Type.Keyword>_R))) -}
ed019d512bb3083e1808e7c79fcf2f83
  $w$dGShowConstantTermsSQL1 ::
    GHC.Generics.M1
      GHC.Generics.S
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "lectureId")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.SourceStrict
         'GHC.Generics.DecidedUnpack)
      (GHC.Generics.Rec0 GHC.Int.Int32)
      a1
    -> GHC.Generics.M1
         GHC.Generics.S
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "name")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.SourceStrict
            'GHC.Generics.DecidedStrict)
         (GHC.Generics.Rec0 GHC.Base.String)
         a1
    -> Data.DList.DList
         Database.Relational.Query.Internal.SQL.StringSQL
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U>, Inline: [0],
     Unfolding: (\ @ a2
                   (ww :: GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "lectureId")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.SourceStrict
                               'GHC.Generics.DecidedUnpack)
                            (GHC.Generics.Rec0 GHC.Int.Int32)
                            a2)
                   (ww1 :: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "name")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.SourceStrict
                                'GHC.Generics.DecidedStrict)
                             (GHC.Generics.Rec0 GHC.Base.String)
                             a2) ->
                 let {
                   xs :: GHC.Base.String
                   = case ww
                            `cast`
                          (Trans
                               (GHC.Generics.N:M1[0]
                                    <GHC.Generics.S>_P
                                    <'GHC.Generics.MetaSel
                                       ('GHC.Base.Just "lectureId")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.SourceStrict
                                       'GHC.Generics.DecidedUnpack>_P
                                    <GHC.Generics.K1 GHC.Generics.R GHC.Int.Int32>_R <a2>_N)
                               (GHC.Generics.N:K1[0]
                                    <GHC.Generics.R>_P
                                    <GHC.Int.Int32>_R
                                    <a2>_P)) of wild { GHC.Int.I32# x# ->
                     case GHC.Show.$wshowSignedInt
                            0#
                            x#
                            (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                     GHC.Types.: @ GHC.Types.Char ww5 ww6 } }
                 } in
                 let {
                   xs1 :: [GHC.Types.Char] -> [GHC.Types.Char] {- Arity: 1 -}
                   = GHC.Base.++ @ GHC.Types.Char xs
                 } in
                 let {
                   xs2 :: Language.SQL.Keyword.Internal.Type.Keyword
                   = Language.SQL.Keyword.Internal.Type.Sequence
                       xs1 `cast` (Sym (Language.SQL.Keyword.Internal.Type.N:DString[0]))
                 } in
                 let {
                   ys :: [GHC.Types.Char]
                   = GHC.Base.++
                       @ GHC.Types.Char
                       (Database.Relational.Query.Pure.$fShowConstantTermsSQLByteString_rec
                          ww1
                            `cast`
                          (Trans
                               (GHC.Generics.N:M1[0]
                                    <GHC.Generics.S>_P
                                    <'GHC.Generics.MetaSel
                                       ('GHC.Base.Just "name")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.SourceStrict
                                       'GHC.Generics.DecidedStrict>_P
                                    <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R <a2>_N)
                               (GHC.Generics.N:K1[0]
                                    <GHC.Generics.R>_P <[GHC.Types.Char]>_R <a2>_P)))
                       Database.Relational.Query.Pure.$fShowConstantTermsSQLByteString2
                 } in
                 let {
                   ys1 :: [GHC.Types.Char]
                   = GHC.Types.:
                       @ GHC.Types.Char
                       Database.Relational.Query.Pure.$fShowConstantTermsSQLByteString3
                       ys
                 } in
                 let {
                   ys2 :: [GHC.Types.Char] -> [GHC.Types.Char] {- Arity: 1 -}
                   = GHC.Base.++ @ GHC.Types.Char ys1
                 } in
                 let {
                   ys3 :: Language.SQL.Keyword.Internal.Type.Keyword
                   = Language.SQL.Keyword.Internal.Type.Sequence
                       ys2 `cast` (Sym (Language.SQL.Keyword.Internal.Type.N:DString[0]))
                 } in
                 (\ (eta :: [Language.SQL.Keyword.Internal.Type.Keyword]) ->
                  GHC.Types.:
                    @ Database.Relational.Query.Internal.SQL.StringSQL
                    xs2
                    (GHC.Types.:
                       @ Database.Relational.Query.Internal.SQL.StringSQL
                       ys3
                       eta))
                   `cast`
                 (Sym (Data.DList.N:DList[0]
                           <Language.SQL.Keyword.Internal.Type.Keyword>_R))) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  data Lecture
    = Lecture {lectureId :: {-# UNPACK #-}GHC.Int.Int32,
               name :: !GHC.Base.String,
               period :: !GHC.Base.String,
               field :: !GHC.Base.String,
               credit :: {-# UNPACK #-}GHC.Int.Int32}
73da2bdfb7ded481f58d0ffd5cd574e9
  axiom Rep_Lecture::
      GHC.Generics.Rep Database.Relations.Lecture.Lecture
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Lecture"
               "Database.Relations.Lecture"
               "Research-0.1.0.0-Hn4FdcrWuuOKVDFLG4379u"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Lecture" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "lectureId")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.SourceStrict
                      'GHC.Generics.DecidedUnpack)
                   (GHC.Generics.Rec0 GHC.Int.Int32)
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "name")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.SourceStrict
                                       'GHC.Generics.DecidedStrict)
                                    (GHC.Generics.Rec0 GHC.Base.String))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "period")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.SourceStrict
                                       'GHC.Generics.DecidedStrict)
                                    (GHC.Generics.Rec0 GHC.Base.String)
                                  GHC.Generics.:*: (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "field")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.SourceStrict
                                                         'GHC.Generics.DecidedStrict)
                                                      (GHC.Generics.Rec0 GHC.Base.String)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          ('GHC.Base.Just "credit")
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.SourceStrict
                                                                          'GHC.Generics.DecidedUnpack)
                                                                       (GHC.Generics.Rec0
                                                                          GHC.Int.Int32)))))
6ed8dc110f0d5663272895048aa88679
  columnOffsetsLecture :: GHC.Arr.Array GHC.Types.Int GHC.Types.Int
  {- Unfolding: (Database.Record.Persistable.offsets
                   Database.Relations.Lecture.columnOffsetsLecture1) -}
ecb2c1a8829c119fe7644de7d9d253b3
  columnOffsetsLecture1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   (Database.Record.Persistable.unsafeValueWidth @ GHC.Int.Int32)
                     `cast`
                   (Trans
                        (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                          GHC.Types.Int>_N <GHC.Int.Int32>_N)
                        (Trans
                             (Data.Functor.Const.N:Const[0]
                                  <*>_N <Data.Monoid.Sum GHC.Types.Int>_R <GHC.Int.Int32>_P)
                             (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                   Database.Relations.Lecture.columnOffsetsLecture2) -}
fbd99b80eb9e2a5dd510d5de39a4ba2b
  columnOffsetsLecture2 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   (Database.Record.Persistable.unsafeValueWidth @ GHC.Base.String)
                     `cast`
                   (Trans
                        (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                          GHC.Types.Int>_N <[GHC.Types.Char]>_N)
                        (Trans
                             (Data.Functor.Const.N:Const[0]
                                  <*>_N <Data.Monoid.Sum GHC.Types.Int>_R <[GHC.Types.Char]>_P)
                             (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                   Database.Relations.Lecture.columnOffsetsLecture3) -}
cf84c6b8e42025023bb21498e672e5d4
  columnOffsetsLecture3 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   (Database.Record.Persistable.unsafeValueWidth @ GHC.Base.String)
                     `cast`
                   (Trans
                        (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                          GHC.Types.Int>_N <[GHC.Types.Char]>_N)
                        (Trans
                             (Data.Functor.Const.N:Const[0]
                                  <*>_N <Data.Monoid.Sum GHC.Types.Int>_R <[GHC.Types.Char]>_P)
                             (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                   Database.Relations.Lecture.columnOffsetsLecture4) -}
2df8e02fe40067c5a8b1ca93a5cd25aa
  columnOffsetsLecture4 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   (Database.Record.Persistable.unsafeValueWidth @ GHC.Base.String)
                     `cast`
                   (Trans
                        (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                          GHC.Types.Int>_N <[GHC.Types.Char]>_N)
                        (Trans
                             (Data.Functor.Const.N:Const[0]
                                  <*>_N <Data.Monoid.Sum GHC.Types.Int>_R <[GHC.Types.Char]>_P)
                             (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                   Database.Relations.Lecture.columnOffsetsLecture5) -}
ce327f8fbfc37e741b8ce38ee6d2a488
  columnOffsetsLecture5 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   (Database.Record.Persistable.unsafeValueWidth @ GHC.Int.Int32)
                     `cast`
                   (Trans
                        (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                          GHC.Types.Int>_N <GHC.Int.Int32>_N)
                        (Trans
                             (Data.Functor.Const.N:Const[0]
                                  <*>_N <Data.Monoid.Sum GHC.Types.Int>_R <GHC.Int.Int32>_P)
                             (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                   (GHC.Types.[] @ GHC.Types.Int)) -}
d98d3ff85b0ba2565b4f0acd69640a14
  credit :: Database.Relations.Lecture.Lecture -> GHC.Int.Int32
  RecSel Left Database.Relations.Lecture.Lecture
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Database.Relations.Lecture.Lecture) ->
                 case ds of wild { Database.Relations.Lecture.Lecture dt ds1 ds2 ds3 dt1 ->
                 GHC.Int.I32# dt1 }) -}
f3edc59dc637b5bd525e0860338442cb
  credit' ::
    Database.Relational.Query.Pi.Unsafe.Pi
      Database.Relations.Lecture.Lecture GHC.Int.Int32
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.credit'1
                  `cast`
                (Sym (Database.Relational.Query.Pi.Unsafe.N:Pi[0]
                          <Database.Relations.Lecture.Lecture>_P <GHC.Int.Int32>_P)) -}
20728bac5262f1253dd76a8d18c730fe
  credit'1 ::
    Database.Record.Persistable.PersistableRecordWidth
      Database.Relations.Lecture.Lecture
    -> (Database.Relational.Query.Pi.Unsafe.Pi'
          Database.Relations.Lecture.Lecture GHC.Int.Int32,
        Database.Record.Persistable.ProductConst
          (Data.Monoid.Sum GHC.Types.Int) GHC.Int.Int32)
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (eta1 :: Database.Record.Persistable.PersistableRecordWidth
                              Database.Relations.Lecture.Lecture) ->
                 (Database.Relational.Query.Pi.Unsafe.Leftest
                    @ Database.Relations.Lecture.Lecture
                    @ GHC.Int.Int32
                    Database.Relations.Lecture.credit'2,
                  Database.Record.Persistable.unsafeValueWidth @ GHC.Int.Int32)) -}
5b6202ccefc016e21951338f93d65af9
  credit'10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "libraries/array/Data/Array/Base.hs"#) -}
1b5d8a82c24f887bdac4bbe104ce74ac
  credit'11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Data.Array.Base"#) -}
dd514c3a3da431fb366dda91efb2170e
  credit'12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "array-0.5.1.1"#) -}
b7fed687dba19fdcf4927aa8f91ee009
  credit'13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "error"#) -}
35e85d4b45b94a94b3a233eb89836b63
  credit'14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Int"#) -}
2e45301e582d997f04bab24615cb2b58
  credit'15 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4#) -}
c980d32237722dad3e64a033123dc196
  credit'2 :: GHC.Types.Int
  {- Unfolding: (case Database.Relations.Lecture.columnOffsetsLecture of wild { GHC.Arr.Array l u dt ds1 ->
                 case l of wild1 { GHC.Types.I# m ->
                 case u of wild2 { GHC.Types.I# n ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# m 4#) of wild4 {
                   GHC.Types.False
                   -> GHC.Arr.indexError
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        (wild1, wild2)
                        Database.Relations.Lecture.credit'15
                        Database.Relations.Lecture.credit'14
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# 4# n) of wild5 {
                        GHC.Types.False
                        -> GHC.Arr.indexError
                             @ GHC.Types.Int
                             @ GHC.Types.Int
                             GHC.Show.$fShowInt
                             (wild1, wild2)
                             Database.Relations.Lecture.credit'15
                             Database.Relations.Lecture.credit'14
                        GHC.Types.True
                        -> let {
                             w :: GHC.Prim.Int# = GHC.Prim.-# 4# m
                           } in
                           let {
                             $j :: GHC.Prim.Void# -> GHC.Types.Int
                               {- Arity: 1, Strictness: <B,A>x -}
                             = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                               GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ GHC.Types.Int
                                 Database.Relations.Lecture.credit'4
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                 (GHC.CString.unpackAppendCString#
                                    "Error in array index; "#
                                    (case GHC.Show.$wshowSignedInt
                                            0#
                                            w
                                            (GHC.Types.[]
                                               @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                     GHC.Base.++
                                       @ GHC.Types.Char
                                       (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                       (GHC.CString.unpackAppendCString#
                                          " not in range [0.."#
                                          (case GHC.Show.$wshowSignedInt
                                                  0#
                                                  dt
                                                  (GHC.Types.[]
                                                     @ GHC.Types.Char) of ww1 { (#,#) ww2 ww3 ->
                                           GHC.Base.++
                                             @ GHC.Types.Char
                                             (GHC.Types.: @ GHC.Types.Char ww2 ww3)
                                             Database.Relations.Lecture.credit'3 })) }))
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# 0# w) of wild6 {
                             GHC.Types.False -> $j GHC.Prim.void#
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# w dt) of wild7 {
                                  GHC.Types.False -> $j GHC.Prim.void#
                                  GHC.Types.True
                                  -> case GHC.Prim.indexArray#
                                            @ GHC.Types.Int
                                            ds1
                                            w of ds4 { Unit# ipv ->
                                     ipv } } } } } } } }) -}
a976e852c3b099428858412c02cf517e
  credit'3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ")"#) -}
5271480deca9bf40dcbb73171ff35d07
  credit'4 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Database.Relations.Lecture.credit'13
                   Database.Relations.Lecture.credit'5
                   GHC.Stack.Types.EmptyCallStack) -}
ffe452fc79fd7cd5d87ff9a2b5dfaab4
  credit'5 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Database.Relations.Lecture.credit'12
                   Database.Relations.Lecture.credit'11
                   Database.Relations.Lecture.credit'10
                   Database.Relations.Lecture.credit'9
                   Database.Relations.Lecture.credit'8
                   Database.Relations.Lecture.credit'7
                   Database.Relations.Lecture.credit'6) -}
381bfc4058aeafc7603a25df2fd4a74c
  credit'6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 76#) -}
e7f81d8158cde1b9080fe9400d8433bc
  credit'7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 88#) -}
9caec49dabc180f014fcb7ee97484fef
  credit'8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 31#) -}
065e54e2eaa39ecf12bda0902722f51e
  credit'9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 87#) -}
39d0aee4e1efe245b8874b88cdbd3fc0
  field :: Database.Relations.Lecture.Lecture -> GHC.Base.String
  RecSel Left Database.Relations.Lecture.Lecture
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Database.Relations.Lecture.Lecture) ->
                 case ds of wild { Database.Relations.Lecture.Lecture dt ds1 ds2 ds3 dt1 ->
                 ds3 }) -}
5fa629334b3c811e165cebcda9a4ac0a
  field' ::
    Database.Relational.Query.Pi.Unsafe.Pi
      Database.Relations.Lecture.Lecture GHC.Base.String
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.field'1
                  `cast`
                (Sym (Database.Relational.Query.Pi.Unsafe.N:Pi[0]
                          <Database.Relations.Lecture.Lecture>_P <GHC.Base.String>_P)) -}
e15e7a9c938a2da0a9122e76a6d62939
  field'1 ::
    Database.Record.Persistable.PersistableRecordWidth
      Database.Relations.Lecture.Lecture
    -> (Database.Relational.Query.Pi.Unsafe.Pi'
          Database.Relations.Lecture.Lecture GHC.Base.String,
        Database.Record.Persistable.ProductConst
          (Data.Monoid.Sum GHC.Types.Int) GHC.Base.String)
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (eta1 :: Database.Record.Persistable.PersistableRecordWidth
                              Database.Relations.Lecture.Lecture) ->
                 (Database.Relational.Query.Pi.Unsafe.Leftest
                    @ Database.Relations.Lecture.Lecture
                    @ GHC.Base.String
                    Database.Relations.Lecture.field'2,
                  Database.Record.Persistable.unsafeValueWidth @ GHC.Base.String)) -}
1cb21a050620f6a648209fd83b98309b
  field'2 :: GHC.Types.Int
  {- Unfolding: (case Database.Relations.Lecture.columnOffsetsLecture of wild { GHC.Arr.Array l u dt ds1 ->
                 case l of wild1 { GHC.Types.I# m ->
                 case u of wild2 { GHC.Types.I# n ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# m 3#) of wild4 {
                   GHC.Types.False
                   -> GHC.Arr.indexError
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        (wild1, wild2)
                        Database.Relations.Lecture.field'3
                        Database.Relations.Lecture.credit'14
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# 3# n) of wild5 {
                        GHC.Types.False
                        -> GHC.Arr.indexError
                             @ GHC.Types.Int
                             @ GHC.Types.Int
                             GHC.Show.$fShowInt
                             (wild1, wild2)
                             Database.Relations.Lecture.field'3
                             Database.Relations.Lecture.credit'14
                        GHC.Types.True
                        -> let {
                             w :: GHC.Prim.Int# = GHC.Prim.-# 3# m
                           } in
                           let {
                             $j :: GHC.Prim.Void# -> GHC.Types.Int
                               {- Arity: 1, Strictness: <B,A>x -}
                             = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                               GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ GHC.Types.Int
                                 Database.Relations.Lecture.credit'4
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                 (GHC.CString.unpackAppendCString#
                                    "Error in array index; "#
                                    (case GHC.Show.$wshowSignedInt
                                            0#
                                            w
                                            (GHC.Types.[]
                                               @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                     GHC.Base.++
                                       @ GHC.Types.Char
                                       (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                       (GHC.CString.unpackAppendCString#
                                          " not in range [0.."#
                                          (case GHC.Show.$wshowSignedInt
                                                  0#
                                                  dt
                                                  (GHC.Types.[]
                                                     @ GHC.Types.Char) of ww1 { (#,#) ww2 ww3 ->
                                           GHC.Base.++
                                             @ GHC.Types.Char
                                             (GHC.Types.: @ GHC.Types.Char ww2 ww3)
                                             Database.Relations.Lecture.credit'3 })) }))
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# 0# w) of wild6 {
                             GHC.Types.False -> $j GHC.Prim.void#
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# w dt) of wild7 {
                                  GHC.Types.False -> $j GHC.Prim.void#
                                  GHC.Types.True
                                  -> case GHC.Prim.indexArray#
                                            @ GHC.Types.Int
                                            ds1
                                            w of ds4 { Unit# ipv ->
                                     ipv } } } } } } } }) -}
5dfc9226a7cd4fb52b66d9998e9c205e
  field'3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 3#) -}
1af16b78ad7d09ac3498b2d1fb2b230d
  insertLecture ::
    Database.Relational.Query.Type.Insert
      Database.Relations.Lecture.Lecture
  {- Unfolding: (case Database.Relational.Query.Type.$wtypedInsertValue'
                        @ Database.Relations.Lecture.Lecture
                        @ Database.Relations.Lecture.Lecture
                        Database.Relational.Query.Internal.Config.defaultConfig
                        Database.Relations.Lecture.tableOfLecture
                        Database.Relations.Lecture.insertLecture1
                          `cast`
                        (Sym (Database.Relational.Query.Effect.N:InsertTarget[0]
                                  <Database.Relations.Lecture.Lecture>_N
                                  <Database.Relations.Lecture.Lecture>_N)) of ww { (#,#) ww1 ww2 ->
                 Database.Relational.Query.Type.Insert
                   @ Database.Relations.Lecture.Lecture
                   ww1
                   ww2 }) -}
33c9bfe29e5db2b9709481b9b6251b9d
  insertLecture1 ::
    Database.Relational.Query.Monad.Register.Register
      Database.Relations.Lecture.Lecture
      (Database.Relational.Query.Projectable.PlaceHolders
         Database.Relations.Lecture.Lecture)
  {- Unfolding: (Database.Relational.Query.Effect.piRegister
                   @ Database.Relations.Lecture.Lecture
                   @ Database.Relations.Lecture.Lecture
                   (case Database.Record.Persistable.offsets
                           (GHC.Types.:
                              @ GHC.Types.Int
                              (Database.Record.Persistable.unsafeValueWidth @ GHC.Int.Int32)
                                `cast`
                              (Trans
                                   (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                                     GHC.Types.Int>_N <GHC.Int.Int32>_N)
                                   (Trans
                                        (Data.Functor.Const.N:Const[0]
                                             <*>_N
                                             <Data.Monoid.Sum GHC.Types.Int>_R
                                             <GHC.Int.Int32>_P)
                                        (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                              (GHC.Types.:
                                 @ GHC.Types.Int
                                 (Database.Record.Persistable.unsafeValueWidth @ GHC.Base.String)
                                   `cast`
                                 (Trans
                                      (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                                        GHC.Types.Int>_N <[GHC.Types.Char]>_N)
                                      (Trans
                                           (Data.Functor.Const.N:Const[0]
                                                <*>_N
                                                <Data.Monoid.Sum GHC.Types.Int>_R
                                                <[GHC.Types.Char]>_P)
                                           (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                                 (GHC.Types.:
                                    @ GHC.Types.Int
                                    (Database.Record.Persistable.unsafeValueWidth @ GHC.Base.String)
                                      `cast`
                                    (Trans
                                         (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                                           GHC.Types.Int>_N <[GHC.Types.Char]>_N)
                                         (Trans
                                              (Data.Functor.Const.N:Const[0]
                                                   <*>_N
                                                   <Data.Monoid.Sum GHC.Types.Int>_R
                                                   <[GHC.Types.Char]>_P)
                                              (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                                    (GHC.Types.:
                                       @ GHC.Types.Int
                                       (Database.Record.Persistable.unsafeValueWidth
                                          @ GHC.Base.String)
                                         `cast`
                                       (Trans
                                            (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                                              GHC.Types.Int>_N <[GHC.Types.Char]>_N)
                                            (Trans
                                                 (Data.Functor.Const.N:Const[0]
                                                      <*>_N
                                                      <Data.Monoid.Sum GHC.Types.Int>_R
                                                      <[GHC.Types.Char]>_P)
                                                 (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                                       (GHC.Types.:
                                          @ GHC.Types.Int
                                          (Database.Record.Persistable.unsafeValueWidth
                                             @ GHC.Int.Int32)
                                            `cast`
                                          (Trans
                                               (Database.Record.Persistable.N:ProductConst[0] <Data.Monoid.Sum
                                                                                                 GHC.Types.Int>_N <GHC.Int.Int32>_N)
                                               (Trans
                                                    (Data.Functor.Const.N:Const[0]
                                                         <*>_N
                                                         <Data.Monoid.Sum GHC.Types.Int>_R
                                                         <GHC.Int.Int32>_P)
                                                    (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R)))
                                          (GHC.Types.[]
                                             @ GHC.Types.Int)))))) of wild { GHC.Arr.Array l u dt ds ->
                    case l of wild1 { GHC.Types.I# m ->
                    case u of wild2 { GHC.Types.I# n ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# m n) of wild4 {
                      GHC.Types.False
                      -> (GHC.Arr.indexError
                            @ GHC.Types.Int
                            @ GHC.Types.Int
                            GHC.Show.$fShowInt
                            (wild1, wild2)
                            wild2
                            (GHC.CString.unpackCString# "Int"#))
                           `cast`
                         (Trans
                              (Sym (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R))
                              (Trans
                                   (Sym (Data.Functor.Const.N:Const[0]
                                             <*>_N
                                             <Data.Monoid.Sum GHC.Types.Int>_R
                                             <Database.Relations.Lecture.Lecture>_P))
                                   (Trans
                                        (Sym (Database.Record.Persistable.N:ProductConst[0]) <Data.Monoid.Sum
                                                                                                GHC.Types.Int>_N)
                                        (Sym (Database.Record.Persistable.N:PersistableWidth[0])) <Database.Relations.Lecture.Lecture>_N)))
                      GHC.Types.True
                      -> case GHC.Prim.indexArray#
                                @ GHC.Types.Int
                                ds
                                (GHC.Prim.-# n m) of ds4 { Unit# ipv ->
                         ipv
                           `cast`
                         (Trans
                              (Sym (Data.Monoid.N:Sum[0] <GHC.Types.Int>_R))
                              (Trans
                                   (Sym (Data.Functor.Const.N:Const[0]
                                             <*>_N
                                             <Data.Monoid.Sum GHC.Types.Int>_R
                                             <Database.Relations.Lecture.Lecture>_P))
                                   (Trans
                                        (Sym (Database.Record.Persistable.N:ProductConst[0]) <Data.Monoid.Sum
                                                                                                GHC.Types.Int>_N)
                                        (Sym (Database.Record.Persistable.N:PersistableWidth[0])) <Database.Relations.Lecture.Lecture>_N))) } } } } })
                   (Database.Relational.Query.Pi.Unsafe.$fCategoryTYPEPi2
                      @ Database.Relations.Lecture.Lecture)
                     `cast`
                   (Sym (Database.Relational.Query.Pi.Unsafe.N:Pi[0]
                             <Database.Relations.Lecture.Lecture>_P
                             <Database.Relations.Lecture.Lecture>_P))) -}
5c42fb50ceb8f0386342504459e046d8
  insertQueryLecture ::
    Database.Relational.Query.Monad.BaseType.Relation
      p0 Database.Relations.Lecture.Lecture
    -> Database.Relational.Query.Type.InsertQuery p0
  {- Arity: 1, Strictness: <C(C(S(SL))),1*C1(C1(U(1*U,A)))>,
     Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.insertQueryLecture1
                  `cast`
                (forall (p0 :: <*>_N).
                 <Database.Relational.Query.Monad.BaseType.Relation
                    p0 Database.Relations.Lecture.Lecture>_R
                 ->_R Sym (Database.Relational.Query.Type.N:InsertQuery[0]
                               <p0>_P)) -}
1282d7b0a862b8736eca24c8cdc8b140
  insertQueryLecture1 ::
    Database.Relational.Query.Monad.BaseType.Relation
      p0 Database.Relations.Lecture.Lecture
    -> GHC.Base.String
  {- Arity: 1, Strictness: <C(C(S(SL))),1*C1(C1(U(1*U,A)))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ p0
                   (eta1 :: Database.Relational.Query.Monad.BaseType.Relation
                              p0 Database.Relations.Lecture.Lecture) ->
                 Database.Relational.Query.Type.insertQuerySQL
                   @ Database.Relations.Lecture.Lecture
                   @ Database.Relations.Lecture.Lecture
                   @ p0
                   Database.Relational.Query.Internal.Config.defaultConfig
                   Database.Relations.Lecture.tableOfLecture
                   (Database.Relational.Query.Pi.Unsafe.$fCategoryTYPEPi2
                      @ Database.Relations.Lecture.Lecture)
                     `cast`
                   (Sym (Database.Relational.Query.Pi.Unsafe.N:Pi[0]
                             <Database.Relations.Lecture.Lecture>_P
                             <Database.Relations.Lecture.Lecture>_P))
                   eta1) -}
997e0783ec8df3142f109e037de30294
  lecture ::
    Database.Relational.Query.Monad.BaseType.Relation
      () Database.Relations.Lecture.Lecture
  {- Arity: 2, Strictness: <L,U><L,A>m,
     Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.lecture1
                  `cast`
                (Trans
                     (<GHC.Types.Int>_R
                      ->_R Trans
                               (<Database.Relational.Query.Internal.Config.Config>_R
                                ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                              <(Database.Relational.Query.Internal.Sub.SubQuery,
                                                GHC.Types.Int)>_R))
                               (Trans
                                    (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                              <*>_N
                                              <Database.Relational.Query.Internal.Config.Config>_R
                                              <Data.Functor.Identity.Identity>_R
                                              <(Database.Relational.Query.Internal.Sub.SubQuery,
                                                GHC.Types.Int)>_N))
                                    (Sym (Database.Relational.Query.Monad.Trans.Config.N:QueryConfig[0]) <Data.Functor.Identity.Identity>_N <(Database.Relational.Query.Internal.Sub.SubQuery,
                                                                                                                                              GHC.Types.Int)>_N)))
                     (Trans
                          (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <GHC.Types.Int>_N
                                    <Database.Relational.Query.Monad.Trans.Config.QueryConfig
                                       Data.Functor.Identity.Identity>_R
                                    <Database.Relational.Query.Internal.Sub.SubQuery>_N))
                          (Trans
                               (Sym (Database.Relational.Query.Monad.Trans.Qualify.N:Qualify[0]) <Database.Relational.Query.Monad.Trans.Config.QueryConfig
                                                                                                    Data.Functor.Identity.Identity>_N <Database.Relational.Query.Internal.Sub.SubQuery>_N)
                               (Sym (Database.Relational.Query.Monad.BaseType.N:Relation[0]
                                         <()>_P <Database.Relations.Lecture.Lecture>_P))))) -}
77e7be13b44e1dcb50c78954d367a342
  lecture1 ::
    GHC.Types.Int
    -> Database.Relational.Query.Internal.Config.Config
    -> (Database.Relational.Query.Internal.Sub.SubQuery, GHC.Types.Int)
  {- Arity: 2, Strictness: <L,U><L,A>m,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: GHC.Types.Int)
                   (eta1 :: Database.Relational.Query.Internal.Config.Config) ->
                 (Database.Relational.Query.Internal.Sub.Table
                    Database.Relations.Lecture.tableOfLecture
                      `cast`
                    (Database.Relational.Query.Table.N:Table[0]
                         <Database.Relations.Lecture.Lecture>_P),
                  eta)) -}
4a6da0ad8ca1892b7d2befa30c3b9f12
  lectureId :: Database.Relations.Lecture.Lecture -> GHC.Int.Int32
  RecSel Left Database.Relations.Lecture.Lecture
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(U,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Database.Relations.Lecture.Lecture) ->
                 case ds of wild { Database.Relations.Lecture.Lecture dt ds1 ds2 ds3 dt1 ->
                 GHC.Int.I32# dt }) -}
b56f73d29e0bc6370865bef6ea2dc15c
  lectureId' ::
    Database.Relational.Query.Pi.Unsafe.Pi
      Database.Relations.Lecture.Lecture GHC.Int.Int32
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.lectureId'1
                  `cast`
                (Sym (Database.Relational.Query.Pi.Unsafe.N:Pi[0]
                          <Database.Relations.Lecture.Lecture>_P <GHC.Int.Int32>_P)) -}
78794e19426c2ba929e348d435fc48dd
  lectureId'1 ::
    Database.Record.Persistable.PersistableRecordWidth
      Database.Relations.Lecture.Lecture
    -> (Database.Relational.Query.Pi.Unsafe.Pi'
          Database.Relations.Lecture.Lecture GHC.Int.Int32,
        Database.Record.Persistable.ProductConst
          (Data.Monoid.Sum GHC.Types.Int) GHC.Int.Int32)
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (eta1 :: Database.Record.Persistable.PersistableRecordWidth
                              Database.Relations.Lecture.Lecture) ->
                 (Database.Relational.Query.Pi.Unsafe.Leftest
                    @ Database.Relations.Lecture.Lecture
                    @ GHC.Int.Int32
                    Database.Relations.Lecture.lectureId'2,
                  Database.Record.Persistable.unsafeValueWidth @ GHC.Int.Int32)) -}
36486b45b138be878f2c7968a6f606fb
  lectureId'2 :: GHC.Types.Int
  {- Unfolding: (case Database.Relations.Lecture.columnOffsetsLecture of wild { GHC.Arr.Array l u dt ds1 ->
                 case l of wild1 { GHC.Types.I# m ->
                 case u of wild2 { GHC.Types.I# n ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# m 0#) of wild4 {
                   GHC.Types.False
                   -> GHC.Arr.indexError
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        (wild1, wild2)
                        Database.Relations.Lecture.$fHasColumnConstraintNotNullLecture1
                        Database.Relations.Lecture.credit'14
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# 0# n) of wild5 {
                        GHC.Types.False
                        -> GHC.Arr.indexError
                             @ GHC.Types.Int
                             @ GHC.Types.Int
                             GHC.Show.$fShowInt
                             (wild1, wild2)
                             Database.Relations.Lecture.$fHasColumnConstraintNotNullLecture1
                             Database.Relations.Lecture.credit'14
                        GHC.Types.True
                        -> let {
                             w :: GHC.Prim.Int# = GHC.Prim.-# 0# m
                           } in
                           let {
                             $j :: GHC.Prim.Void# -> GHC.Types.Int
                               {- Arity: 1, Strictness: <B,A>x -}
                             = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                               GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ GHC.Types.Int
                                 Database.Relations.Lecture.credit'4
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                 (GHC.CString.unpackAppendCString#
                                    "Error in array index; "#
                                    (case GHC.Show.$wshowSignedInt
                                            0#
                                            w
                                            (GHC.Types.[]
                                               @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                     GHC.Base.++
                                       @ GHC.Types.Char
                                       (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                       (GHC.CString.unpackAppendCString#
                                          " not in range [0.."#
                                          (case GHC.Show.$wshowSignedInt
                                                  0#
                                                  dt
                                                  (GHC.Types.[]
                                                     @ GHC.Types.Char) of ww1 { (#,#) ww2 ww3 ->
                                           GHC.Base.++
                                             @ GHC.Types.Char
                                             (GHC.Types.: @ GHC.Types.Char ww2 ww3)
                                             Database.Relations.Lecture.credit'3 })) }))
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# 0# w) of wild6 {
                             GHC.Types.False -> $j GHC.Prim.void#
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# w dt) of wild7 {
                                  GHC.Types.False -> $j GHC.Prim.void#
                                  GHC.Types.True
                                  -> case GHC.Prim.indexArray#
                                            @ GHC.Types.Int
                                            ds1
                                            w of ds4 { Unit# ipv ->
                                     ipv } } } } } } } }) -}
4ade4f0adc2d51436c7c0c2624d7cc4d
  name :: Database.Relations.Lecture.Lecture -> GHC.Base.String
  RecSel Left Database.Relations.Lecture.Lecture
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Database.Relations.Lecture.Lecture) ->
                 case ds of wild { Database.Relations.Lecture.Lecture dt ds1 ds2 ds3 dt1 ->
                 ds1 }) -}
d67291e11407ddfca98f4054a1742049
  name' ::
    Database.Relational.Query.Pi.Unsafe.Pi
      Database.Relations.Lecture.Lecture GHC.Base.String
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.name'1
                  `cast`
                (Sym (Database.Relational.Query.Pi.Unsafe.N:Pi[0]
                          <Database.Relations.Lecture.Lecture>_P <GHC.Base.String>_P)) -}
95d19d4c21747708d8fe86c50bc89f3c
  name'1 ::
    Database.Record.Persistable.PersistableRecordWidth
      Database.Relations.Lecture.Lecture
    -> (Database.Relational.Query.Pi.Unsafe.Pi'
          Database.Relations.Lecture.Lecture GHC.Base.String,
        Database.Record.Persistable.ProductConst
          (Data.Monoid.Sum GHC.Types.Int) GHC.Base.String)
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (eta1 :: Database.Record.Persistable.PersistableRecordWidth
                              Database.Relations.Lecture.Lecture) ->
                 (Database.Relational.Query.Pi.Unsafe.Leftest
                    @ Database.Relations.Lecture.Lecture
                    @ GHC.Base.String
                    Database.Relations.Lecture.name'2,
                  Database.Record.Persistable.unsafeValueWidth @ GHC.Base.String)) -}
a605496467e55fbde20c225a4e1144a9
  name'2 :: GHC.Types.Int
  {- Unfolding: (case Database.Relations.Lecture.columnOffsetsLecture of wild { GHC.Arr.Array l u dt ds1 ->
                 case l of wild1 { GHC.Types.I# m ->
                 case u of wild2 { GHC.Types.I# n ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# m 1#) of wild4 {
                   GHC.Types.False
                   -> GHC.Arr.indexError
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        (wild1, wild2)
                        Database.Relations.Lecture.name'3
                        Database.Relations.Lecture.credit'14
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# 1# n) of wild5 {
                        GHC.Types.False
                        -> GHC.Arr.indexError
                             @ GHC.Types.Int
                             @ GHC.Types.Int
                             GHC.Show.$fShowInt
                             (wild1, wild2)
                             Database.Relations.Lecture.name'3
                             Database.Relations.Lecture.credit'14
                        GHC.Types.True
                        -> let {
                             w :: GHC.Prim.Int# = GHC.Prim.-# 1# m
                           } in
                           let {
                             $j :: GHC.Prim.Void# -> GHC.Types.Int
                               {- Arity: 1, Strictness: <B,A>x -}
                             = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                               GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ GHC.Types.Int
                                 Database.Relations.Lecture.credit'4
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                 (GHC.CString.unpackAppendCString#
                                    "Error in array index; "#
                                    (case GHC.Show.$wshowSignedInt
                                            0#
                                            w
                                            (GHC.Types.[]
                                               @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                     GHC.Base.++
                                       @ GHC.Types.Char
                                       (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                       (GHC.CString.unpackAppendCString#
                                          " not in range [0.."#
                                          (case GHC.Show.$wshowSignedInt
                                                  0#
                                                  dt
                                                  (GHC.Types.[]
                                                     @ GHC.Types.Char) of ww1 { (#,#) ww2 ww3 ->
                                           GHC.Base.++
                                             @ GHC.Types.Char
                                             (GHC.Types.: @ GHC.Types.Char ww2 ww3)
                                             Database.Relations.Lecture.credit'3 })) }))
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# 0# w) of wild6 {
                             GHC.Types.False -> $j GHC.Prim.void#
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# w dt) of wild7 {
                                  GHC.Types.False -> $j GHC.Prim.void#
                                  GHC.Types.True
                                  -> case GHC.Prim.indexArray#
                                            @ GHC.Types.Int
                                            ds1
                                            w of ds4 { Unit# ipv ->
                                     ipv } } } } } } } }) -}
2574b0a074e000314bfe51c603a2730c
  name'3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
78cf62d48e9d90a0d76f0213414eec92
  period :: Database.Relations.Lecture.Lecture -> GHC.Base.String
  RecSel Left Database.Relations.Lecture.Lecture
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Database.Relations.Lecture.Lecture) ->
                 case ds of wild { Database.Relations.Lecture.Lecture dt ds1 ds2 ds3 dt1 ->
                 ds2 }) -}
e044a19bf105c7297791f8231eff92d4
  period' ::
    Database.Relational.Query.Pi.Unsafe.Pi
      Database.Relations.Lecture.Lecture GHC.Base.String
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.period'1
                  `cast`
                (Sym (Database.Relational.Query.Pi.Unsafe.N:Pi[0]
                          <Database.Relations.Lecture.Lecture>_P <GHC.Base.String>_P)) -}
9ce9aa4ea1086e3d89bdc6d88877302f
  period'1 ::
    Database.Record.Persistable.PersistableRecordWidth
      Database.Relations.Lecture.Lecture
    -> (Database.Relational.Query.Pi.Unsafe.Pi'
          Database.Relations.Lecture.Lecture GHC.Base.String,
        Database.Record.Persistable.ProductConst
          (Data.Monoid.Sum GHC.Types.Int) GHC.Base.String)
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (eta1 :: Database.Record.Persistable.PersistableRecordWidth
                              Database.Relations.Lecture.Lecture) ->
                 (Database.Relational.Query.Pi.Unsafe.Leftest
                    @ Database.Relations.Lecture.Lecture
                    @ GHC.Base.String
                    Database.Relations.Lecture.period'2,
                  Database.Record.Persistable.unsafeValueWidth @ GHC.Base.String)) -}
e4928a910e3ed051422a207c15f140c5
  period'2 :: GHC.Types.Int
  {- Unfolding: (case Database.Relations.Lecture.columnOffsetsLecture of wild { GHC.Arr.Array l u dt ds1 ->
                 case l of wild1 { GHC.Types.I# m ->
                 case u of wild2 { GHC.Types.I# n ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# m 2#) of wild4 {
                   GHC.Types.False
                   -> GHC.Arr.indexError
                        @ GHC.Types.Int
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        (wild1, wild2)
                        Database.Relations.Lecture.period'3
                        Database.Relations.Lecture.credit'14
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# 2# n) of wild5 {
                        GHC.Types.False
                        -> GHC.Arr.indexError
                             @ GHC.Types.Int
                             @ GHC.Types.Int
                             GHC.Show.$fShowInt
                             (wild1, wild2)
                             Database.Relations.Lecture.period'3
                             Database.Relations.Lecture.credit'14
                        GHC.Types.True
                        -> let {
                             w :: GHC.Prim.Int# = GHC.Prim.-# 2# m
                           } in
                           let {
                             $j :: GHC.Prim.Void# -> GHC.Types.Int
                               {- Arity: 1, Strictness: <B,A>x -}
                             = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                               GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ GHC.Types.Int
                                 Database.Relations.Lecture.credit'4
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                 (GHC.CString.unpackAppendCString#
                                    "Error in array index; "#
                                    (case GHC.Show.$wshowSignedInt
                                            0#
                                            w
                                            (GHC.Types.[]
                                               @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                     GHC.Base.++
                                       @ GHC.Types.Char
                                       (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                       (GHC.CString.unpackAppendCString#
                                          " not in range [0.."#
                                          (case GHC.Show.$wshowSignedInt
                                                  0#
                                                  dt
                                                  (GHC.Types.[]
                                                     @ GHC.Types.Char) of ww1 { (#,#) ww2 ww3 ->
                                           GHC.Base.++
                                             @ GHC.Types.Char
                                             (GHC.Types.: @ GHC.Types.Char ww2 ww3)
                                             Database.Relations.Lecture.credit'3 })) }))
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# 0# w) of wild6 {
                             GHC.Types.False -> $j GHC.Prim.void#
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# w dt) of wild7 {
                                  GHC.Types.False -> $j GHC.Prim.void#
                                  GHC.Types.True
                                  -> case GHC.Prim.indexArray#
                                            @ GHC.Types.Int
                                            ds1
                                            w of ds4 { Unit# ipv ->
                                     ipv } } } } } } } }) -}
fb37b5603dab4ca48648891eab63ce1b
  period'3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2#) -}
edff42f2dfd7c81e4070fe3f89bf18f3
  selectLecture ::
    Database.Relational.Query.Type.Query
      GHC.Int.Int32 Database.Relations.Lecture.Lecture
  {- Unfolding: InlineRule (0, True, True)
                Database.Relations.Lecture.selectLecture1
                  `cast`
                (Sym (Database.Relational.Query.Type.N:Query[0]
                          <GHC.Int.Int32>_P <Database.Relations.Lecture.Lecture>_P)) -}
789f920962e3aaea41ece4cd95cac719
  selectLecture1 :: GHC.Base.String
  {- Unfolding: (Database.Relational.Query.Type.relationalQuerySQL
                   @ GHC.Int.Int32
                   @ Database.Relations.Lecture.Lecture
                   Database.Relational.Query.Internal.Config.defaultConfig
                   Database.Relations.Lecture.selectLecture2
                   (GHC.Types.[] @ Language.SQL.Keyword.Internal.Type.Keyword)) -}
e484c7790df15fcf6e130301d1162094
  selectLecture2 ::
    Database.Relational.Query.Monad.BaseType.Relation
      GHC.Int.Int32 Database.Relations.Lecture.Lecture
  {- Unfolding: (Database.Relational.Query.Derives.specifiedKey
                   @ GHC.Int.Int32
                   @ Database.Relations.Lecture.Lecture
                   (Database.Record.Persistable.unsafeValueWidth @ GHC.Int.Int32)
                     `cast`
                   (Sym (Database.Record.Persistable.N:PersistableWidth[0]) <GHC.Int.Int32>_N)
                   Database.Relations.Lecture.selectLecture3
                     `cast`
                   (Sym (Database.Relational.Query.Pi.Unsafe.N:Pi[0]
                             <Database.Relations.Lecture.Lecture>_P <GHC.Int.Int32>_P))
                   Database.Relations.Lecture.lecture1
                     `cast`
                   (Trans
                        (<GHC.Types.Int>_R
                         ->_R Trans
                                  (<Database.Relational.Query.Internal.Config.Config>_R
                                   ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                                 <(Database.Relational.Query.Internal.Sub.SubQuery,
                                                   GHC.Types.Int)>_R))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <Database.Relational.Query.Internal.Config.Config>_R
                                                 <Data.Functor.Identity.Identity>_R
                                                 <(Database.Relational.Query.Internal.Sub.SubQuery,
                                                   GHC.Types.Int)>_N))
                                       (Sym (Database.Relational.Query.Monad.Trans.Config.N:QueryConfig[0]) <Data.Functor.Identity.Identity>_N <(Database.Relational.Query.Internal.Sub.SubQuery,
                                                                                                                                                 GHC.Types.Int)>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                       <GHC.Types.Int>_N
                                       <Database.Relational.Query.Monad.Trans.Config.QueryConfig
                                          Data.Functor.Identity.Identity>_R
                                       <Database.Relational.Query.Internal.Sub.SubQuery>_N))
                             (Trans
                                  (Sym (Database.Relational.Query.Monad.Trans.Qualify.N:Qualify[0]) <Database.Relational.Query.Monad.Trans.Config.QueryConfig
                                                                                                       Data.Functor.Identity.Identity>_N <Database.Relational.Query.Internal.Sub.SubQuery>_N)
                                  (Sym (Database.Relational.Query.Monad.BaseType.N:Relation[0]
                                            <()>_P <Database.Relations.Lecture.Lecture>_P)))))) -}
6a7638589ab1bc103f9e75a1e14da1cd
  selectLecture3 ::
    Database.Record.Persistable.PersistableRecordWidth
      Database.Relations.Lecture.Lecture
    -> (Database.Relational.Query.Pi.Unsafe.Pi'
          Database.Relations.Lecture.Lecture GHC.Int.Int32,
        Database.Record.Persistable.PersistableRecordWidth GHC.Int.Int32)
  {- Arity: 1,
     Unfolding: (\ (eta1 :: Database.Record.Persistable.PersistableRecordWidth
                              Database.Relations.Lecture.Lecture) ->
                 Database.Relations.Lecture.selectLecture_lvl44) -}
9f3a652d844c25685b3dbbf8a47b2ed1
  selectLecture_lvl43 ::
    Database.Relational.Query.Pi.Unsafe.Pi'
      Database.Relations.Lecture.Lecture GHC.Int.Int32
  {- HasNoCafRefs,
     Unfolding: (Database.Relational.Query.Pi.Unsafe.Map
                   @ Database.Relations.Lecture.Lecture
                   @ GHC.Int.Int32
                   Database.Relations.Lecture.$fHasConstraintKeyPrimaryLectureInt1) -}
1c41a8a096d1f84f4b54b50213269717
  selectLecture_lvl44 ::
    (Database.Relational.Query.Pi.Unsafe.Pi'
       Database.Relations.Lecture.Lecture GHC.Int.Int32,
     Database.Record.Persistable.PersistableRecordWidth GHC.Int.Int32)
  {- Strictness: m,
     Unfolding: ((Database.Relations.Lecture.selectLecture_lvl43,
                  Database.Record.Persistable.unsafeValueWidth @ GHC.Int.Int32)) -}
73da2bdfb7ded481f58d0ffd5cd574e9
  tableOfLecture ::
    Database.Relational.Query.Table.Table
      Database.Relations.Lecture.Lecture
  {- Unfolding: (case Database.Relational.Query.Table.$wtable
                        @ Database.Relations.Lecture.Lecture
                        Database.Relations.Lecture.tableOfLecture11
                        Database.Relations.Lecture.tableOfLecture1 of ww { (#,,#) ww1 ww2 ww3 ->
                 (Database.Relational.Query.Internal.UntypedTable.Untyped
                    ww1
                    ww2
                    ww3)
                   `cast`
                 (Sym (Database.Relational.Query.Table.N:Table[0]
                           <Database.Relations.Lecture.Lecture>_P)) }) -}
dacfdfe83e4f53518e1c93d93f0c5e08
  tableOfLecture1 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Database.Relations.Lecture.tableOfLecture10
                   Database.Relations.Lecture.tableOfLecture2) -}
4338a5b09100a3ba7465c3c8e7a8ad29
  tableOfLecture10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "lecture_id"#) -}
519212d4516313cbec9e1846e325be8e
  tableOfLecture11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PUBLIC.lecture"#) -}
59ab55af2d86052cffc483cd70f35d68
  tableOfLecture2 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Database.Relations.Lecture.tableOfLecture9
                   Database.Relations.Lecture.tableOfLecture3) -}
4d5864ae2c22bd43b3b4f11144458ed1
  tableOfLecture3 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Database.Relations.Lecture.tableOfLecture8
                   Database.Relations.Lecture.tableOfLecture4) -}
bf747025e03fb4f9fd41542ec8625812
  tableOfLecture4 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Database.Relations.Lecture.tableOfLecture7
                   Database.Relations.Lecture.tableOfLecture5) -}
d44c067a8c2662cd2e3d01792e88b390
  tableOfLecture5 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Database.Relations.Lecture.tableOfLecture6
                   (GHC.Types.[] @ GHC.Base.String)) -}
fb5499ac5618d3e07908dc8a906eba4d
  tableOfLecture6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "credit"#) -}
21bb75467b3d4a7b133196e565845845
  tableOfLecture7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "field"#) -}
8ceaf3c0fbe470774a66b4d28f077c00
  tableOfLecture8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "period"#) -}
599723d3e46e7fab14a06c25fceff324
  tableOfLecture9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "name"#) -}
663b465ed2f7f0f2d5042edf8dd1e3db
  updateLecture ::
    Database.Relational.Query.Type.KeyUpdate
      GHC.Int.Int32 Database.Relations.Lecture.Lecture
  {- Strictness: m,
     Unfolding: (Database.Relational.Query.Type.KeyUpdate
                   @ GHC.Int.Int32
                   @ Database.Relations.Lecture.Lecture
                   Database.Relations.Lecture.updateLecture_key
                     `cast`
                   (Sym (Database.Relational.Query.Pi.Unsafe.N:Pi[0]
                             <Database.Relations.Lecture.Lecture>_P <GHC.Int.Int32>_P))
                   Database.Relations.Lecture.updateLecture1) -}
2da61a6c001ea84311192907521b3897
  updateLecture1 :: GHC.Base.String
  {- Unfolding: (Database.Relational.Query.SQL.updateOtherThanKeySQL
                   @ Database.Relations.Lecture.Lecture
                   @ GHC.Int.Int32
                   Database.Relations.Lecture.tableOfLecture
                   Database.Relations.Lecture.updateLecture_key
                     `cast`
                   (Sym (Database.Relational.Query.Pi.Unsafe.N:Pi[0]
                             <Database.Relations.Lecture.Lecture>_P <GHC.Int.Int32>_P))) -}
fdb09dc7b0846f30bfeffd5de567128d
  updateLecture_key ::
    Database.Record.Persistable.PersistableRecordWidth
      Database.Relations.Lecture.Lecture
    -> (Database.Relational.Query.Pi.Unsafe.Pi'
          Database.Relations.Lecture.Lecture GHC.Int.Int32,
        Database.Record.Persistable.PersistableRecordWidth GHC.Int.Int32)
  {- Arity: 1, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (eta2 :: Database.Record.Persistable.PersistableRecordWidth
                              Database.Relations.Lecture.Lecture) ->
                 (Database.Relational.Query.Pi.Unsafe.Map
                    @ Database.Relations.Lecture.Lecture
                    @ GHC.Int.Int32
                    Database.Relations.Lecture.$fHasConstraintKeyPrimaryLectureInt1,
                  Database.Record.Persistable.unsafeValueWidth @ GHC.Int.Int32)) -}
instance Database.Record.FromSql.FromSql [Database.HDBC.SqlValue.SqlValue,
                                          Database.Relations.Lecture.Lecture]
  = Database.Relations.Lecture.$fFromSqlSqlValueLecture
instance GHC.Generics.Generic [Database.Relations.Lecture.Lecture]
  = Database.Relations.Lecture.$fGenericLecture
instance Database.Record.KeyConstraint.HasColumnConstraint [Database.Record.KeyConstraint.NotNull,
                                                            Database.Relations.Lecture.Lecture]
  = Database.Relations.Lecture.$fHasColumnConstraintNotNullLecture
instance Database.Record.KeyConstraint.HasColumnConstraint [Database.Record.KeyConstraint.Primary,
                                                            Database.Relations.Lecture.Lecture]
  = Database.Relations.Lecture.$fHasColumnConstraintPrimaryLecture
instance Database.Relational.Query.Constraint.HasConstraintKey [Database.Record.KeyConstraint.Primary,
                                                                Database.Relations.Lecture.Lecture,
                                                                GHC.Int.Int32]
  = Database.Relations.Lecture.$fHasConstraintKeyPrimaryLectureInt32
instance Database.Record.KeyConstraint.HasKeyConstraint [Database.Record.KeyConstraint.Primary,
                                                         Database.Relations.Lecture.Lecture]
  = Database.Relations.Lecture.$fHasKeyConstraintPrimaryLecture
instance Database.Record.Persistable.PersistableWidth [Database.Relations.Lecture.Lecture]
  = Database.Relations.Lecture.$fPersistableWidthLecture
instance Database.Relational.Query.ProjectableClass.ProductConstructor [(->)]
  = Database.Relations.Lecture.$fProductConstructor(->)
instance Database.Relational.Query.ProjectableClass.ShowConstantTermsSQL [Database.Relations.Lecture.Lecture]
  = Database.Relations.Lecture.$fShowConstantTermsSQLLecture
instance GHC.Show.Show [Database.Relations.Lecture.Lecture]
  = Database.Relations.Lecture.$fShowLecture
instance Database.Relational.Query.Table.TableDerivable [Database.Relations.Lecture.Lecture]
  = Database.Relations.Lecture.$fTableDerivableLecture
instance Database.Record.ToSql.ToSql [Database.HDBC.SqlValue.SqlValue,
                                      Database.Relations.Lecture.Lecture]
  = Database.Relations.Lecture.$fToSqlSqlValueLecture
family instance GHC.Generics.Rep [Database.Relations.Lecture.Lecture]
  = Database.Relations.Lecture.Rep_Lecture
"SPEC/Database.Relations.Lecture $dmpersistableWidth @ Lecture" [ALWAYS] forall ($dGFieldWidthList :: Database.Record.Persistable.GFieldWidthList
                                                                                                        (GHC.Generics.Rep
                                                                                                           Database.Relations.Lecture.Lecture))
                                                                                ($dGeneric :: GHC.Generics.Generic
                                                                                                Database.Relations.Lecture.Lecture)
                                                                                ($dPersistableWidth :: Database.Record.Persistable.PersistableWidth
                                                                                                         Database.Relations.Lecture.Lecture)
  Database.Record.Persistable.$dmpersistableWidth @ Database.Relations.Lecture.Lecture
                                                  $dPersistableWidth
                                                  $dGeneric
                                                  $dGFieldWidthList
  = Database.Relations.Lecture.$fPersistableWidthLecture_$s$dmpersistableWidth
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

